

Microchip Technology PIC18 LITE Macro Assembler V1.38 build -256452561 
                                                                                               Sun Nov 27 22:40:23 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	text30,global,reloc=2,class=CODE,delta=1
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	text32,global,reloc=2,class=CODE,delta=1
    45                           	psect	text33,global,reloc=2,class=CODE,delta=1
    46                           	psect	text34,global,reloc=2,class=CODE,delta=1
    47                           	psect	text35,global,reloc=2,class=CODE,delta=1
    48                           	psect	text36,global,reloc=2,class=CODE,delta=1
    49                           	psect	text37,global,reloc=2,class=CODE,delta=1
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	text39,global,reloc=2,class=CODE,delta=1
    52                           	psect	text40,global,reloc=2,class=CODE,delta=1
    53                           	psect	text41,global,reloc=2,class=CODE,delta=1
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	text43,global,reloc=2,class=CODE,delta=1
    56                           	psect	text44,global,reloc=2,class=CODE,delta=1
    57                           	psect	text45,global,reloc=2,class=CODE,delta=1
    58                           	psect	text46,global,reloc=2,class=CODE,delta=1
    59                           	psect	text47,global,reloc=2,class=CODE,delta=1
    60                           	psect	text48,global,reloc=2,class=CODE,delta=1
    61                           	psect	text49,global,reloc=2,class=CODE,delta=1
    62                           	psect	text50,global,reloc=2,class=CODE,delta=1
    63                           	psect	text51,global,reloc=2,class=CODE,delta=1
    64                           	psect	text52,global,reloc=2,class=CODE,delta=1
    65                           	psect	text53,global,reloc=2,class=CODE,delta=1
    66                           	psect	text54,global,reloc=2,class=CODE,delta=1
    67                           	psect	text55,global,reloc=2,class=CODE,delta=1
    68                           	psect	text56,global,reloc=2,class=CODE,delta=1
    69                           	psect	text57,global,reloc=2,class=CODE,delta=1
    70                           	psect	text58,global,reloc=2,class=CODE,delta=1
    71                           	psect	text59,global,reloc=2,class=CODE,delta=1
    72                           	psect	text60,global,reloc=2,class=CODE,delta=1
    73                           	psect	text61,global,reloc=2,class=CODE,delta=1
    74                           	psect	text62,global,reloc=2,class=CODE,delta=1
    75                           	psect	text63,global,reloc=2,class=CODE,delta=1
    76                           	psect	text64,global,reloc=2,class=CODE,delta=1
    77                           	psect	text65,global,reloc=2,class=CODE,delta=1
    78                           	psect	text66,global,reloc=2,class=CODE,delta=1
    79                           	psect	text67,global,reloc=2,class=CODE,delta=1
    80                           	psect	text68,global,reloc=2,class=CODE,delta=1
    81                           	psect	text69,global,reloc=2,class=CODE,delta=1
    82                           	psect	text70,global,reloc=2,class=CODE,delta=1
    83                           	psect	text71,global,reloc=2,class=CODE,delta=1
    84                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    85                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    86                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    87                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    88                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    89  0000                     
    90 ;; Function _putch is unused but had its address taken
    91  0000                     
    92 ;;_baud	offset=-4 (param)
    93 ;;_quotient	offset	0
    94 ;;_counter	offset	4
    95 ;;_dividend	offset=-4 (param)
    96 ;;_divisor	offset=-8 (param)
    97 ;;_rf	offset=-2 (param)
    98 ;;__cepin	offset=-3 (param)
    99 ;;__cspin	offset=-4 (param)
   100 ;;_setup	offset	0
   101 ;;_rf	offset=-2 (param)
   102 ;;_pin	offset=-1 (param)
   103 ;;_mode	offset=-2 (param)
   104 ;;_rf	offset=-2 (param)
   105 ;;_setup	offset	0
   106 ;;_result	offset	1
   107 ;;_rf	offset=-2 (param)
   108 ;;_speed	offset=-3 (param)
   109 ;;_rn	offset=-2 (param)
   110 ;;__radio	offset=-4 (param)
   111 ;;_i	offset	0
   112 ;;_retryVar	offset	1
   113 ;;_rn	offset=-2 (param)
   114 ;;__channel	offset=-3 (param)
   115 ;;__node_address	offset=-5 (param)
   116 ;;_rf	offset=-2 (param)
   117 ;;_delay	offset=-3 (param)
   118 ;;_count	offset=-4 (param)
   119 ;;_RF24_setChannel$1938	offset	0
   120 ;;_rf	offset=-2 (param)
   121 ;;_channel	offset=-3 (param)
   122 ;;_rf	offset=-2 (param)
   123 ;;_child	offset=-3 (param)
   124 ;;_address	offset=-7 (param)
   125 ;;_rf	offset=-2 (param)
   126 ;;_node_mask_check	offset	0
   127 ;;_parent_mask	offset	2
   128 ;;_m	offset	4
   129 ;;_i	offset	6
   130 ;;_count	offset	8
   131 ;;_rn	offset=-2 (param)
   132 ;;_header	offset	0
   133 ;;_payload	offset	8
   134 ;;_ok	offset	16
   135 ;;_now	offset	17
   136 ;;_val	offset=-2 (param)
   137 ;;_i	offset	0
   138 ;;_val	offset=-2 (param)
   139 ;;_val	offset=-1 (param)
   140 ;;_rn	offset=-2 (param)
   141 ;;_header	offset=-4 (param)
   142 ;;_message	offset=-6 (param)
   143 ;;_len	offset=-8 (param)
   144 ;;_offset	offset	0
   145 ;;_fragmentLen	offset	2
   146 ;;_fragment_id	offset	4
   147 ;;_ok	offset	5
   148 ;;_msgCount	offset	6
   149 ;;_type	offset	7
   150 ;;_retriesPerFrag	offset	8
   151 ;;_rn	offset=-2 (param)
   152 ;;_header	offset=-4 (param)
   153 ;;_message	offset=-6 (param)
   154 ;;_len	offset=-8 (param)
   155 ;;_writeDirect	offset=-10 (param)
   156 ;;_product	offset	0
   157 ;;_multiplier	offset=-2 (param)
   158 ;;_multiplicand	offset=-4 (param)
   159 ;;_counter	offset	0
   160 ;;_dividend	offset=-2 (param)
   161 ;;_divisor	offset=-4 (param)
   162 ;;_sendType	offset	0
   163 ;;_rn	offset=-2 (param)
   164 ;;_header	offset=-4 (param)
   165 ;;_message	offset=-6 (param)
   166 ;;_len	offset=-8 (param)
   167 ;;_writeDirect	offset=-10 (param)
   168 ;;_rnh	offset=-2 (param)
   169 ;;__to	offset=-4 (param)
   170 ;;__type	offset=-5 (param)
   171 ;;_rn	offset=-2 (param)
   172 ;;_result	offset	0
   173 ;;_rf	offset=-2 (param)
   174 ;;_rf	offset=-2 (param)
   175 ;;_rf	offset=-2 (param)
   176 ;;_buf	offset=-4 (param)
   177 ;;_len	offset=-5 (param)
   178 ;;_RF24_read_payload$1877	offset	0
   179 ;;_current	offset	2
   180 ;;_blank_len	offset	4
   181 ;;_rf	offset=-2 (param)
   182 ;;_buf	offset=-4 (param)
   183 ;;_data_len	offset=-5 (param)
   184 ;;_padding	offset	0
   185 ;;_padding	offset	1
   186 ;;_RF24N_enqueue$1053	offset	2
   187 ;;_message_size	offset	3
   188 ;;_result	offset	5
   189 ;;_isFragment	offset	6
   190 ;;_rn	offset=-2 (param)
   191 ;;_header	offset=-4 (param)
   192 ;;_s	offset	0
   193 ;;_d	offset	2
   194 ;;_d1	offset=-2 (param)
   195 ;;_s1	offset=-4 (param)
   196 ;;_n	offset=-6 (param)
   197 ;;_quotient	offset	0
   198 ;;_counter	offset	2
   199 ;;_dividend	offset=-2 (param)
   200 ;;_divisor	offset=-4 (param)
   201 ;;_levelAddr	offset	0
   202 ;;_rn	offset=-2 (param)
   203 ;;_level	offset=-3 (param)
   204 ;;_status	offset	0
   205 ;;_rf	offset=-2 (param)
   206 ;;_pipe_num	offset=-4 (param)
   207 ;;_to_node	offset	0
   208 ;;_directTo	offset	2
   209 ;;_pre_conversion_send_node	offset	4
   210 ;;_multicast	offset	6
   211 ;;_pre_conversion_send_pipe	offset	8
   212 ;;_rn	offset=-2 (param)
   213 ;;_conversionInfo	offset=-4 (param)
   214 ;;_child_node_mask	offset	0
   215 ;;_result	offset	2
   216 ;;_rn	offset=-2 (param)
   217 ;;_node	offset=-4 (param)
   218 ;;_rn	offset=-2 (param)
   219 ;;_node	offset=-4 (param)
   220 ;;_child_mask	offset	0
   221 ;;_rn	offset=-2 (param)
   222 ;;_node	offset=-4 (param)
   223 ;;_out_pipe	offset	0
   224 ;;_ok	offset	4
   225 ;;_rn	offset=-2 (param)
   226 ;;_node	offset=-4 (param)
   227 ;;_pipe	offset=-5 (param)
   228 ;;_multicast	offset=-6 (param)
   229 ;;_rf	offset=-2 (param)
   230 ;;_buf	offset=-4 (param)
   231 ;;_len	offset=-5 (param)
   232 ;;_multicast	offset=-6 (param)
   233 ;;_RF24_startFastWrite$2095	offset	0
   234 ;;_rf	offset=-2 (param)
   235 ;;_buf	offset=-4 (param)
   236 ;;_len	offset=-5 (param)
   237 ;;_multicast	offset=-6 (param)
   238 ;;_startTx	offset=-7 (param)
   239 ;;_RF24_write_payload$1858	offset	0
   240 ;;_RF24_write_payload$1857	offset	2
   241 ;;_current	offset	4
   242 ;;_blank_len	offset	6
   243 ;;_rf	offset=-2 (param)
   244 ;;_buf	offset=-4 (param)
   245 ;;_data_len	offset=-5 (param)
   246 ;;_writeType	offset=-6 (param)
   247 ;;_rf	offset=-2 (param)
   248 ;;_value	offset=-6 (param)
   249 ;;_result	offset	0
   250 ;;_out	offset	4
   251 ;;_dec	offset	6
   252 ;;_count	offset	8
   253 ;;_rn	offset=-2 (param)
   254 ;;_node	offset=-4 (param)
   255 ;;_pipe	offset=-5 (param)
   256 ;;_rf	offset=-2 (param)
   257 ;;_reg	offset=-3 (param)
   258 ;;_buf	offset=-5 (param)
   259 ;;_len	offset=-6 (param)
   260 ;;_rf	offset=-2 (param)
   261 ;;_pin	offset=-1 (param)
   262 ;;_mode	offset=-2 (param)
   263 ;;_status	offset	0
   264 ;;_rf	offset=-2 (param)
   265 ;;_cmd	offset=-3 (param)
   266 ;;_data	offset=-1 (param)
   267 ;;_rf	offset=-2 (param)
   268 ;;_rf	offset=-2 (param)
   269 ;;_rf	offset=-2 (param)
   270 ;;_mode	offset=-3 (param)
   271 ;;_rf	offset=-2 (param)
   272 ;;_pipe	offset=-3 (param)
   273 ;;_digit	offset	0
   274 ;;_result	offset	1
   275 ;;_rn	offset=-2 (param)
   276 ;;_node	offset=-4 (param)
   277 ;;_RF24_isValid$2293	offset	0
   278 ;;_rf	offset=-2 (param)
   279 ;;_j	offset	0
   280 ;;_i	offset	2
   281 ;;_d	offset=-1 (param)
   282 ;;_rf	offset=-2 (param)
   283 ;;_level	offset=-3 (param)
   284 ;;_rf	offset=-2 (param)
   285 ;;_cfg	offset	0
   286 ;;_rf	offset=-2 (param)
   287 ;;_val	offset	0
   288 ;;_header	offset	1
   289 ;;_returnVal	offset	3
   290 ;;_pipe_num	offset	4
   291 ;;_rn	offset=-2 (param)
   292 ;;_j	offset	0
   293 ;;_i	offset	2
   294 ;;_val	offset=-2 (param)
   295 ;;_reply_time	offset	0
   296 ;;_header	offset	4
   297 ;;_conversion	offset	6
   298 ;;_ok	offset	10
   299 ;;_isAckType	offset	11
   300 ;;_rn	offset=-2 (param)
   301 ;;_to_node	offset=-4 (param)
   302 ;;_directTo	offset=-5 (param)
   303 ;;_start	offset	0
   304 ;;_rf	offset=-2 (param)
   305 ;;_timeout	offset=-6 (param)
   306 ;;_startTx	offset=-7 (param)
   307 ;;_status	offset	0
   308 ;;_rf	offset=-2 (param)
   309 ;;_reg	offset=-3 (param)
   310 ;;_value	offset=-4 (param)
   311 ;;_rf	offset=-2 (param)
   312 ;;_rf	offset=-2 (param)
   313 ;;_result	offset	0
   314 ;;_rf	offset=-2 (param)
   315 ;;_reg	offset=-3 (param)
   316 ;;_en_aa	offset	0
   317 ;;_rf	offset=-2 (param)
   318 ;;_pipe	offset=-3 (param)
   319 ;;_enable	offset=-4 (param)
   320                           
   321                           	psect	idataCOMRAM
   322  0050B4                     __pidataCOMRAM:
   323                           	opt stack 0
   324                           
   325                           ;initializer for RF24N_pipe_address@address_translation
   326  0050B4  C3                 	db	195
   327  0050B5  3C                 	db	60
   328  0050B6  33                 	db	51
   329  0050B7  CE                 	db	206
   330  0050B8  3E                 	db	62
   331  0050B9  E3                 	db	227
   332  0050BA  EC                 	db	236
   333                           
   334                           ;initializer for _next_id
   335  0050BB  0001               	dw	1
   336                           
   337                           	psect	mediumconst
   338  00FDA4                     __pmediumconst:
   339                           	opt stack 0
   340  00FDA4  00                 	db	0
   341  00FDA5  0001               	dw	1
   342  00FDA7  0008               	dw	8
   343  00FDA9  0040               	dw	64
   344  00FDAB  0200               	dw	512
   345  00FDAD  1000               	dw	4096
   346  00FDAF  8000               	dw	32768
   347  00FDB1                     __end_of_octpowers:
   348                           	opt stack 0
   349  00FDB1  0001               	dw	1
   350  00FDB3  000A               	dw	10
   351  00FDB5  0064               	dw	100
   352  00FDB7  03E8               	dw	1000
   353  00FDB9  2710               	dw	10000
   354  00FDBB                     __end_of_dpowers:
   355                           	opt stack 0
   356  00FDBB  0001               	dw	1
   357  00FDBD  0010               	dw	16
   358  00FDBF  0100               	dw	256
   359  00FDC1  1000               	dw	4096
   360  00FDC3                     __end_of_hexpowers:
   361                           	opt stack 0
   362  00FDC3  30                 	db	low _rf24_pa_dbm_e_str_0
   363  00FDC4  FE                 	db	high _rf24_pa_dbm_e_str_0
   364  00FDC5  37                 	db	low _rf24_pa_dbm_e_str_1
   365  00FDC6  FE                 	db	high _rf24_pa_dbm_e_str_1
   366  00FDC7  21                 	db	low _rf24_pa_dbm_e_str_2
   367  00FDC8  FE                 	db	high _rf24_pa_dbm_e_str_2
   368  00FDC9  3E                 	db	low _rf24_pa_dbm_e_str_3
   369  00FDCA  FE                 	db	high _rf24_pa_dbm_e_str_3
   370  00FDCB                     __end_of_rf24_pa_dbm_e_str_P:
   371                           	opt stack 0
   372  00FDCB                     _child_payload_size:
   373                           	opt stack 0
   374  00FDCB  11                 	db	17
   375  00FDCC  12                 	db	18
   376  00FDCD  13                 	db	19
   377  00FDCE  14                 	db	20
   378  00FDCF  15                 	db	21
   379  00FDD0  16                 	db	22
   380  00FDD1                     __end_of_child_payload_size:
   381                           	opt stack 0
   382  00FDD1                     _child_pipe:
   383                           	opt stack 0
   384  00FDD1  0A                 	db	10
   385  00FDD2  0B                 	db	11
   386  00FDD3  0C                 	db	12
   387  00FDD4  0D                 	db	13
   388  00FDD5  0E                 	db	14
   389  00FDD6  0F                 	db	15
   390  00FDD7                     __end_of_child_pipe:
   391                           	opt stack 0
   392  00FDD7                     _child_pipe_enable:
   393                           	opt stack 0
   394  00FDD7  00                 	db	0
   395  00FDD8  01                 	db	1
   396  00FDD9  02                 	db	2
   397  00FDDA  03                 	db	3
   398  00FDDB  04                 	db	4
   399  00FDDC  05                 	db	5
   400  00FDDD                     __end_of_child_pipe_enable:
   401                           	opt stack 0
   402  00FDDD  FF                 	db	low _rf24_crclength_e_str_0
   403  00FDDE  FD                 	db	high _rf24_crclength_e_str_0
   404  00FDDF  29                 	db	low _rf24_crclength_e_str_1
   405  00FDE0  FE                 	db	high _rf24_crclength_e_str_1
   406  00FDE1  11                 	db	low _rf24_crclength_e_str_2
   407  00FDE2  FE                 	db	high _rf24_crclength_e_str_2
   408  00FDE3                     __end_of_rf24_crclength_e_str_P:
   409                           	opt stack 0
   410  00FDE3  45                 	db	low _rf24_datarate_e_str_0
   411  00FDE4  FE                 	db	high _rf24_datarate_e_str_0
   412  00FDE5  4B                 	db	low _rf24_datarate_e_str_1
   413  00FDE6  FE                 	db	high _rf24_datarate_e_str_1
   414  00FDE7  19                 	db	low _rf24_datarate_e_str_2
   415  00FDE8  FE                 	db	high _rf24_datarate_e_str_2
   416  00FDE9                     __end_of_rf24_datarate_e_str_P:
   417                           	opt stack 0
   418  00FDE9  07D0               	dw	2000
   419  00FDEB  0000               	dw	0
   420  00FDED                     __end_of_interval:
   421                           	opt stack 0
   422  00FDED  08                 	db	low _rf24_model_e_str_0
   423  00FDEE  FE                 	db	high _rf24_model_e_str_0
   424  00FDEF  F5                 	db	low _rf24_model_e_str_1
   425  00FDF0  FD                 	db	high _rf24_model_e_str_1
   426  00FDF1                     __end_of_rf24_model_e_str_P:
   427                           	opt stack 0
   428  00FDF1  0000               	dw	0
   429  00FDF3                     __end_of_other_node:
   430                           	opt stack 0
   431  00FDF3  0001               	dw	1
   432  00FDF5                     __end_of_this_node:
   433                           	opt stack 0
   434  00FDF5                     _rf24_model_e_str_1:
   435  00FDF5  6E                 	db	110
   436  00FDF6  52                 	db	82
   437  00FDF7  46                 	db	70
   438  00FDF8  32                 	db	50
   439  00FDF9  34                 	db	52
   440  00FDFA  4C                 	db	76
   441  00FDFB  30                 	db	48
   442  00FDFC  31                 	db	49
   443  00FDFD  2B                 	db	43
   444  00FDFE  00                 	db	0
   445  00FDFF                     __end_of_rf24_model_e_str_1:
   446                           	opt stack 0
   447  00FDFF                     _rf24_crclength_e_str_0:
   448  00FDFF  44                 	db	68
   449  00FE00  69                 	db	105
   450  00FE01  73                 	db	115
   451  00FE02  61                 	db	97
   452  00FE03  62                 	db	98
   453  00FE04  6C                 	db	108
   454  00FE05  65                 	db	101
   455  00FE06  64                 	db	100
   456  00FE07  00                 	db	0
   457  00FE08                     __end_of_rf24_crclength_e_str_0:
   458                           	opt stack 0
   459  00FE08                     _rf24_model_e_str_0:
   460  00FE08  6E                 	db	110
   461  00FE09  52                 	db	82
   462  00FE0A  46                 	db	70
   463  00FE0B  32                 	db	50
   464  00FE0C  34                 	db	52
   465  00FE0D  4C                 	db	76
   466  00FE0E  30                 	db	48
   467  00FE0F  31                 	db	49
   468  00FE10  00                 	db	0
   469  00FE11                     __end_of_rf24_model_e_str_0:
   470                           	opt stack 0
   471  00FE11                     _rf24_crclength_e_str_2:
   472  00FE11  31                 	db	49
   473  00FE12  36                 	db	54
   474  00FE13  20                 	db	32
   475  00FE14  62                 	db	98
   476  00FE15  69                 	db	105
   477  00FE16  74                 	db	116
   478  00FE17  73                 	db	115
   479  00FE18  00                 	db	0
   480  00FE19                     __end_of_rf24_crclength_e_str_2:
   481                           	opt stack 0
   482  00FE19                     _rf24_datarate_e_str_2:
   483  00FE19  32                 	db	50
   484  00FE1A  35                 	db	53
   485  00FE1B  30                 	db	48
   486  00FE1C  4B                 	db	75
   487  00FE1D  42                 	db	66
   488  00FE1E  50                 	db	80
   489  00FE1F  53                 	db	83
   490  00FE20  00                 	db	0
   491  00FE21                     __end_of_rf24_datarate_e_str_2:
   492                           	opt stack 0
   493  00FE21                     _rf24_pa_dbm_e_str_2:
   494  00FE21  50                 	db	80
   495  00FE22  41                 	db	65
   496  00FE23  5F                 	db	95
   497  00FE24  48                 	db	72
   498  00FE25  49                 	db	73
   499  00FE26  47                 	db	71
   500  00FE27  48                 	db	72
   501  00FE28  00                 	db	0
   502  00FE29                     __end_of_rf24_pa_dbm_e_str_2:
   503                           	opt stack 0
   504  00FE29                     _rf24_crclength_e_str_1:
   505  00FE29  38                 	db	56
   506  00FE2A  20                 	db	32
   507  00FE2B  62                 	db	98
   508  00FE2C  69                 	db	105
   509  00FE2D  74                 	db	116
   510  00FE2E  73                 	db	115
   511  00FE2F  00                 	db	0
   512  00FE30                     __end_of_rf24_crclength_e_str_1:
   513                           	opt stack 0
   514  00FE30                     _rf24_pa_dbm_e_str_0:
   515  00FE30  50                 	db	80
   516  00FE31  41                 	db	65
   517  00FE32  5F                 	db	95
   518  00FE33  4D                 	db	77
   519  00FE34  49                 	db	73
   520  00FE35  4E                 	db	78
   521  00FE36  00                 	db	0
   522  00FE37                     __end_of_rf24_pa_dbm_e_str_0:
   523                           	opt stack 0
   524  00FE37                     _rf24_pa_dbm_e_str_1:
   525  00FE37  50                 	db	80
   526  00FE38  41                 	db	65
   527  00FE39  5F                 	db	95
   528  00FE3A  4C                 	db	76
   529  00FE3B  4F                 	db	79
   530  00FE3C  57                 	db	87
   531  00FE3D  00                 	db	0
   532  00FE3E                     __end_of_rf24_pa_dbm_e_str_1:
   533                           	opt stack 0
   534  00FE3E                     _rf24_pa_dbm_e_str_3:
   535  00FE3E  50                 	db	80
   536  00FE3F  41                 	db	65
   537  00FE40  5F                 	db	95
   538  00FE41  4D                 	db	77
   539  00FE42  41                 	db	65
   540  00FE43  58                 	db	88
   541  00FE44  00                 	db	0
   542  00FE45                     __end_of_rf24_pa_dbm_e_str_3:
   543                           	opt stack 0
   544  00FE45                     _rf24_datarate_e_str_0:
   545  00FE45  31                 	db	49
   546  00FE46  4D                 	db	77
   547  00FE47  42                 	db	66
   548  00FE48  50                 	db	80
   549  00FE49  53                 	db	83
   550  00FE4A  00                 	db	0
   551  00FE4B                     __end_of_rf24_datarate_e_str_0:
   552                           	opt stack 0
   553  00FE4B                     _rf24_datarate_e_str_1:
   554  00FE4B  32                 	db	50
   555  00FE4C  4D                 	db	77
   556  00FE4D  42                 	db	66
   557  00FE4E  50                 	db	80
   558  00FE4F  53                 	db	83
   559  00FE50  00                 	db	0
   560  00FE51                     __end_of_rf24_datarate_e_str_1:
   561                           	opt stack 0
   562  0000                     _BAUDCONbits	set	4024
   563  0000                     _INTCONbits	set	4082
   564  0000                     _LATAbits	set	3977
   565  0000                     _LATBbits	set	3978
   566  0000                     _LATCbits	set	3979
   567  0000                     _LATDbits	set	3980
   568  0000                     _LATEbits	set	3981
   569  0000                     _RCSTAbits	set	4011
   570  0000                     _SPBRG	set	4015
   571  0000                     _SPBRGH	set	4016
   572  0000                     _SSPBUF	set	4041
   573  0000                     _SSPCON1bits	set	4038
   574  0000                     _SSPSTATbits	set	4039
   575  0000                     _T0CONbits	set	4053
   576  0000                     _TMR0H	set	4055
   577  0000                     _TMR0L	set	4054
   578  0000                     _TRISAbits	set	3986
   579  0000                     _TRISBbits	set	3987
   580  0000                     _TRISCbits	set	3988
   581  0000                     _TRISDbits	set	3989
   582  0000                     _TRISEbits	set	3990
   583  0000                     _TXREG	set	4013
   584  0000                     _TXSTAbits	set	4012
   585  00FE51  53                 	db	83	;'S'
   586  00FE52  54                 	db	84	;'T'
   587  00FE53  41                 	db	65	;'A'
   588  00FE54  54                 	db	84	;'T'
   589  00FE55  55                 	db	85	;'U'
   590  00FE56  53                 	db	83	;'S'
   591  00FE57  09                 	db	9
   592  00FE58  09                 	db	9
   593  00FE59  20                 	db	32
   594  00FE5A  3D                 	db	61	;'='
   595  00FE5B  20                 	db	32
   596  00FE5C  30                 	db	48	;'0'
   597  00FE5D  78                 	db	120	;'x'
   598  00FE5E  25                 	db	37
   599  00FE5F  30                 	db	48	;'0'
   600  00FE60  32                 	db	50	;'2'
   601  00FE61  78                 	db	120	;'x'
   602  00FE62  20                 	db	32
   603  00FE63  52                 	db	82	;'R'
   604  00FE64  58                 	db	88	;'X'
   605  00FE65  5F                 	db	95	;'_'
   606  00FE66  44                 	db	68	;'D'
   607  00FE67  52                 	db	82	;'R'
   608  00FE68  3D                 	db	61	;'='
   609  00FE69  25                 	db	37
   610  00FE6A  78                 	db	120	;'x'
   611  00FE6B  20                 	db	32
   612  00FE6C  54                 	db	84	;'T'
   613  00FE6D  58                 	db	88	;'X'
   614  00FE6E  5F                 	db	95	;'_'
   615  00FE6F  44                 	db	68	;'D'
   616  00FE70  53                 	db	83	;'S'
   617  00FE71  3D                 	db	61	;'='
   618  00FE72  25                 	db	37
   619  00FE73  78                 	db	120	;'x'
   620  00FE74  20                 	db	32
   621  00FE75  4D                 	db	77	;'M'
   622  00FE76  41                 	db	65	;'A'
   623  00FE77  58                 	db	88	;'X'
   624  00FE78  5F                 	db	95	;'_'
   625  00FE79  52                 	db	82	;'R'
   626  00FE7A  54                 	db	84	;'T'
   627  00FE7B  3D                 	db	61	;'='
   628  00FE7C  25                 	db	37
   629  00FE7D  78                 	db	120	;'x'
   630  00FE7E  20                 	db	32
   631  00FE7F  52                 	db	82	;'R'
   632  00FE80  58                 	db	88	;'X'
   633  00FE81  5F                 	db	95	;'_'
   634  00FE82  50                 	db	80	;'P'
   635  00FE83  5F                 	db	95	;'_'
   636  00FE84  4E                 	db	78	;'N'
   637  00FE85  4F                 	db	79	;'O'
   638  00FE86  3D                 	db	61	;'='
   639  00FE87  25                 	db	37
   640  00FE88  78                 	db	120	;'x'
   641  00FE89  20                 	db	32
   642  00FE8A  54                 	db	84	;'T'
   643  00FE8B  58                 	db	88	;'X'
   644  00FE8C  5F                 	db	95	;'_'
   645  00FE8D  46                 	db	70	;'F'
   646  00FE8E  55                 	db	85	;'U'
   647  00FE8F  4C                 	db	76	;'L'
   648  00FE90  4C                 	db	76	;'L'
   649  00FE91  3D                 	db	61	;'='
   650  00FE92  25                 	db	37
   651  00FE93  78                 	db	120	;'x'
   652  00FE94  0D                 	db	13
   653  00FE95  0A                 	db	10
   654  00FE96  00                 	db	0
   655  00FE97  4F                 	db	79	;'O'
   656  00FE98  42                 	db	66	;'B'
   657  00FE99  53                 	db	83	;'S'
   658  00FE9A  45                 	db	69	;'E'
   659  00FE9B  52                 	db	82	;'R'
   660  00FE9C  56                 	db	86	;'V'
   661  00FE9D  45                 	db	69	;'E'
   662  00FE9E  5F                 	db	95	;'_'
   663  00FE9F  54                 	db	84	;'T'
   664  00FEA0  58                 	db	88	;'X'
   665  00FEA1  3D                 	db	61	;'='
   666  00FEA2  25                 	db	37
   667  00FEA3  30                 	db	48	;'0'
   668  00FEA4  32                 	db	50	;'2'
   669  00FEA5  78                 	db	120	;'x'
   670  00FEA6  3A                 	db	58	;':'
   671  00FEA7  20                 	db	32
   672  00FEA8  50                 	db	80	;'P'
   673  00FEA9  4F                 	db	79	;'O'
   674  00FEAA  4C                 	db	76	;'L'
   675  00FEAB  53                 	db	83	;'S'
   676  00FEAC  5F                 	db	95	;'_'
   677  00FEAD  43                 	db	67	;'C'
   678  00FEAE  4E                 	db	78	;'N'
   679  00FEAF  54                 	db	84	;'T'
   680  00FEB0  3D                 	db	61	;'='
   681  00FEB1  25                 	db	37
   682  00FEB2  78                 	db	120	;'x'
   683  00FEB3  20                 	db	32
   684  00FEB4  41                 	db	65	;'A'
   685  00FEB5  52                 	db	82	;'R'
   686  00FEB6  43                 	db	67	;'C'
   687  00FEB7  5F                 	db	95	;'_'
   688  00FEB8  43                 	db	67	;'C'
   689  00FEB9  4E                 	db	78	;'N'
   690  00FEBA  54                 	db	84	;'T'
   691  00FEBB  3D                 	db	61	;'='
   692  00FEBC  25                 	db	37
   693  00FEBD  78                 	db	120	;'x'
   694  00FEBE  0D                 	db	13
   695  00FEBF  0A                 	db	10
   696  00FEC0  00                 	db	0
   697  00FEC1                     STR_1:
   698  00FEC1  52                 	db	82	;'R'
   699  00FEC2  46                 	db	70	;'F'
   700  00FEC3  32                 	db	50	;'2'
   701  00FEC4  34                 	db	52	;'4'
   702  00FEC5  4E                 	db	78	;'N'
   703  00FEC6  65                 	db	101	;'e'
   704  00FEC7  74                 	db	116	;'t'
   705  00FEC8  77                 	db	119	;'w'
   706  00FEC9  6F                 	db	111	;'o'
   707  00FECA  72                 	db	114	;'r'
   708  00FECB  6B                 	db	107	;'k'
   709  00FECC  2F                 	db	47
   710  00FECD  65                 	db	101	;'e'
   711  00FECE  78                 	db	120	;'x'
   712  00FECF  61                 	db	97	;'a'
   713  00FED0  6D                 	db	109	;'m'
   714  00FED1  70                 	db	112	;'p'
   715  00FED2  6C                 	db	108	;'l'
   716  00FED3  65                 	db	101	;'e'
   717  00FED4  73                 	db	115	;'s'
   718  00FED5  2F                 	db	47
   719  00FED6  68                 	db	104	;'h'
   720  00FED7  65                 	db	101	;'e'
   721  00FED8  6C                 	db	108	;'l'
   722  00FED9  6C                 	db	108	;'l'
   723  00FEDA  6F                 	db	111	;'o'
   724  00FEDB  77                 	db	119	;'w'
   725  00FEDC  6F                 	db	111	;'o'
   726  00FEDD  72                 	db	114	;'r'
   727  00FEDE  6C                 	db	108	;'l'
   728  00FEDF  64                 	db	100	;'d'
   729  00FEE0  5F                 	db	95	;'_'
   730  00FEE1  74                 	db	116	;'t'
   731  00FEE2  78                 	db	120	;'x'
   732  00FEE3  2F                 	db	47
   733  00FEE4  00                 	db	0
   734  00FEE5  69                 	db	105	;'i'
   735  00FEE6  64                 	db	100	;'d'
   736  00FEE7  20                 	db	32
   737  00FEE8  25                 	db	37
   738  00FEE9  75                 	db	117	;'u'
   739  00FEEA  20                 	db	32
   740  00FEEB  66                 	db	102	;'f'
   741  00FEEC  72                 	db	114	;'r'
   742  00FEED  6F                 	db	111	;'o'
   743  00FEEE  6D                 	db	109	;'m'
   744  00FEEF  20                 	db	32
   745  00FEF0  30                 	db	48	;'0'
   746  00FEF1  25                 	db	37
   747  00FEF2  6F                 	db	111	;'o'
   748  00FEF3  20                 	db	32
   749  00FEF4  74                 	db	116	;'t'
   750  00FEF5  6F                 	db	111	;'o'
   751  00FEF6  20                 	db	32
   752  00FEF7  30                 	db	48	;'0'
   753  00FEF8  25                 	db	37
   754  00FEF9  6F                 	db	111	;'o'
   755  00FEFA  20                 	db	32
   756  00FEFB  74                 	db	116	;'t'
   757  00FEFC  79                 	db	121	;'y'
   758  00FEFD  70                 	db	112	;'p'
   759  00FEFE  65                 	db	101	;'e'
   760  00FEFF  20                 	db	32
   761  00FF00  25                 	db	37
   762  00FF01  64                 	db	100	;'d'
   763  00FF02  00                 	db	0
   764  00FF03  43                 	db	67	;'C'
   765  00FF04  52                 	db	82	;'R'
   766  00FF05  43                 	db	67	;'C'
   767  00FF06  20                 	db	32
   768  00FF07  4C                 	db	76	;'L'
   769  00FF08  65                 	db	101	;'e'
   770  00FF09  6E                 	db	110	;'n'
   771  00FF0A  67                 	db	103	;'g'
   772  00FF0B  74                 	db	116	;'t'
   773  00FF0C  68                 	db	104	;'h'
   774  00FF0D  09                 	db	9
   775  00FF0E  20                 	db	32
   776  00FF0F  3D                 	db	61	;'='
   777  00FF10  20                 	db	32
   778  00FF11  25                 	db	37
   779  00FF12  73                 	db	115	;'s'
   780  00FF13  0D                 	db	13
   781  00FF14  0A                 	db	10
   782  00FF15  00                 	db	0
   783  00FF16  44                 	db	68	;'D'
   784  00FF17  61                 	db	97	;'a'
   785  00FF18  74                 	db	116	;'t'
   786  00FF19  61                 	db	97	;'a'
   787  00FF1A  20                 	db	32
   788  00FF1B  52                 	db	82	;'R'
   789  00FF1C  61                 	db	97	;'a'
   790  00FF1D  74                 	db	116	;'t'
   791  00FF1E  65                 	db	101	;'e'
   792  00FF1F  09                 	db	9
   793  00FF20  20                 	db	32
   794  00FF21  3D                 	db	61	;'='
   795  00FF22  20                 	db	32
   796  00FF23  25                 	db	37
   797  00FF24  73                 	db	115	;'s'
   798  00FF25  0D                 	db	13
   799  00FF26  0A                 	db	10
   800  00FF27  00                 	db	0
   801  00FF28  30                 	db	48	;'0'
   802  00FF29  31                 	db	49	;'1'
   803  00FF2A  32                 	db	50	;'2'
   804  00FF2B  33                 	db	51	;'3'
   805  00FF2C  34                 	db	52	;'4'
   806  00FF2D  35                 	db	53	;'5'
   807  00FF2E  36                 	db	54	;'6'
   808  00FF2F  37                 	db	55	;'7'
   809  00FF30  38                 	db	56	;'8'
   810  00FF31  39                 	db	57	;'9'
   811  00FF32  41                 	db	65	;'A'
   812  00FF33  42                 	db	66	;'B'
   813  00FF34  43                 	db	67	;'C'
   814  00FF35  44                 	db	68	;'D'
   815  00FF36  45                 	db	69	;'E'
   816  00FF37  46                 	db	70	;'F'
   817  00FF38  00                 	db	0
   818  00FF39  30                 	db	48	;'0'
   819  00FF3A  31                 	db	49	;'1'
   820  00FF3B  32                 	db	50	;'2'
   821  00FF3C  33                 	db	51	;'3'
   822  00FF3D  34                 	db	52	;'4'
   823  00FF3E  35                 	db	53	;'5'
   824  00FF3F  36                 	db	54	;'6'
   825  00FF40  37                 	db	55	;'7'
   826  00FF41  38                 	db	56	;'8'
   827  00FF42  39                 	db	57	;'9'
   828  00FF43  61                 	db	97	;'a'
   829  00FF44  62                 	db	98	;'b'
   830  00FF45  63                 	db	99	;'c'
   831  00FF46  64                 	db	100	;'d'
   832  00FF47  65                 	db	101	;'e'
   833  00FF48  66                 	db	102	;'f'
   834  00FF49  00                 	db	0
   835  00FF4A  50                 	db	80	;'P'
   836  00FF4B  41                 	db	65	;'A'
   837  00FF4C  20                 	db	32
   838  00FF4D  50                 	db	80	;'P'
   839  00FF4E  6F                 	db	111	;'o'
   840  00FF4F  77                 	db	119	;'w'
   841  00FF50  65                 	db	101	;'e'
   842  00FF51  72                 	db	114	;'r'
   843  00FF52  09                 	db	9
   844  00FF53  20                 	db	32
   845  00FF54  3D                 	db	61	;'='
   846  00FF55  20                 	db	32
   847  00FF56  25                 	db	37
   848  00FF57  73                 	db	115	;'s'
   849  00FF58  0D                 	db	13
   850  00FF59  0A                 	db	10
   851  00FF5A  00                 	db	0
   852  00FF5B                     STR_27:
   853  00FF5B  4D                 	db	77	;'M'
   854  00FF5C  6F                 	db	111	;'o'
   855  00FF5D  64                 	db	100	;'d'
   856  00FF5E  65                 	db	101	;'e'
   857  00FF5F  6C                 	db	108	;'l'
   858  00FF60  09                 	db	9
   859  00FF61  09                 	db	9
   860  00FF62  20                 	db	32
   861  00FF63  3D                 	db	61	;'='
   862  00FF64  20                 	db	32
   863  00FF65  25                 	db	37
   864  00FF66  73                 	db	115	;'s'
   865  00FF67  0D                 	db	13
   866  00FF68  0A                 	db	10
   867  00FF69  00                 	db	0
   868  00FF6A  44                 	db	68	;'D'
   869  00FF6B  59                 	db	89	;'Y'
   870  00FF6C  4E                 	db	78	;'N'
   871  00FF6D  50                 	db	80	;'P'
   872  00FF6E  44                 	db	68	;'D'
   873  00FF6F  2F                 	db	47
   874  00FF70  46                 	db	70	;'F'
   875  00FF71  45                 	db	69	;'E'
   876  00FF72  41                 	db	65	;'A'
   877  00FF73  54                 	db	84	;'T'
   878  00FF74  55                 	db	85	;'U'
   879  00FF75  52                 	db	82	;'R'
   880  00FF76  45                 	db	69	;'E'
   881  00FF77  00                 	db	0
   882  00FF78  52                 	db	82	;'R'
   883  00FF79  58                 	db	88	;'X'
   884  00FF7A  5F                 	db	95	;'_'
   885  00FF7B  41                 	db	65	;'A'
   886  00FF7C  44                 	db	68	;'D'
   887  00FF7D  44                 	db	68	;'D'
   888  00FF7E  52                 	db	82	;'R'
   889  00FF7F  5F                 	db	95	;'_'
   890  00FF80  50                 	db	80	;'P'
   891  00FF81  30                 	db	48	;'0'
   892  00FF82  2D                 	db	45
   893  00FF83  31                 	db	49	;'1'
   894  00FF84  00                 	db	0
   895  00FF85  52                 	db	82	;'R'
   896  00FF86  58                 	db	88	;'X'
   897  00FF87  5F                 	db	95	;'_'
   898  00FF88  41                 	db	65	;'A'
   899  00FF89  44                 	db	68	;'D'
   900  00FF8A  44                 	db	68	;'D'
   901  00FF8B  52                 	db	82	;'R'
   902  00FF8C  5F                 	db	95	;'_'
   903  00FF8D  50                 	db	80	;'P'
   904  00FF8E  32                 	db	50	;'2'
   905  00FF8F  2D                 	db	45
   906  00FF90  35                 	db	53	;'5'
   907  00FF91  00                 	db	0
   908  00FF92  52                 	db	82	;'R'
   909  00FF93  58                 	db	88	;'X'
   910  00FF94  5F                 	db	95	;'_'
   911  00FF95  50                 	db	80	;'P'
   912  00FF96  57                 	db	87	;'W'
   913  00FF97  5F                 	db	95	;'_'
   914  00FF98  50                 	db	80	;'P'
   915  00FF99  30                 	db	48	;'0'
   916  00FF9A  2D                 	db	45
   917  00FF9B  36                 	db	54	;'6'
   918  00FF9C  00                 	db	0
   919  00FF9D                     STR_2:
   920  00FF9D  53                 	db	83	;'S'
   921  00FF9E  65                 	db	101	;'e'
   922  00FF9F  6E                 	db	110	;'n'
   923  00FFA0  64                 	db	100	;'d'
   924  00FFA1  69                 	db	105	;'i'
   925  00FFA2  6E                 	db	110	;'n'
   926  00FFA3  67                 	db	103	;'g'
   927  00FFA4  2E                 	db	46
   928  00FFA5  2E                 	db	46
   929  00FFA6  2E                 	db	46
   930  00FFA7  00                 	db	0
   931  00FFA8  45                 	db	69	;'E'
   932  00FFA9  4E                 	db	78	;'N'
   933  00FFAA  5F                 	db	95	;'_'
   934  00FFAB  52                 	db	82	;'R'
   935  00FFAC  58                 	db	88	;'X'
   936  00FFAD  41                 	db	65	;'A'
   937  00FFAE  44                 	db	68	;'D'
   938  00FFAF  44                 	db	68	;'D'
   939  00FFB0  52                 	db	82	;'R'
   940  00FFB1  00                 	db	0
   941  00FFB2  54                 	db	84	;'T'
   942  00FFB3  58                 	db	88	;'X'
   943  00FFB4  5F                 	db	95	;'_'
   944  00FFB5  41                 	db	65	;'A'
   945  00FFB6  44                 	db	68	;'D'
   946  00FFB7  44                 	db	68	;'D'
   947  00FFB8  52                 	db	82	;'R'
   948  00FFB9  09                 	db	9
   949  00FFBA  00                 	db	0
   950  00FFBB  52                 	db	82	;'R'
   951  00FFBC  46                 	db	70	;'F'
   952  00FFBD  5F                 	db	95	;'_'
   953  00FFBE  53                 	db	83	;'S'
   954  00FFBF  45                 	db	69	;'E'
   955  00FFC0  54                 	db	84	;'T'
   956  00FFC1  55                 	db	85	;'U'
   957  00FFC2  50                 	db	80	;'P'
   958  00FFC3  00                 	db	0
   959  00FFC4  43                 	db	67	;'C'
   960  00FFC5  4F                 	db	79	;'O'
   961  00FFC6  4E                 	db	78	;'N'
   962  00FFC7  46                 	db	70	;'F'
   963  00FFC8  49                 	db	73	;'I'
   964  00FFC9  47                 	db	71	;'G'
   965  00FFCA  09                 	db	9
   966  00FFCB  00                 	db	0
   967  00FFCC                     STR_10:
   968  00FFCC  20                 	db	32
   969  00FFCD  30                 	db	48	;'0'
   970  00FFCE  78                 	db	120	;'x'
   971  00FFCF  25                 	db	37
   972  00FFD0  30                 	db	48	;'0'
   973  00FFD1  32                 	db	50	;'2'
   974  00FFD2  78                 	db	120	;'x'
   975  00FFD3  00                 	db	0
   976  00FFD4                     STR_4:
   977  00FFD4  66                 	db	102	;'f'
   978  00FFD5  61                 	db	97	;'a'
   979  00FFD6  69                 	db	105	;'i'
   980  00FFD7  6C                 	db	108	;'l'
   981  00FFD8  65                 	db	101	;'e'
   982  00FFD9  64                 	db	100	;'d'
   983  00FFDA  2E                 	db	46
   984  00FFDB  00                 	db	0
   985  00FFDC  28                 	db	40
   986  00FFDD  6E                 	db	110	;'n'
   987  00FFDE  75                 	db	117	;'u'
   988  00FFDF  6C                 	db	108	;'l'
   989  00FFE0  6C                 	db	108	;'l'
   990  00FFE1  29                 	db	41
   991  00FFE2  00                 	db	0
   992  00FFE3  45                 	db	69	;'E'
   993  00FFE4  4E                 	db	78	;'N'
   994  00FFE5  5F                 	db	95	;'_'
   995  00FFE6  41                 	db	65	;'A'
   996  00FFE7  41                 	db	65	;'A'
   997  00FFE8  09                 	db	9
   998  00FFE9  00                 	db	0
   999  00FFEA  52                 	db	82	;'R'
  1000  00FFEB  46                 	db	70	;'F'
  1001  00FFEC  5F                 	db	95	;'_'
  1002  00FFED  43                 	db	67	;'C'
  1003  00FFEE  48                 	db	72	;'H'
  1004  00FFEF  09                 	db	9
  1005  00FFF0  00                 	db	0
  1006  00FFF1                     STR_9:
  1007  00FFF1  25                 	db	37
  1008  00FFF2  73                 	db	115	;'s'
  1009  00FFF3  09                 	db	9
  1010  00FFF4  20                 	db	32
  1011  00FFF5  3D                 	db	61	;'='
  1012  00FFF6  00                 	db	0
  1013  00FFF7  20                 	db	32
  1014  00FFF8  30                 	db	48	;'0'
  1015  00FFF9  78                 	db	120	;'x'
  1016  00FFFA  00                 	db	0
  1017  00FFFB                     STR_3:
  1018  00FFFB  6F                 	db	111	;'o'
  1019  00FFFC  6B                 	db	107	;'k'
  1020  00FFFD  2E                 	db	46
  1021  00FFFE  00                 	db	0
  1022  0000                     
  1023                           ; #config settings
  1024  00FFFF  00                 	db	0	; dummy byte at the end
  1025  0000                     
  1026                           	psect	cinit
  1027  004DD0                     __pcinit:
  1028                           	opt stack 0
  1029  004DD0                     start_initialization:
  1030                           	opt stack 0
  1031  004DD0                     __initialization:
  1032                           	opt stack 0
  1033                           
  1034                           ; Initialize objects allocated to COMRAM (9 bytes)
  1035                           ; load TBLPTR registers with __pidataCOMRAM
  1036  004DD0  0EB4               	movlw	low __pidataCOMRAM
  1037  004DD2  6EF6               	movwf	tblptrl,c
  1038  004DD4  0E50               	movlw	high __pidataCOMRAM
  1039  004DD6  6EF7               	movwf	tblptrh,c
  1040  004DD8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1041  004DDA  6EF8               	movwf	tblptru,c
  1042  004DDC  EE00  F05C         	lfsr	0,__pdataCOMRAM
  1043  004DE0  EE20 F009          	lfsr	2,9
  1044  004DE4                     copy_data0:
  1045  004DE4  0009               	tblrd		*+
  1046  004DE6  CFF5 FFEE          	movff	tablat,postinc0
  1047  004DEA  50DD               	movf	postdec2,w,c
  1048  004DEC  50D9               	movf	fsr2l,w,c
  1049  004DEE  E1FA               	bnz	copy_data0
  1050                           
  1051                           ; Clear objects allocated to BIGRAM (372 bytes)
  1052  004DF0  EE0E  F00C         	lfsr	0,__pbssBIGRAM
  1053  004DF4  EE21 F074          	lfsr	2,372
  1054  004DF8                     clear_0:
  1055  004DF8  6AEE               	clrf	postinc0,c
  1056  004DFA  50DD               	movf	postdec2,w,c
  1057  004DFC  50D9               	movf	fsr2l,w,c
  1058  004DFE  E1FC               	bnz	clear_0
  1059  004E00  50DA               	movf	fsr2h,w,c
  1060  004E02  E1FA               	bnz	clear_0
  1061                           
  1062                           ; Clear objects allocated to COMRAM (79 bytes)
  1063  004E04  EE00  F001         	lfsr	0,__pbssCOMRAM
  1064  004E08  0E4F               	movlw	79
  1065  004E0A                     clear_1:
  1066  004E0A  6AEE               	clrf	postinc0,c
  1067  004E0C  06E8               	decf	wreg,f,c
  1068  004E0E  E1FD               	bnz	clear_1
  1069  004E10                     end_of_initialization:
  1070                           	opt stack 0
  1071  004E10                     __end_of__initialization:
  1072                           	opt stack 0
  1073  004E10  0100               	movlb	0
  1074  004E12  EFD4  F027         	goto	_main	;jump to C main() function
  1075                           tblptru	equ	0xFF8
  1076                           tblptrh	equ	0xFF7
  1077                           tblptrl	equ	0xFF6
  1078                           tablat	equ	0xFF5
  1079                           postinc0	equ	0xFEE
  1080                           wreg	equ	0xFE8
  1081                           postdec2	equ	0xFDD
  1082                           fsr2h	equ	0xFDA
  1083                           fsr2l	equ	0xFD9
  1084                           
  1085                           	psect	bssCOMRAM
  1086  000001                     __pbssCOMRAM:
  1087                           	opt stack 0
  1088  000001                     _last_sent:
  1089                           	opt stack 0
  1090  000001                     	ds	4
  1091  000005                     _mtime:
  1092                           	opt stack 0
  1093  000005                     	ds	4
  1094  000009                     _packets_sent:
  1095                           	opt stack 0
  1096  000009                     	ds	4
  1097  00000D                     	ds	45
  1098  00003A                     _radio:
  1099                           	opt stack 0
  1100  00003A                     	ds	22
  1101                           tblptru	equ	0xFF8
  1102                           tblptrh	equ	0xFF7
  1103                           tblptrl	equ	0xFF6
  1104                           tablat	equ	0xFF5
  1105                           postinc0	equ	0xFEE
  1106                           wreg	equ	0xFE8
  1107                           postdec2	equ	0xFDD
  1108                           fsr2h	equ	0xFDA
  1109                           fsr2l	equ	0xFD9
  1110                           
  1111                           	psect	dataCOMRAM
  1112  00005C                     __pdataCOMRAM:
  1113                           	opt stack 0
  1114  00005C                     RF24N_pipe_address@address_translation:
  1115                           	opt stack 0
  1116  00005C                     	ds	7
  1117  000063                     _next_id:
  1118                           	opt stack 0
  1119  000063                     	ds	2
  1120                           tblptru	equ	0xFF8
  1121                           tblptrh	equ	0xFF7
  1122                           tblptrl	equ	0xFF6
  1123                           tablat	equ	0xFF5
  1124                           postinc0	equ	0xFEE
  1125                           wreg	equ	0xFE8
  1126                           postdec2	equ	0xFDD
  1127                           fsr2h	equ	0xFDA
  1128                           fsr2l	equ	0xFD9
  1129                           
  1130                           	psect	bssBIGRAM
  1131  000E0C                     __pbssBIGRAM:
  1132                           	opt stack 0
  1133  000E0C                     _network:
  1134                           	opt stack 0
  1135  000E0C                     	ds	372
  1136                           tblptru	equ	0xFF8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           tablat	equ	0xFF5
  1140                           postinc0	equ	0xFEE
  1141                           wreg	equ	0xFE8
  1142                           postdec2	equ	0xFDD
  1143                           fsr2h	equ	0xFDA
  1144                           fsr2l	equ	0xFD9
  1145                           
  1146                           	psect	cstackCOMRAM
  1147  000065                     __pcstackCOMRAM:
  1148                           	opt stack 0
  1149  000065                     ??_isr:
  1150                           
  1151                           ; 1 bytes @ 0x0
  1152  000065                     	ds	2
  1153                           tblptru	equ	0xFF8
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           tablat	equ	0xFF5
  1157                           postinc0	equ	0xFEE
  1158                           wreg	equ	0xFE8
  1159                           postdec2	equ	0xFDD
  1160                           fsr2h	equ	0xFDA
  1161                           fsr2l	equ	0xFD9
  1162                           
  1163 ;;
  1164 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1165 ;;
  1166 ;; *************** function _main *****************
  1167 ;; Defined at:
  1168 ;;		line 26 in file "pic_main.c"
  1169 ;; Parameters:    Size  Location     Type
  1170 ;;		None
  1171 ;; Auto vars:     Size  Location     Type
  1172 ;;		None
  1173 ;; Return value:  Size  Location     Type
  1174 ;;                  1  [STACK] void 
  1175 ;; Registers used:
  1176 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
  1177 ;; Tracked objects:
  1178 ;;		On entry : 0/0
  1179 ;;		On exit  : 0/0
  1180 ;;		Unchanged: 0/0
  1181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;Total ram usage:        0 bytes
  1187 ;; Hardware stack levels required when called:   14
  1188 ;; This function calls:
  1189 ;;		_loop
  1190 ;;		_setup
  1191 ;; This function is called by:
  1192 ;;		Startup code after reset
  1193 ;; This function uses a reentrant model
  1194 ;;
  1195                           
  1196                           	psect	text0
  1197  004FA8                     __ptext0:
  1198                           	opt stack 0
  1199  004FA8                     _main:
  1200                           	opt stack 17
  1201                           
  1202                           ;pic_main.c: 28: mtime=0;
  1203                           
  1204                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1205                           ;incstack = 0
  1206  004FA8  6A05               	clrf	_mtime,c
  1207  004FAA  6A06               	clrf	_mtime+1,c
  1208  004FAC  6A07               	clrf	_mtime+2,c
  1209  004FAE  6A08               	clrf	_mtime+3,c
  1210                           
  1211                           ;pic_main.c: 30: T0CONbits.T08BIT=0;
  1212  004FB0  9CD5               	bcf	4053,6,c	;volatile
  1213                           
  1214                           ;pic_main.c: 31: T0CONbits.T0CS=0;
  1215  004FB2  9AD5               	bcf	4053,5,c	;volatile
  1216                           
  1217                           ;pic_main.c: 32: T0CONbits.PSA=1;
  1218  004FB4  86D5               	bsf	4053,3,c	;volatile
  1219                           
  1220                           ;pic_main.c: 36: TMR0H=(unsigned char)(65536l-(32000000/4000l)&0xFF00)>>8;
  1221  004FB6  6AD7               	clrf	4055,c	;volatile
  1222                           
  1223                           ;pic_main.c: 37: TMR0L=(unsigned char)(65536l-(32000000/4000l)&0x00FF);
  1224  004FB8  0EC0               	movlw	192
  1225  004FBA  6ED6               	movwf	4054,c	;volatile
  1226                           
  1227                           ;pic_main.c: 38: INTCONbits.TMR0IF=0;
  1228  004FBC  94F2               	bcf	intcon,2,c	;volatile
  1229                           
  1230                           ;pic_main.c: 39: INTCONbits.GIE = 1;
  1231  004FBE  8EF2               	bsf	intcon,7,c	;volatile
  1232                           
  1233                           ;pic_main.c: 40: INTCONbits.TMR0IE = 1;
  1234  004FC0  8AF2               	bsf	intcon,5,c	;volatile
  1235                           
  1236                           ;pic_main.c: 41: T0CONbits.TMR0ON=1;
  1237  004FC2  8ED5               	bsf	4053,7,c	;volatile
  1238                           
  1239                           ;pic_main.c: 43: setup();
  1240  004FC4  EC30  F024         	call	_setup	;wreg free
  1241  004FC8                     l3510:
  1242                           
  1243                           ;pic_main.c: 47: {
  1244                           ;pic_main.c: 48: loop();
  1245  004FC8  EC2C  F01A         	call	_loop	;wreg free
  1246  004FCC  D7FD               	goto	l3510
  1247  004FCE                     __end_of_main:
  1248                           	opt stack 0
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           intcon	equ	0xFF2
  1254                           postinc0	equ	0xFEE
  1255                           wreg	equ	0xFE8
  1256                           postdec2	equ	0xFDD
  1257                           fsr2h	equ	0xFDA
  1258                           fsr2l	equ	0xFD9
  1259                           
  1260 ;; *************** function _setup *****************
  1261 ;; Defined at:
  1262 ;;		line 41 in file "helloworld_tx.c"
  1263 ;; Parameters:    Size  Location     Type
  1264 ;;		None
  1265 ;; Auto vars:     Size  Location     Type
  1266 ;;		None
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1  [STACK] void 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;Total ram usage:        0 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    8
  1283 ;; This function calls:
  1284 ;;		_RF24N_begin_d
  1285 ;;		_RF24N_init
  1286 ;;		_RF24_begin
  1287 ;;		_RF24_init
  1288 ;;		_Serial_begin
  1289 ;;		_Serial_println
  1290 ;; This function is called by:
  1291 ;;		_main
  1292 ;; This function uses a reentrant model
  1293 ;;
  1294                           
  1295                           	psect	text1
  1296  004860                     __ptext1:
  1297                           	opt stack 0
  1298  004860                     _setup:
  1299                           	opt stack 22
  1300                           
  1301                           ;helloworld_tx.c: 43: RF24_init(&radio,7,8);
  1302                           
  1303                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  1304                           ;incstack = 0
  1305  004860  0E08               	movlw	8
  1306  004862  6EE6               	movwf	postinc1,c
  1307  004864  0E07               	movlw	7
  1308  004866  6EE6               	movwf	postinc1,c
  1309  004868  0E3A               	movlw	low _radio
  1310  00486A  6EE6               	movwf	postinc1,c
  1311  00486C  0E00               	movlw	high _radio
  1312  00486E  6EE6               	movwf	postinc1,c
  1313  004870  ECC9  F01E         	call	_RF24_init	;wreg free
  1314                           
  1315                           ;helloworld_tx.c: 44: RF24N_init(&network,&radio);
  1316  004874  0E3A               	movlw	low _radio
  1317  004876  6EE6               	movwf	postinc1,c
  1318  004878  0E00               	movlw	high _radio
  1319  00487A  6EE6               	movwf	postinc1,c
  1320  00487C  0E0C               	movlw	low _network
  1321  00487E  6EE6               	movwf	postinc1,c
  1322  004880  0E0E               	movlw	high _network
  1323  004882  6EE6               	movwf	postinc1,c
  1324  004884  ECD9  F01A         	call	_RF24N_init	;wreg free
  1325                           
  1326                           ;helloworld_tx.c: 46: Serial_begin(57600);
  1327  004888  0E00               	movlw	0
  1328  00488A  6EE6               	movwf	postinc1,c
  1329  00488C  0EE1               	movlw	225
  1330  00488E  6EE6               	movwf	postinc1,c
  1331  004890  0E00               	movlw	0
  1332  004892  6EE6               	movwf	postinc1,c
  1333  004894  0E00               	movlw	0
  1334  004896  6EE6               	movwf	postinc1,c
  1335  004898  EC1A  F020         	call	_Serial_begin	;wreg free
  1336                           
  1337                           ;helloworld_tx.c: 47: Serial_println("RF24Network/examples/helloworld_tx/");
  1338  00489C  0EC1               	movlw	low STR_1
  1339  00489E  6EE6               	movwf	postinc1,c
  1340  0048A0  0EFE               	movlw	high STR_1
  1341  0048A2  6EE6               	movwf	postinc1,c
  1342  0048A4  ECE7  F027         	call	_Serial_println	;wreg free
  1343                           
  1344                           ;helloworld_tx.c: 49: RF24_begin(&radio);
  1345  0048A8  0E3A               	movlw	low _radio
  1346  0048AA  6EE6               	movwf	postinc1,c
  1347  0048AC  0E00               	movlw	high _radio
  1348  0048AE  6EE6               	movwf	postinc1,c
  1349  0048B0  EC21  F015         	call	_RF24_begin	;wreg free
  1350                           
  1351                           ;helloworld_tx.c: 50: RF24N_begin_d(&network, 90, this_node);
  1352  0048B4  0E01               	movlw	1
  1353  0048B6  6EE6               	movwf	postinc1,c
  1354  0048B8  0E00               	movlw	0
  1355  0048BA  6EE6               	movwf	postinc1,c
  1356  0048BC  0E5A               	movlw	90
  1357  0048BE  6EE6               	movwf	postinc1,c
  1358  0048C0  0E0C               	movlw	low _network
  1359  0048C2  6EE6               	movwf	postinc1,c
  1360  0048C4  0E0E               	movlw	high _network
  1361  0048C6  6EE6               	movwf	postinc1,c
  1362  0048C8  EC0F  F010         	call	_RF24N_begin_d	;wreg free
  1363                           
  1364                           ; _setup: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize
      +                           = 0, vargsize = 0
  1365  0048CC  0012               	return		;funcret
  1366  0048CE                     __end_of_setup:
  1367                           	opt stack 0
  1368                           tblptru	equ	0xFF8
  1369                           tblptrh	equ	0xFF7
  1370                           tblptrl	equ	0xFF6
  1371                           tablat	equ	0xFF5
  1372                           intcon	equ	0xFF2
  1373                           postinc0	equ	0xFEE
  1374                           wreg	equ	0xFE8
  1375                           postinc1	equ	0xFE6
  1376                           postdec2	equ	0xFDD
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           
  1380 ;; *************** function _Serial_begin *****************
  1381 ;; Defined at:
  1382 ;;		line 31 in file "serial.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  baud            4  [STACK] unsigned long 
  1385 ;; Auto vars:     Size  Location     Type
  1386 ;;		None
  1387 ;; Return value:  Size  Location     Type
  1388 ;;                  1  [STACK] void 
  1389 ;; Registers used:
  1390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, b
      +temp+7, btemp+8, btemp+9, btemp+10, btemp+11
  1391 ;; Tracked objects:
  1392 ;;		On entry : 0/0
  1393 ;;		On exit  : 0/0
  1394 ;;		Unchanged: 0/0
  1395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1399 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1400 ;;Total ram usage:        0 bytes
  1401 ;; Hardware stack levels used:    1
  1402 ;; Hardware stack levels required when called:    2
  1403 ;; This function calls:
  1404 ;;		___lldiv
  1405 ;; This function is called by:
  1406 ;;		_setup
  1407 ;; This function uses a reentrant model
  1408 ;;
  1409                           
  1410                           	psect	text2
  1411  004034                     __ptext2:
  1412                           	opt stack 0
  1413  004034                     _Serial_begin:
  1414                           	opt stack 27
  1415                           
  1416                           ;serial.c: 33: TRISCbits.TRISC6=1;
  1417                           
  1418                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  1419                           ;incstack = 0
  1420  004034  8C94               	bsf	3988,6,c	;volatile
  1421                           
  1422                           ;serial.c: 34: TRISCbits.TRISC7=1;
  1423  004036  8E94               	bsf	3988,7,c	;volatile
  1424                           
  1425                           ;serial.c: 36: baud=((32000000/(4*baud))-1);
  1426                           ;stkvar	_baud @ sp[(0)+-4]
  1427  004038  0EFC               	movlw	-4
  1428  00403A  CFE3 F058          	movff	plusw1,btemp+8
  1429  00403E  0EFD               	movlw	-3
  1430  004040  CFE3 F059          	movff	plusw1,btemp+9
  1431  004044  0EFE               	movlw	-2
  1432  004046  CFE3 F05A          	movff	plusw1,btemp+10
  1433  00404A  0EFF               	movlw	-1
  1434  00404C  CFE3 F05B          	movff	plusw1,btemp+11
  1435  004050  0E02               	movlw	2
  1436  004052                     u2545:
  1437  004052  90D8               	bcf	status,0,c
  1438  004054  3658               	rlcf	btemp+8,f,c
  1439  004056  3659               	rlcf	btemp+9,f,c
  1440  004058  365A               	rlcf	btemp+10,f,c
  1441  00405A  365B               	rlcf	btemp+11,f,c
  1442  00405C  2EE8               	decfsz	wreg,f,c
  1443  00405E  D7F9               	goto	u2545
  1444  004060  C058  FFE6         	movff	btemp+8,postinc1
  1445  004064  C059  FFE6         	movff	btemp+9,postinc1
  1446  004068  C05A  FFE6         	movff	btemp+10,postinc1
  1447  00406C  C05B  FFE6         	movff	btemp+11,postinc1
  1448  004070  0E00               	movlw	0
  1449  004072  6EE6               	movwf	postinc1,c
  1450  004074  0E48               	movlw	72
  1451  004076  6EE6               	movwf	postinc1,c
  1452  004078  0EE8               	movlw	232
  1453  00407A  6EE6               	movwf	postinc1,c
  1454  00407C  0E01               	movlw	1
  1455  00407E  6EE6               	movwf	postinc1,c
  1456  004080  ECCF  F01D         	call	___lldiv	;wreg free
  1457  004084  C050  F058         	movff	btemp,btemp+8
  1458  004088  C051  F059         	movff	btemp+1,btemp+9
  1459  00408C  C052  F05A         	movff	btemp+2,btemp+10
  1460  004090  C053  F05B         	movff	btemp+3,btemp+11
  1461  004094  0EFF               	movlw	255
  1462  004096  2458               	addwf	btemp+8,w,c
  1463  004098  6E54               	movwf	btemp+4,c
  1464  00409A  0EFF               	movlw	255
  1465  00409C  2059               	addwfc	btemp+9,w,c
  1466  00409E  6E55               	movwf	btemp+5,c
  1467  0040A0  0EFF               	movlw	255
  1468  0040A2  205A               	addwfc	btemp+10,w,c
  1469  0040A4  6E56               	movwf	btemp+6,c
  1470  0040A6  0EFF               	movlw	255
  1471  0040A8  205B               	addwfc	btemp+11,w,c
  1472  0040AA  6E57               	movwf	btemp+7,c
  1473                           
  1474                           ;stkvar	_baud @ sp[(0)+-4]
  1475  0040AC  0EFC               	movlw	-4
  1476  0040AE  C054  FFE3         	movff	btemp+4,plusw1
  1477  0040B2  0EFD               	movlw	-3
  1478  0040B4  C055  FFE3         	movff	btemp+5,plusw1
  1479  0040B8  0EFE               	movlw	-2
  1480  0040BA  C056  FFE3         	movff	btemp+6,plusw1
  1481  0040BE  0EFF               	movlw	-1
  1482  0040C0  C057  FFE3         	movff	btemp+7,plusw1
  1483                           
  1484                           ;serial.c: 42: SPBRG= (0x00FF & baud);
  1485                           ;stkvar	_baud @ sp[(0)+-4]
  1486  0040C4  0EFC               	movlw	-4
  1487  0040C6  CFE3 FFAF          	movff	plusw1,4015	;volatile
  1488                           
  1489                           ;serial.c: 43: SPBRGH=(0xFF00 & baud)>>8;
  1490                           ;stkvar	_baud @ sp[(0)+-4]
  1491  0040CA  0EFD               	movlw	253
  1492  0040CC  24E1               	addwf	fsr1l,w,c
  1493  0040CE  6ED9               	movwf	fsr2l,c
  1494  0040D0  0EFF               	movlw	255
  1495  0040D2  20E2               	addwfc	fsr1h,w,c
  1496  0040D4  6EDA               	movwf	fsr2h,c
  1497  0040D6  50DF               	movf	indf2,w,c
  1498  0040D8  6EB0               	movwf	4016,c	;volatile
  1499                           
  1500                           ;serial.c: 46: TXSTAbits.TX9=0;
  1501  0040DA  9CAC               	bcf	4012,6,c	;volatile
  1502                           
  1503                           ;serial.c: 47: TXSTAbits.SYNC=0;
  1504  0040DC  98AC               	bcf	4012,4,c	;volatile
  1505                           
  1506                           ;serial.c: 48: TXSTAbits.BRGH=1;
  1507  0040DE  84AC               	bsf	4012,2,c	;volatile
  1508                           
  1509                           ;serial.c: 49: BAUDCONbits.BRG16=1;
  1510  0040E0  86B8               	bsf	4024,3,c	;volatile
  1511                           
  1512                           ;serial.c: 50: RCSTAbits.RX9=0;
  1513  0040E2  9CAB               	bcf	4011,6,c	;volatile
  1514                           
  1515                           ;serial.c: 51: RCSTAbits.CREN=1;
  1516  0040E4  88AB               	bsf	4011,4,c	;volatile
  1517                           
  1518                           ;serial.c: 52: TXSTAbits.TXEN=1;
  1519  0040E6  8AAC               	bsf	4012,5,c	;volatile
  1520                           
  1521                           ;serial.c: 53: RCSTAbits.SPEN=1;
  1522  0040E8  8EAB               	bsf	4011,7,c	;volatile
  1523                           
  1524                           ; _Serial_begin: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, 
      +                          argsize = 4, vargsize = 0
  1525  0040EA  52E5               	movf	postdec1,f,c
  1526  0040EC  52E5               	movf	postdec1,f,c
  1527  0040EE  52E5               	movf	postdec1,f,c
  1528  0040F0  52E5               	movf	postdec1,f,c
  1529  0040F2  0012               	return		;funcret
  1530  0040F4                     __end_of_Serial_begin:
  1531                           	opt stack 0
  1532                           tblptru	equ	0xFF8
  1533                           tblptrh	equ	0xFF7
  1534                           tblptrl	equ	0xFF6
  1535                           tablat	equ	0xFF5
  1536                           intcon	equ	0xFF2
  1537                           postinc0	equ	0xFEE
  1538                           wreg	equ	0xFE8
  1539                           postinc1	equ	0xFE6
  1540                           postdec1	equ	0xFE5
  1541                           plusw1	equ	0xFE3
  1542                           fsr1h	equ	0xFE2
  1543                           fsr1l	equ	0xFE1
  1544                           indf2	equ	0xFDF
  1545                           postdec2	equ	0xFDD
  1546                           fsr2h	equ	0xFDA
  1547                           fsr2l	equ	0xFD9
  1548                           status	equ	0xFD8
  1549                           
  1550 ;; *************** function ___lldiv *****************
  1551 ;; Defined at:
  1552 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lldiv.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  dividend        4  [STACK] unsigned long 
  1555 ;;  divisor         4  [STACK] unsigned long 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  quotient        4  [STACK] unsigned long 
  1558 ;;  counter         1  [STACK] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  4  [STACK] unsigned long 
  1561 ;; Registers used:
  1562 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1572 ;;Total ram usage:        0 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    1
  1575 ;; This function calls:
  1576 ;;		Nothing
  1577 ;; This function is called by:
  1578 ;;		_Serial_begin
  1579 ;; This function uses a reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text3
  1583  003B9E                     __ptext3:
  1584                           	opt stack 0
  1585  003B9E                     ___lldiv:
  1586                           	opt stack 0
  1587                           
  1588                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
  1589  003B9E  0E05               	movlw	5
  1590  003BA0  26E1               	addwf	fsr1l,f,c
  1591  003BA2  0E00               	movlw	0
  1592  003BA4  22E2               	addwfc	fsr1h,f,c
  1593                           
  1594                           ;stkvar	_quotient @ sp[(-5)+0]
  1595                           
  1596                           ;incstack = 0
  1597  003BA6  0EFB               	movlw	-5
  1598  003BA8  6AE3               	clrf	plusw1,c
  1599  003BAA  0EFC               	movlw	-4
  1600  003BAC  6AE3               	clrf	plusw1,c
  1601  003BAE  0EFD               	movlw	-3
  1602  003BB0  6AE3               	clrf	plusw1,c
  1603  003BB2  0EFE               	movlw	-2
  1604  003BB4  6AE3               	clrf	plusw1,c
  1605                           
  1606                           ;stkvar	_divisor @ sp[(-5)+-8]
  1607  003BB6  0EF3               	movlw	-13
  1608  003BB8  50E3               	movf	plusw1,w,c
  1609  003BBA  E10A               	bnz	u2500
  1610  003BBC  0EF4               	movlw	-12
  1611  003BBE  50E3               	movf	plusw1,w,c
  1612  003BC0  E107               	bnz	u2500
  1613  003BC2  0EF5               	movlw	-11
  1614  003BC4  50E3               	movf	plusw1,w,c
  1615  003BC6  E104               	bnz	u2500
  1616  003BC8  0EF6               	movlw	-10
  1617  003BCA  50E3               	movf	plusw1,w,c
  1618  003BCC  B4D8               	btfsc	status,2,c
  1619  003BCE  D057               	goto	l3280
  1620  003BD0                     u2500:
  1621                           
  1622                           ;stkvar	_counter @ sp[(-5)+4]
  1623  003BD0  0EFF               	movlw	-1
  1624  003BD2  6AE3               	clrf	plusw1,c
  1625  003BD4  D00A               	goto	L1
  1626  003BD6                     l3264:
  1627                           
  1628                           ;stkvar	_divisor @ sp[(-5)+-8]
  1629  003BD6  90D8               	bcf	status,0,c
  1630  003BD8  0EF3               	movlw	-13
  1631  003BDA  36E3               	rlcf	plusw1,f,c
  1632  003BDC  0EF4               	movlw	-12
  1633  003BDE  36E3               	rlcf	plusw1,f,c
  1634  003BE0  0EF5               	movlw	-11
  1635  003BE2  36E3               	rlcf	plusw1,f,c
  1636  003BE4  0EF6               	movlw	-10
  1637  003BE6  36E3               	rlcf	plusw1,f,c
  1638                           
  1639                           ;stkvar	_counter @ sp[(-5)+4]
  1640  003BE8  0EFF               	movlw	-1
  1641  003BEA                     L1:
  1642  003BEA  2AE3               	incf	plusw1,f,c
  1643                           
  1644                           ;stkvar	_divisor @ sp[(-5)+-8]
  1645  003BEC  0EF6               	movlw	-10
  1646  003BEE  AEE3               	btfss	plusw1,7,c
  1647  003BF0  D7F2               	goto	l3264
  1648  003BF2                     l3268:
  1649                           
  1650                           ;stkvar	_quotient @ sp[(-5)+0]
  1651  003BF2  90D8               	bcf	status,0,c
  1652  003BF4  0EFB               	movlw	-5
  1653  003BF6  36E3               	rlcf	plusw1,f,c
  1654  003BF8  0EFC               	movlw	-4
  1655  003BFA  36E3               	rlcf	plusw1,f,c
  1656  003BFC  0EFD               	movlw	-3
  1657  003BFE  36E3               	rlcf	plusw1,f,c
  1658  003C00  0EFE               	movlw	-2
  1659  003C02  36E3               	rlcf	plusw1,f,c
  1660                           
  1661                           ;stkvar	_divisor @ sp[(-5)+-8]
  1662                           ;stkvar	_dividend @ sp[(-5)+-4]
  1663  003C04  50E1               	movf	fsr1l,w,c
  1664  003C06  0FF7               	addlw	-9
  1665  003C08  6ED9               	movwf	fsr2l,c
  1666  003C0A  50E2               	movf	fsr1h,w,c
  1667  003C0C  6EDA               	movwf	fsr2h,c
  1668  003C0E  0EFF               	movlw	255
  1669  003C10  22DA               	addwfc	fsr2h,f,c
  1670  003C12  0EF3               	movlw	-13
  1671  003C14  50E3               	movf	plusw1,w,c
  1672  003C16  5CDE               	subwf	postinc2,w,c
  1673  003C18  0EF4               	movlw	-12
  1674  003C1A  50E3               	movf	plusw1,w,c
  1675  003C1C  58DE               	subwfb	postinc2,w,c
  1676  003C1E  0EF5               	movlw	-11
  1677  003C20  50E3               	movf	plusw1,w,c
  1678  003C22  58DE               	subwfb	postinc2,w,c
  1679  003C24  0EF6               	movlw	-10
  1680  003C26  50E3               	movf	plusw1,w,c
  1681  003C28  58DE               	subwfb	postinc2,w,c
  1682  003C2A  A0D8               	btfss	status,0,c
  1683  003C2C  D015               	goto	l3276
  1684                           
  1685                           ;stkvar	_divisor @ sp[(-5)+-8]
  1686                           ;stkvar	_dividend @ sp[(-5)+-4]
  1687  003C2E  50E1               	movf	fsr1l,w,c
  1688  003C30  0FF7               	addlw	-9
  1689  003C32  6ED9               	movwf	fsr2l,c
  1690  003C34  50E2               	movf	fsr1h,w,c
  1691  003C36  6EDA               	movwf	fsr2h,c
  1692  003C38  0EFF               	movlw	255
  1693  003C3A  22DA               	addwfc	fsr2h,f,c
  1694  003C3C  0EF3               	movlw	-13
  1695  003C3E  50E3               	movf	plusw1,w,c
  1696  003C40  5EDE               	subwf	postinc2,f,c
  1697  003C42  0EF4               	movlw	-12
  1698  003C44  50E3               	movf	plusw1,w,c
  1699  003C46  5ADE               	subwfb	postinc2,f,c
  1700  003C48  0EF5               	movlw	-11
  1701  003C4A  50E3               	movf	plusw1,w,c
  1702  003C4C  5ADE               	subwfb	postinc2,f,c
  1703  003C4E  0EF6               	movlw	-10
  1704  003C50  50E3               	movf	plusw1,w,c
  1705  003C52  5ADE               	subwfb	postinc2,f,c
  1706                           
  1707                           ;stkvar	_quotient @ sp[(-5)+0]
  1708  003C54  0EFB               	movlw	-5
  1709  003C56  80E3               	bsf	plusw1,0,c
  1710  003C58                     l3276:
  1711                           
  1712                           ;stkvar	_divisor @ sp[(-5)+-8]
  1713  003C58  90D8               	bcf	status,0,c
  1714  003C5A  0EF6               	movlw	-10
  1715  003C5C  32E3               	rrcf	plusw1,f,c
  1716  003C5E  0EF5               	movlw	-11
  1717  003C60  32E3               	rrcf	plusw1,f,c
  1718  003C62  0EF4               	movlw	-12
  1719  003C64  32E3               	rrcf	plusw1,f,c
  1720  003C66  0EF3               	movlw	-13
  1721  003C68  32E3               	rrcf	plusw1,f,c
  1722                           
  1723                           ;stkvar	_counter @ sp[(-5)+4]
  1724  003C6A  0EFF               	movlw	-1
  1725  003C6C  50E3               	movf	plusw1,w,c
  1726  003C6E  6E50               	movwf	btemp,c
  1727  003C70  0E01               	movlw	1
  1728  003C72  5E50               	subwf	btemp,f,c
  1729  003C74  0EFF               	movlw	-1
  1730  003C76  C050  FFE3         	movff	btemp,plusw1
  1731  003C7A  A4D8               	btfss	status,2,c
  1732  003C7C  D7BA               	goto	l3268
  1733  003C7E                     l3280:
  1734                           
  1735                           ;stkvar	_quotient @ sp[(-5)+0]
  1736  003C7E  0EFB               	movlw	-5
  1737  003C80  CFE3 F050          	movff	plusw1,btemp
  1738  003C84  0EFC               	movlw	-4
  1739  003C86  CFE3 F051          	movff	plusw1,btemp+1
  1740  003C8A  0EFD               	movlw	-3
  1741  003C8C  CFE3 F052          	movff	plusw1,btemp+2
  1742  003C90  0EFE               	movlw	-2
  1743  003C92  CFE3 F053          	movff	plusw1,btemp+3
  1744                           
  1745                           ; ___lldiv: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsi
      +                          ze = 8, vargsize = 0
  1746  003C96  0EF3               	movlw	243
  1747  003C98  26E1               	addwf	fsr1l,f,c
  1748  003C9A  0EFF               	movlw	255
  1749  003C9C  22E2               	addwfc	fsr1h,f,c
  1750  003C9E  0012               	return		;funcret
  1751  003CA0                     __end_of___lldiv:
  1752                           	opt stack 0
  1753                           tblptru	equ	0xFF8
  1754                           tblptrh	equ	0xFF7
  1755                           tblptrl	equ	0xFF6
  1756                           tablat	equ	0xFF5
  1757                           intcon	equ	0xFF2
  1758                           postinc0	equ	0xFEE
  1759                           wreg	equ	0xFE8
  1760                           postinc1	equ	0xFE6
  1761                           postdec1	equ	0xFE5
  1762                           plusw1	equ	0xFE3
  1763                           fsr1h	equ	0xFE2
  1764                           fsr1l	equ	0xFE1
  1765                           indf2	equ	0xFDF
  1766                           postinc2	equ	0xFDE
  1767                           postdec2	equ	0xFDD
  1768                           fsr2h	equ	0xFDA
  1769                           fsr2l	equ	0xFD9
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function _RF24_init *****************
  1773 ;; Defined at:
  1774 ;;		line 430 in file "../../../RF24_c/RF24_c.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  rf              2  [STACK] PTR struct RF24
  1777 ;;		 -> radio(22), 
  1778 ;;  _cepin          1  [STACK] unsigned char 
  1779 ;;  _cspin          1  [STACK] unsigned char 
  1780 ;; Auto vars:     Size  Location     Type
  1781 ;;		None
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  1  [STACK] void 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  1786 ;; Tracked objects:
  1787 ;;		On entry : 0/0
  1788 ;;		On exit  : 0/0
  1789 ;;		Unchanged: 0/0
  1790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1795 ;;Total ram usage:        0 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    1
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_setup
  1802 ;; This function uses a reentrant model
  1803 ;;
  1804                           
  1805                           	psect	text4
  1806  003D92                     __ptext4:
  1807                           	opt stack 0
  1808  003D92                     _RF24_init:
  1809                           	opt stack 28
  1810                           
  1811                           ;RF24_c.c: 432: rf->ce_pin=_cepin;
  1812                           ;stkvar	__cepin @ sp[(0)+-3]
  1813                           ;stkvar	_rf @ sp[(0)+-2]
  1814                           
  1815                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  1816                           ;incstack = 0
  1817  003D92  0EFE               	movlw	-2
  1818  003D94  CFE3 FFD9          	movff	plusw1,fsr2l
  1819  003D98  0EFF               	movlw	-1
  1820  003D9A  CFE3 FFDA          	movff	plusw1,fsr2h
  1821  003D9E  0EFD               	movlw	-3
  1822  003DA0  CFE3 FFDF          	movff	plusw1,indf2
  1823                           
  1824                           ;RF24_c.c: 433: rf->csn_pin=_cspin;
  1825                           ;stkvar	__cspin @ sp[(0)+-4]
  1826                           ;stkvar	_rf @ sp[(0)+-2]
  1827  003DA4  0EFE               	movlw	-2
  1828  003DA6  CFE3 F051          	movff	plusw1,btemp+1
  1829  003DAA  0EFF               	movlw	-1
  1830  003DAC  CFE3 F052          	movff	plusw1,btemp+2
  1831  003DB0  0E01               	movlw	1
  1832  003DB2  2451               	addwf	btemp+1,w,c
  1833  003DB4  6ED9               	movwf	fsr2l,c
  1834  003DB6  0E00               	movlw	0
  1835  003DB8  2052               	addwfc	btemp+2,w,c
  1836  003DBA  6EDA               	movwf	fsr2h,c
  1837  003DBC  0EFC               	movlw	-4
  1838  003DBE  CFE3 FFDF          	movff	plusw1,indf2
  1839                           
  1840                           ;RF24_c.c: 434: rf->p_variant=0;
  1841                           ;stkvar	_rf @ sp[(0)+-2]
  1842  003DC2  0EFE               	movlw	-2
  1843  003DC4  CFE3 F051          	movff	plusw1,btemp+1
  1844  003DC8  0EFF               	movlw	-1
  1845  003DCA  CFE3 F052          	movff	plusw1,btemp+2
  1846  003DCE  0E04               	movlw	4
  1847  003DD0  2451               	addwf	btemp+1,w,c
  1848  003DD2  6ED9               	movwf	fsr2l,c
  1849  003DD4  0E00               	movlw	0
  1850  003DD6  2052               	addwfc	btemp+2,w,c
  1851  003DD8  6EDA               	movwf	fsr2h,c
  1852  003DDA  0E00               	movlw	0
  1853  003DDC  6EDF               	movwf	indf2,c
  1854                           
  1855                           ;RF24_c.c: 435: rf->payload_size=32;
  1856                           ;stkvar	_rf @ sp[(0)+-2]
  1857  003DDE  0EFE               	movlw	-2
  1858  003DE0  CFE3 F051          	movff	plusw1,btemp+1
  1859  003DE4  0EFF               	movlw	-1
  1860  003DE6  CFE3 F052          	movff	plusw1,btemp+2
  1861  003DEA  0E05               	movlw	5
  1862  003DEC  2451               	addwf	btemp+1,w,c
  1863  003DEE  6ED9               	movwf	fsr2l,c
  1864  003DF0  0E00               	movlw	0
  1865  003DF2  2052               	addwfc	btemp+2,w,c
  1866  003DF4  6EDA               	movwf	fsr2h,c
  1867  003DF6  0E20               	movlw	32
  1868  003DF8  6EDF               	movwf	indf2,c
  1869                           
  1870                           ;RF24_c.c: 436: rf->dynamic_payloads_enabled=0;
  1871                           ;stkvar	_rf @ sp[(0)+-2]
  1872  003DFA  0EFE               	movlw	-2
  1873  003DFC  CFE3 F051          	movff	plusw1,btemp+1
  1874  003E00  0EFF               	movlw	-1
  1875  003E02  CFE3 F052          	movff	plusw1,btemp+2
  1876  003E06  0E06               	movlw	6
  1877  003E08  2451               	addwf	btemp+1,w,c
  1878  003E0A  6ED9               	movwf	fsr2l,c
  1879  003E0C  0E00               	movlw	0
  1880  003E0E  2052               	addwfc	btemp+2,w,c
  1881  003E10  6EDA               	movwf	fsr2h,c
  1882  003E12  0E00               	movlw	0
  1883  003E14  6EDF               	movwf	indf2,c
  1884                           
  1885                           ;RF24_c.c: 437: rf->addr_width=5;
  1886                           ;stkvar	_rf @ sp[(0)+-2]
  1887  003E16  0EFE               	movlw	-2
  1888  003E18  CFE3 F051          	movff	plusw1,btemp+1
  1889  003E1C  0EFF               	movlw	-1
  1890  003E1E  CFE3 F052          	movff	plusw1,btemp+2
  1891  003E22  0E0C               	movlw	12
  1892  003E24  2451               	addwf	btemp+1,w,c
  1893  003E26  6ED9               	movwf	fsr2l,c
  1894  003E28  0E00               	movlw	0
  1895  003E2A  2052               	addwfc	btemp+2,w,c
  1896  003E2C  6EDA               	movwf	fsr2h,c
  1897  003E2E  0E05               	movlw	5
  1898  003E30  6EDF               	movwf	indf2,c
  1899                           
  1900                           ;RF24_c.c: 438: rf->csDelay=5;
  1901                           ;stkvar	_rf @ sp[(0)+-2]
  1902  003E32  0EFE               	movlw	-2
  1903  003E34  CFE3 F051          	movff	plusw1,btemp+1
  1904  003E38  0EFF               	movlw	-1
  1905  003E3A  CFE3 F052          	movff	plusw1,btemp+2
  1906  003E3E  0E11               	movlw	17
  1907  003E40  2451               	addwf	btemp+1,w,c
  1908  003E42  6ED9               	movwf	fsr2l,c
  1909  003E44  0E00               	movlw	0
  1910  003E46  2052               	addwfc	btemp+2,w,c
  1911  003E48  6EDA               	movwf	fsr2h,c
  1912  003E4A  0E05               	movlw	5
  1913  003E4C  6EDE               	movwf	postinc2,c
  1914  003E4E  0E00               	movlw	0
  1915  003E50  6EDE               	movwf	postinc2,c
  1916  003E52  0E00               	movlw	0
  1917  003E54  6EDE               	movwf	postinc2,c
  1918  003E56  0E00               	movlw	0
  1919  003E58  6EDD               	movwf	postdec2,c
  1920                           
  1921                           ;RF24_c.c: 439: rf->pipe0_reading_address[0]=0;
  1922                           ;stkvar	_rf @ sp[(0)+-2]
  1923  003E5A  0EFE               	movlw	-2
  1924  003E5C  CFE3 F051          	movff	plusw1,btemp+1
  1925  003E60  0EFF               	movlw	-1
  1926  003E62  CFE3 F052          	movff	plusw1,btemp+2
  1927  003E66  0E07               	movlw	7
  1928  003E68  2451               	addwf	btemp+1,w,c
  1929  003E6A  6ED9               	movwf	fsr2l,c
  1930  003E6C  0E00               	movlw	0
  1931  003E6E  2052               	addwfc	btemp+2,w,c
  1932  003E70  6EDA               	movwf	fsr2h,c
  1933  003E72  0E00               	movlw	0
  1934  003E74  6EDF               	movwf	indf2,c
  1935                           
  1936                           ; _RF24_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, arg
      +                          size = 4, vargsize = 0
  1937  003E76  52E5               	movf	postdec1,f,c
  1938  003E78  52E5               	movf	postdec1,f,c
  1939  003E7A  52E5               	movf	postdec1,f,c
  1940  003E7C  52E5               	movf	postdec1,f,c
  1941  003E7E  0012               	return		;funcret
  1942  003E80                     __end_of_RF24_init:
  1943                           	opt stack 0
  1944                           tblptru	equ	0xFF8
  1945                           tblptrh	equ	0xFF7
  1946                           tblptrl	equ	0xFF6
  1947                           tablat	equ	0xFF5
  1948                           intcon	equ	0xFF2
  1949                           postinc0	equ	0xFEE
  1950                           wreg	equ	0xFE8
  1951                           postinc1	equ	0xFE6
  1952                           postdec1	equ	0xFE5
  1953                           plusw1	equ	0xFE3
  1954                           fsr1h	equ	0xFE2
  1955                           fsr1l	equ	0xFE1
  1956                           indf2	equ	0xFDF
  1957                           postinc2	equ	0xFDE
  1958                           postdec2	equ	0xFDD
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _RF24_begin *****************
  1964 ;; Defined at:
  1965 ;;		line 595 in file "../../../RF24_c/RF24_c.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  rf              2  [STACK] PTR struct RF24
  1968 ;;		 -> radio(22), 
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;  setup           1  [STACK] unsigned char 
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1  [STACK] unsigned char 
  1973 ;; Registers used:
  1974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used:    1
  1986 ;; Hardware stack levels required when called:    6
  1987 ;; This function calls:
  1988 ;;		_RF24_ce_d
  1989 ;;		_RF24_csn_d
  1990 ;;		_RF24_flush_rx
  1991 ;;		_RF24_flush_tx
  1992 ;;		_RF24_powerUp
  1993 ;;		_RF24_read_register_d
  1994 ;;		_RF24_setChannel
  1995 ;;		_RF24_setDataRate
  1996 ;;		_RF24_setRetries
  1997 ;;		_RF24_toggle_features_d
  1998 ;;		_RF24_write_register_d
  1999 ;;		_SPI_begin
  2000 ;;		_delay
  2001 ;;		_pinMode
  2002 ;; This function is called by:
  2003 ;;		_setup
  2004 ;; This function uses a reentrant model
  2005 ;;
  2006                           
  2007                           	psect	text5
  2008  002A42                     __ptext5:
  2009                           	opt stack 0
  2010  002A42                     _RF24_begin:
  2011                           	opt stack 0
  2012                           
  2013                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2014  002A42  52E6               	movf	postinc1,f,c
  2015                           
  2016                           ;RF24_c.c: 637: if (rf->ce_pin != rf->csn_pin) pinMode(rf->ce_pin,0);
  2017                           ;stkvar	_rf @ sp[(-1)+-2]
  2018                           
  2019                           ;incstack = 0
  2020  002A44  0EFD               	movlw	-3
  2021  002A46  CFE3 F051          	movff	plusw1,btemp+1
  2022  002A4A  0EFE               	movlw	-2
  2023  002A4C  CFE3 F052          	movff	plusw1,btemp+2
  2024  002A50  0E01               	movlw	1
  2025  002A52  2451               	addwf	btemp+1,w,c
  2026  002A54  6ED9               	movwf	fsr2l,c
  2027  002A56  0E00               	movlw	0
  2028  002A58  2052               	addwfc	btemp+2,w,c
  2029  002A5A  6EDA               	movwf	fsr2h,c
  2030                           
  2031                           ;stkvar	_rf @ sp[(-1)+-2]
  2032  002A5C  0EFD               	movlw	-3
  2033  002A5E  CFE3 FFE9          	movff	plusw1,fsr0l
  2034  002A62  0EFE               	movlw	-2
  2035  002A64  CFE3 FFEA          	movff	plusw1,fsr0h
  2036  002A68  50DE               	movf	postinc2,w,c
  2037  002A6A  18EE               	xorwf	postinc0,w,c
  2038  002A6C  B4D8               	btfsc	status,2,c
  2039  002A6E  D00C               	goto	l3350
  2040  002A70  0E00               	movlw	0
  2041  002A72  6EE6               	movwf	postinc1,c
  2042                           
  2043                           ;stkvar	_rf @ sp[(-2)+-2]
  2044  002A74  0EFC               	movlw	-4
  2045  002A76  CFE3 FFD9          	movff	plusw1,fsr2l
  2046  002A7A  0EFD               	movlw	-3
  2047  002A7C  CFE3 FFDA          	movff	plusw1,fsr2h
  2048  002A80  50DF               	movf	indf2,w,c
  2049  002A82  6EE6               	movwf	postinc1,c
  2050  002A84  ECA1  F00E         	call	_pinMode	;wreg free
  2051  002A88                     l3350:
  2052                           
  2053                           ;RF24_c.c: 640: if (rf->ce_pin != rf->csn_pin)
  2054                           ;stkvar	_rf @ sp[(-1)+-2]
  2055  002A88  0EFD               	movlw	-3
  2056  002A8A  CFE3 F051          	movff	plusw1,btemp+1
  2057  002A8E  0EFE               	movlw	-2
  2058  002A90  CFE3 F052          	movff	plusw1,btemp+2
  2059  002A94  0E01               	movlw	1
  2060  002A96  2451               	addwf	btemp+1,w,c
  2061  002A98  6ED9               	movwf	fsr2l,c
  2062  002A9A  0E00               	movlw	0
  2063  002A9C  2052               	addwfc	btemp+2,w,c
  2064  002A9E  6EDA               	movwf	fsr2h,c
  2065                           
  2066                           ;stkvar	_rf @ sp[(-1)+-2]
  2067  002AA0  0EFD               	movlw	-3
  2068  002AA2  CFE3 FFE9          	movff	plusw1,fsr0l
  2069  002AA6  0EFE               	movlw	-2
  2070  002AA8  CFE3 FFEA          	movff	plusw1,fsr0h
  2071  002AAC  50DE               	movf	postinc2,w,c
  2072  002AAE  18EE               	xorwf	postinc0,w,c
  2073  002AB0  B4D8               	btfsc	status,2,c
  2074  002AB2  D012               	goto	l3354
  2075                           
  2076                           ;RF24_c.c: 642: pinMode(rf->csn_pin,0);
  2077  002AB4  0E00               	movlw	0
  2078  002AB6  6EE6               	movwf	postinc1,c
  2079                           
  2080                           ;stkvar	_rf @ sp[(-2)+-2]
  2081  002AB8  0EFC               	movlw	-4
  2082  002ABA  CFE3 F051          	movff	plusw1,btemp+1
  2083  002ABE  0EFD               	movlw	-3
  2084  002AC0  CFE3 F052          	movff	plusw1,btemp+2
  2085  002AC4  0E01               	movlw	1
  2086  002AC6  2451               	addwf	btemp+1,w,c
  2087  002AC8  6ED9               	movwf	fsr2l,c
  2088  002ACA  0E00               	movlw	0
  2089  002ACC  2052               	addwfc	btemp+2,w,c
  2090  002ACE  6EDA               	movwf	fsr2h,c
  2091  002AD0  50DF               	movf	indf2,w,c
  2092  002AD2  6EE6               	movwf	postinc1,c
  2093  002AD4  ECA1  F00E         	call	_pinMode	;wreg free
  2094  002AD8                     l3354:
  2095                           
  2096                           ;RF24_c.c: 644: SPI_begin();
  2097  002AD8  ECF7  F027         	call	_SPI_begin	;wreg free
  2098                           
  2099                           ;RF24_c.c: 645: RF24_ce_d(rf,0);
  2100  002ADC  0E00               	movlw	0
  2101  002ADE  6EE6               	movwf	postinc1,c
  2102                           
  2103                           ;stkvar	_rf @ sp[(-2)+-2]
  2104  002AE0  0EFC               	movlw	-4
  2105  002AE2  CFE3 FFE6          	movff	plusw1,postinc1
  2106  002AE6  CFE3 FFE6          	movff	plusw1,postinc1
  2107  002AEA  EC2A  F026         	call	_RF24_ce_d	;wreg free
  2108                           
  2109                           ;RF24_c.c: 646: RF24_csn_d(rf,1);
  2110  002AEE  0E01               	movlw	1
  2111  002AF0  6EE6               	movwf	postinc1,c
  2112                           
  2113                           ;stkvar	_rf @ sp[(-2)+-2]
  2114  002AF2  0EFC               	movlw	-4
  2115  002AF4  CFE3 FFE6          	movff	plusw1,postinc1
  2116  002AF8  CFE3 FFE6          	movff	plusw1,postinc1
  2117  002AFC  EC03  F026         	call	_RF24_csn_d	;wreg free
  2118                           
  2119                           ;RF24_c.c: 658: delay( 5 ) ;
  2120  002B00  0E05               	movlw	5
  2121  002B02  6EE6               	movwf	postinc1,c
  2122  002B04  0E00               	movlw	0
  2123  002B06  6EE6               	movwf	postinc1,c
  2124  002B08  ECD8  F020         	call	_delay	;wreg free
  2125                           
  2126                           ;RF24_c.c: 661: RF24_write_register_d(rf, 0x00, 0b00001100 ) ;
  2127  002B0C  0E0C               	movlw	12
  2128  002B0E  6EE6               	movwf	postinc1,c
  2129  002B10  0E00               	movlw	0
  2130  002B12  6EE6               	movwf	postinc1,c
  2131                           
  2132                           ;stkvar	_rf @ sp[(-3)+-2]
  2133  002B14  0EFB               	movlw	-5
  2134  002B16  CFE3 FFE6          	movff	plusw1,postinc1
  2135  002B1A  CFE3 FFE6          	movff	plusw1,postinc1
  2136  002B1E  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  2137                           
  2138                           ;RF24_c.c: 666: RF24_setRetries(rf,5,15);
  2139  002B22  0E0F               	movlw	15
  2140  002B24  6EE6               	movwf	postinc1,c
  2141  002B26  0E05               	movlw	5
  2142  002B28  6EE6               	movwf	postinc1,c
  2143                           
  2144                           ;stkvar	_rf @ sp[(-3)+-2]
  2145  002B2A  0EFB               	movlw	-5
  2146  002B2C  CFE3 FFE6          	movff	plusw1,postinc1
  2147  002B30  CFE3 FFE6          	movff	plusw1,postinc1
  2148  002B34  EC8A  F027         	call	_RF24_setRetries	;wreg free
  2149                           
  2150                           ;RF24_c.c: 673: if( RF24_setDataRate(rf, RF24_250KBPS ) )
  2151  002B38  0E02               	movlw	2
  2152  002B3A  6EE6               	movwf	postinc1,c
  2153                           
  2154                           ;stkvar	_rf @ sp[(-2)+-2]
  2155  002B3C  0EFC               	movlw	-4
  2156  002B3E  CFE3 FFE6          	movff	plusw1,postinc1
  2157  002B42  CFE3 FFE6          	movff	plusw1,postinc1
  2158  002B46  EC4D  F01D         	call	_RF24_setDataRate	;wreg free
  2159  002B4A  5050               	movf	btemp,w,c
  2160  002B4C  B4D8               	btfsc	status,2,c
  2161  002B4E  D00E               	goto	l3370
  2162                           
  2163                           ;RF24_c.c: 674: {
  2164                           ;RF24_c.c: 675: rf->p_variant = 1 ;
  2165                           ;stkvar	_rf @ sp[(-1)+-2]
  2166  002B50  0EFD               	movlw	-3
  2167  002B52  CFE3 F051          	movff	plusw1,btemp+1
  2168  002B56  0EFE               	movlw	-2
  2169  002B58  CFE3 F052          	movff	plusw1,btemp+2
  2170  002B5C  0E04               	movlw	4
  2171  002B5E  2451               	addwf	btemp+1,w,c
  2172  002B60  6ED9               	movwf	fsr2l,c
  2173  002B62  0E00               	movlw	0
  2174  002B64  2052               	addwfc	btemp+2,w,c
  2175  002B66  6EDA               	movwf	fsr2h,c
  2176  002B68  0E01               	movlw	1
  2177  002B6A  6EDF               	movwf	indf2,c
  2178  002B6C                     l3370:
  2179                           
  2180                           ;RF24_c.c: 676: }
  2181                           ;RF24_c.c: 677: setup = RF24_read_register_d(rf,0x06);
  2182  002B6C  0E06               	movlw	6
  2183  002B6E  6EE6               	movwf	postinc1,c
  2184                           
  2185                           ;stkvar	_rf @ sp[(-2)+-2]
  2186  002B70  0EFC               	movlw	-4
  2187  002B72  CFE3 FFE6          	movff	plusw1,postinc1
  2188  002B76  CFE3 FFE6          	movff	plusw1,postinc1
  2189  002B7A  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  2190                           
  2191                           ;stkvar	_setup @ sp[(-1)+0]
  2192  002B7E  0EFF               	movlw	-1
  2193  002B80  C050  FFE3         	movff	btemp,plusw1
  2194                           
  2195                           ;RF24_c.c: 685: RF24_setDataRate(rf, RF24_1MBPS ) ;
  2196  002B84  0E00               	movlw	0
  2197  002B86  6EE6               	movwf	postinc1,c
  2198                           
  2199                           ;stkvar	_rf @ sp[(-2)+-2]
  2200  002B88  0EFC               	movlw	-4
  2201  002B8A  CFE3 FFE6          	movff	plusw1,postinc1
  2202  002B8E  CFE3 FFE6          	movff	plusw1,postinc1
  2203  002B92  EC4D  F01D         	call	_RF24_setDataRate	;wreg free
  2204                           
  2205                           ;RF24_c.c: 691: RF24_toggle_features_d(rf);
  2206                           ;stkvar	_rf @ sp[(-1)+-2]
  2207  002B96  0EFD               	movlw	-3
  2208  002B98  CFE3 FFE6          	movff	plusw1,postinc1
  2209  002B9C  CFE3 FFE6          	movff	plusw1,postinc1
  2210  002BA0  ECA6  F027         	call	_RF24_toggle_features_d	;wreg free
  2211                           
  2212                           ;RF24_c.c: 692: RF24_write_register_d(rf,0x1D,0 );
  2213  002BA4  0E00               	movlw	0
  2214  002BA6  6EE6               	movwf	postinc1,c
  2215  002BA8  0E1D               	movlw	29
  2216  002BAA  6EE6               	movwf	postinc1,c
  2217                           
  2218                           ;stkvar	_rf @ sp[(-3)+-2]
  2219  002BAC  0EFB               	movlw	-5
  2220  002BAE  CFE3 FFE6          	movff	plusw1,postinc1
  2221  002BB2  CFE3 FFE6          	movff	plusw1,postinc1
  2222  002BB6  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  2223                           
  2224                           ;RF24_c.c: 693: RF24_write_register_d(rf,0x1C,0);
  2225  002BBA  0E00               	movlw	0
  2226  002BBC  6EE6               	movwf	postinc1,c
  2227  002BBE  0E1C               	movlw	28
  2228  002BC0  6EE6               	movwf	postinc1,c
  2229                           
  2230                           ;stkvar	_rf @ sp[(-3)+-2]
  2231  002BC2  0EFB               	movlw	-5
  2232  002BC4  CFE3 FFE6          	movff	plusw1,postinc1
  2233  002BC8  CFE3 FFE6          	movff	plusw1,postinc1
  2234  002BCC  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  2235                           
  2236                           ;RF24_c.c: 697: RF24_write_register_d(rf,0x07,(1<<(6)) | (1<<(5)) | (1<<(4)) );
  2237  002BD0  0E70               	movlw	112
  2238  002BD2  6EE6               	movwf	postinc1,c
  2239  002BD4  0E07               	movlw	7
  2240  002BD6  6EE6               	movwf	postinc1,c
  2241                           
  2242                           ;stkvar	_rf @ sp[(-3)+-2]
  2243  002BD8  0EFB               	movlw	-5
  2244  002BDA  CFE3 FFE6          	movff	plusw1,postinc1
  2245  002BDE  CFE3 FFE6          	movff	plusw1,postinc1
  2246  002BE2  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  2247                           
  2248                           ;RF24_c.c: 702: RF24_setChannel(rf,76);
  2249  002BE6  0E4C               	movlw	76
  2250  002BE8  6EE6               	movwf	postinc1,c
  2251                           
  2252                           ;stkvar	_rf @ sp[(-2)+-2]
  2253  002BEA  0EFC               	movlw	-4
  2254  002BEC  CFE3 FFE6          	movff	plusw1,postinc1
  2255  002BF0  CFE3 FFE6          	movff	plusw1,postinc1
  2256  002BF4  ECDB  F025         	call	_RF24_setChannel	;wreg free
  2257                           
  2258                           ;RF24_c.c: 705: RF24_flush_rx(rf);
  2259                           ;stkvar	_rf @ sp[(-1)+-2]
  2260  002BF8  0EFD               	movlw	-3
  2261  002BFA  CFE3 FFE6          	movff	plusw1,postinc1
  2262  002BFE  CFE3 FFE6          	movff	plusw1,postinc1
  2263  002C02  EC04  F028         	call	_RF24_flush_rx	;wreg free
  2264                           
  2265                           ;RF24_c.c: 706: RF24_flush_tx(rf);
  2266                           ;stkvar	_rf @ sp[(-1)+-2]
  2267  002C06  0EFD               	movlw	-3
  2268  002C08  CFE3 FFE6          	movff	plusw1,postinc1
  2269  002C0C  CFE3 FFE6          	movff	plusw1,postinc1
  2270  002C10  EC34  F028         	call	_RF24_flush_tx	;wreg free
  2271                           
  2272                           ;RF24_c.c: 708: RF24_powerUp(rf);
  2273                           ;stkvar	_rf @ sp[(-1)+-2]
  2274  002C14  0EFD               	movlw	-3
  2275  002C16  CFE3 FFE6          	movff	plusw1,postinc1
  2276  002C1A  CFE3 FFE6          	movff	plusw1,postinc1
  2277  002C1E  EC51  F026         	call	_RF24_powerUp	;wreg free
  2278                           
  2279                           ;RF24_c.c: 712: RF24_write_register_d(rf,0x00, ( RF24_read_register_d(rf,0x00) ) & ~(1<<
      +                          (0)) );
  2280  002C22  0E00               	movlw	0
  2281  002C24  6EE6               	movwf	postinc1,c
  2282                           
  2283                           ;stkvar	_rf @ sp[(-2)+-2]
  2284  002C26  0EFC               	movlw	-4
  2285  002C28  CFE3 FFE6          	movff	plusw1,postinc1
  2286  002C2C  CFE3 FFE6          	movff	plusw1,postinc1
  2287  002C30  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  2288  002C34  5050               	movf	btemp,w,c
  2289  002C36  0BFE               	andlw	254
  2290  002C38  6EE6               	movwf	postinc1,c
  2291  002C3A  0E00               	movlw	0
  2292  002C3C  6EE6               	movwf	postinc1,c
  2293                           
  2294                           ;stkvar	_rf @ sp[(-3)+-2]
  2295  002C3E  0EFB               	movlw	-5
  2296  002C40  CFE3 FFE6          	movff	plusw1,postinc1
  2297  002C44  CFE3 FFE6          	movff	plusw1,postinc1
  2298  002C48  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  2299                           
  2300                           ;stkvar	_setup @ sp[(-1)+0]
  2301  002C4C  0EFF               	movlw	-1
  2302  002C4E  50E3               	movf	plusw1,w,c
  2303  002C50  B4D8               	btfsc	status,2,c
  2304  002C52  D002               	goto	l633
  2305                           
  2306                           ;stkvar	_setup @ sp[(-1)+0]
  2307  002C54  0EFF               	movlw	-1
  2308  002C56  28E3               	incf	plusw1,w,c
  2309  002C58                     l633:
  2310                           
  2311                           ; _RF24_begin: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, ar
      +                          gsize = 2, vargsize = 0
  2312  002C58  52E5               	movf	postdec1,f,c
  2313  002C5A  52E5               	movf	postdec1,f,c
  2314  002C5C  52E5               	movf	postdec1,f,c
  2315  002C5E  0012               	return		;funcret
  2316  002C60                     __end_of_RF24_begin:
  2317                           	opt stack 0
  2318                           tblptru	equ	0xFF8
  2319                           tblptrh	equ	0xFF7
  2320                           tblptrl	equ	0xFF6
  2321                           tablat	equ	0xFF5
  2322                           intcon	equ	0xFF2
  2323                           postinc0	equ	0xFEE
  2324                           fsr0h	equ	0xFEA
  2325                           fsr0l	equ	0xFE9
  2326                           wreg	equ	0xFE8
  2327                           postinc1	equ	0xFE6
  2328                           postdec1	equ	0xFE5
  2329                           plusw1	equ	0xFE3
  2330                           fsr1h	equ	0xFE2
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           postinc2	equ	0xFDE
  2334                           postdec2	equ	0xFDD
  2335                           fsr2h	equ	0xFDA
  2336                           fsr2l	equ	0xFD9
  2337                           status	equ	0xFD8
  2338                           
  2339 ;; *************** function _pinMode *****************
  2340 ;; Defined at:
  2341 ;;		line 8 in file "../../../RF24_c/utility/XC8/spi.c"
  2342 ;; Parameters:    Size  Location     Type
  2343 ;;  pin             1  [STACK] unsigned char 
  2344 ;;  mode            1  [STACK] unsigned char 
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;                  1  [STACK] void 
  2349 ;; Registers used:
  2350 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2351 ;; Tracked objects:
  2352 ;;		On entry : 0/0
  2353 ;;		On exit  : 0/0
  2354 ;;		Unchanged: 0/0
  2355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2360 ;;Total ram usage:        0 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    1
  2363 ;; This function calls:
  2364 ;;		Nothing
  2365 ;; This function is called by:
  2366 ;;		_RF24_begin
  2367 ;; This function uses a reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text6
  2371  001D42                     __ptext6:
  2372                           	opt stack 0
  2373  001D42                     _pinMode:
  2374                           	opt stack 27
  2375                           
  2376                           ;spi.c: 10: switch(pin)
  2377                           
  2378                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  2379                           ;incstack = 0
  2380  001D42  D0FC               	goto	l3214
  2381  001D44                     l3140:
  2382                           
  2383                           ;stkvar	_mode @ sp[(0)+-2]
  2384  001D44  0EFE               	movlw	-2
  2385  001D46  B0E3               	btfsc	plusw1,0,c
  2386  001D48  D002               	bra	u2115
  2387  001D4A  9696               	bcf	3990,3,c	;volatile
  2388  001D4C  D001               	bra	u2116
  2389  001D4E                     u2115:
  2390  001D4E  8696               	bsf	3990,3,c	;volatile
  2391  001D50                     u2116:
  2392  001D50  D163               	goto	l942
  2393  001D52                     l3142:
  2394                           
  2395                           ;stkvar	_mode @ sp[(0)+-2]
  2396  001D52  0EFE               	movlw	-2
  2397  001D54  B0E3               	btfsc	plusw1,0,c
  2398  001D56  D002               	bra	u2125
  2399  001D58  9092               	bcf	3986,0,c	;volatile
  2400  001D5A  D001               	bra	u2126
  2401  001D5C                     u2125:
  2402  001D5C  8092               	bsf	3986,0,c	;volatile
  2403  001D5E                     u2126:
  2404  001D5E  D15C               	goto	l942
  2405  001D60                     l3144:
  2406                           
  2407                           ;stkvar	_mode @ sp[(0)+-2]
  2408  001D60  0EFE               	movlw	-2
  2409  001D62  B0E3               	btfsc	plusw1,0,c
  2410  001D64  D002               	bra	u2135
  2411  001D66  9292               	bcf	3986,1,c	;volatile
  2412  001D68  D001               	bra	u2136
  2413  001D6A                     u2135:
  2414  001D6A  8292               	bsf	3986,1,c	;volatile
  2415  001D6C                     u2136:
  2416  001D6C  D155               	goto	l942
  2417  001D6E                     l3146:
  2418                           
  2419                           ;stkvar	_mode @ sp[(0)+-2]
  2420  001D6E  0EFE               	movlw	-2
  2421  001D70  B0E3               	btfsc	plusw1,0,c
  2422  001D72  D002               	bra	u2145
  2423  001D74  9492               	bcf	3986,2,c	;volatile
  2424  001D76  D001               	bra	u2146
  2425  001D78                     u2145:
  2426  001D78  8492               	bsf	3986,2,c	;volatile
  2427  001D7A                     u2146:
  2428  001D7A  D14E               	goto	l942
  2429  001D7C                     l3148:
  2430                           
  2431                           ;stkvar	_mode @ sp[(0)+-2]
  2432  001D7C  0EFE               	movlw	-2
  2433  001D7E  B0E3               	btfsc	plusw1,0,c
  2434  001D80  D002               	bra	u2155
  2435  001D82  9692               	bcf	3986,3,c	;volatile
  2436  001D84  D001               	bra	u2156
  2437  001D86                     u2155:
  2438  001D86  8692               	bsf	3986,3,c	;volatile
  2439  001D88                     u2156:
  2440  001D88  D147               	goto	l942
  2441  001D8A                     l3150:
  2442                           
  2443                           ;stkvar	_mode @ sp[(0)+-2]
  2444  001D8A  0EFE               	movlw	-2
  2445  001D8C  B0E3               	btfsc	plusw1,0,c
  2446  001D8E  D002               	bra	u2165
  2447  001D90  9892               	bcf	3986,4,c	;volatile
  2448  001D92  D001               	bra	u2166
  2449  001D94                     u2165:
  2450  001D94  8892               	bsf	3986,4,c	;volatile
  2451  001D96                     u2166:
  2452  001D96  D140               	goto	l942
  2453  001D98                     l3152:
  2454                           
  2455                           ;stkvar	_mode @ sp[(0)+-2]
  2456  001D98  0EFE               	movlw	-2
  2457  001D9A  B0E3               	btfsc	plusw1,0,c
  2458  001D9C  D002               	bra	u2175
  2459  001D9E  9A92               	bcf	3986,5,c	;volatile
  2460  001DA0  D001               	bra	u2176
  2461  001DA2                     u2175:
  2462  001DA2  8A92               	bsf	3986,5,c	;volatile
  2463  001DA4                     u2176:
  2464  001DA4  D139               	goto	l942
  2465  001DA6                     l3154:
  2466                           
  2467                           ;stkvar	_mode @ sp[(0)+-2]
  2468  001DA6  0EFE               	movlw	-2
  2469  001DA8  B0E3               	btfsc	plusw1,0,c
  2470  001DAA  D002               	bra	u2185
  2471  001DAC  9096               	bcf	3990,0,c	;volatile
  2472  001DAE  D001               	bra	u2186
  2473  001DB0                     u2185:
  2474  001DB0  8096               	bsf	3990,0,c	;volatile
  2475  001DB2                     u2186:
  2476  001DB2  D132               	goto	l942
  2477  001DB4                     l3156:
  2478                           
  2479                           ;stkvar	_mode @ sp[(0)+-2]
  2480  001DB4  0EFE               	movlw	-2
  2481  001DB6  B0E3               	btfsc	plusw1,0,c
  2482  001DB8  D002               	bra	u2195
  2483  001DBA  9296               	bcf	3990,1,c	;volatile
  2484  001DBC  D001               	bra	u2196
  2485  001DBE                     u2195:
  2486  001DBE  8296               	bsf	3990,1,c	;volatile
  2487  001DC0                     u2196:
  2488  001DC0  D12B               	goto	l942
  2489  001DC2                     l3158:
  2490                           
  2491                           ;stkvar	_mode @ sp[(0)+-2]
  2492  001DC2  0EFE               	movlw	-2
  2493  001DC4  B0E3               	btfsc	plusw1,0,c
  2494  001DC6  D002               	bra	u2205
  2495  001DC8  9496               	bcf	3990,2,c	;volatile
  2496  001DCA  D001               	bra	u2206
  2497  001DCC                     u2205:
  2498  001DCC  8496               	bsf	3990,2,c	;volatile
  2499  001DCE                     u2206:
  2500  001DCE  D124               	goto	l942
  2501  001DD0                     l3160:
  2502                           
  2503                           ;stkvar	_mode @ sp[(0)+-2]
  2504  001DD0  0EFE               	movlw	-2
  2505  001DD2  B0E3               	btfsc	plusw1,0,c
  2506  001DD4  D002               	bra	u2215
  2507  001DD6  9E92               	bcf	3986,7,c	;volatile
  2508  001DD8  D001               	bra	u2216
  2509  001DDA                     u2215:
  2510  001DDA  8E92               	bsf	3986,7,c	;volatile
  2511  001DDC                     u2216:
  2512  001DDC  D11D               	goto	l942
  2513  001DDE                     l3162:
  2514                           
  2515                           ;stkvar	_mode @ sp[(0)+-2]
  2516  001DDE  0EFE               	movlw	-2
  2517  001DE0  B0E3               	btfsc	plusw1,0,c
  2518  001DE2  D002               	bra	u2225
  2519  001DE4  9C92               	bcf	3986,6,c	;volatile
  2520  001DE6  D001               	bra	u2226
  2521  001DE8                     u2225:
  2522  001DE8  8C92               	bsf	3986,6,c	;volatile
  2523  001DEA                     u2226:
  2524  001DEA  D116               	goto	l942
  2525  001DEC                     l3164:
  2526                           
  2527                           ;stkvar	_mode @ sp[(0)+-2]
  2528  001DEC  0EFE               	movlw	-2
  2529  001DEE  B0E3               	btfsc	plusw1,0,c
  2530  001DF0  D002               	bra	u2235
  2531  001DF2  9094               	bcf	3988,0,c	;volatile
  2532  001DF4  D001               	bra	u2236
  2533  001DF6                     u2235:
  2534  001DF6  8094               	bsf	3988,0,c	;volatile
  2535  001DF8                     u2236:
  2536  001DF8  D10F               	goto	l942
  2537  001DFA                     l3166:
  2538                           
  2539                           ;stkvar	_mode @ sp[(0)+-2]
  2540  001DFA  0EFE               	movlw	-2
  2541  001DFC  B0E3               	btfsc	plusw1,0,c
  2542  001DFE  D002               	bra	u2245
  2543  001E00  9294               	bcf	3988,1,c	;volatile
  2544  001E02  D001               	bra	u2246
  2545  001E04                     u2245:
  2546  001E04  8294               	bsf	3988,1,c	;volatile
  2547  001E06                     u2246:
  2548  001E06  D108               	goto	l942
  2549  001E08                     l3168:
  2550                           
  2551                           ;stkvar	_mode @ sp[(0)+-2]
  2552  001E08  0EFE               	movlw	-2
  2553  001E0A  B0E3               	btfsc	plusw1,0,c
  2554  001E0C  D002               	bra	u2255
  2555  001E0E  9494               	bcf	3988,2,c	;volatile
  2556  001E10  D001               	bra	u2256
  2557  001E12                     u2255:
  2558  001E12  8494               	bsf	3988,2,c	;volatile
  2559  001E14                     u2256:
  2560  001E14  D101               	goto	l942
  2561  001E16                     l3170:
  2562                           
  2563                           ;stkvar	_mode @ sp[(0)+-2]
  2564  001E16  0EFE               	movlw	-2
  2565  001E18  B0E3               	btfsc	plusw1,0,c
  2566  001E1A  D002               	bra	u2265
  2567  001E1C  9694               	bcf	3988,3,c	;volatile
  2568  001E1E  D001               	bra	u2266
  2569  001E20                     u2265:
  2570  001E20  8694               	bsf	3988,3,c	;volatile
  2571  001E22                     u2266:
  2572  001E22  D0FA               	goto	l942
  2573  001E24                     l3172:
  2574                           
  2575                           ;stkvar	_mode @ sp[(0)+-2]
  2576  001E24  0EFE               	movlw	-2
  2577  001E26  B0E3               	btfsc	plusw1,0,c
  2578  001E28  D002               	bra	u2275
  2579  001E2A  9095               	bcf	3989,0,c	;volatile
  2580  001E2C  D001               	bra	u2276
  2581  001E2E                     u2275:
  2582  001E2E  8095               	bsf	3989,0,c	;volatile
  2583  001E30                     u2276:
  2584  001E30  D0F3               	goto	l942
  2585  001E32                     l3174:
  2586                           
  2587                           ;stkvar	_mode @ sp[(0)+-2]
  2588  001E32  0EFE               	movlw	-2
  2589  001E34  B0E3               	btfsc	plusw1,0,c
  2590  001E36  D002               	bra	u2285
  2591  001E38  9295               	bcf	3989,1,c	;volatile
  2592  001E3A  D001               	bra	u2286
  2593  001E3C                     u2285:
  2594  001E3C  8295               	bsf	3989,1,c	;volatile
  2595  001E3E                     u2286:
  2596  001E3E  D0EC               	goto	l942
  2597  001E40                     l3176:
  2598                           
  2599                           ;stkvar	_mode @ sp[(0)+-2]
  2600  001E40  0EFE               	movlw	-2
  2601  001E42  B0E3               	btfsc	plusw1,0,c
  2602  001E44  D002               	bra	u2295
  2603  001E46  9495               	bcf	3989,2,c	;volatile
  2604  001E48  D001               	bra	u2296
  2605  001E4A                     u2295:
  2606  001E4A  8495               	bsf	3989,2,c	;volatile
  2607  001E4C                     u2296:
  2608  001E4C  D0E5               	goto	l942
  2609  001E4E                     l3178:
  2610                           
  2611                           ;stkvar	_mode @ sp[(0)+-2]
  2612  001E4E  0EFE               	movlw	-2
  2613  001E50  B0E3               	btfsc	plusw1,0,c
  2614  001E52  D002               	bra	u2305
  2615  001E54  9695               	bcf	3989,3,c	;volatile
  2616  001E56  D001               	bra	u2306
  2617  001E58                     u2305:
  2618  001E58  8695               	bsf	3989,3,c	;volatile
  2619  001E5A                     u2306:
  2620  001E5A  D0DE               	goto	l942
  2621  001E5C                     l3180:
  2622                           
  2623                           ;stkvar	_mode @ sp[(0)+-2]
  2624  001E5C  0EFE               	movlw	-2
  2625  001E5E  B0E3               	btfsc	plusw1,0,c
  2626  001E60  D002               	bra	u2315
  2627  001E62  9894               	bcf	3988,4,c	;volatile
  2628  001E64  D001               	bra	u2316
  2629  001E66                     u2315:
  2630  001E66  8894               	bsf	3988,4,c	;volatile
  2631  001E68                     u2316:
  2632  001E68  D0D7               	goto	l942
  2633  001E6A                     l3182:
  2634                           
  2635                           ;stkvar	_mode @ sp[(0)+-2]
  2636  001E6A  0EFE               	movlw	-2
  2637  001E6C  B0E3               	btfsc	plusw1,0,c
  2638  001E6E  D002               	bra	u2325
  2639  001E70  9A94               	bcf	3988,5,c	;volatile
  2640  001E72  D001               	bra	u2326
  2641  001E74                     u2325:
  2642  001E74  8A94               	bsf	3988,5,c	;volatile
  2643  001E76                     u2326:
  2644  001E76  D0D0               	goto	l942
  2645  001E78                     l3184:
  2646                           
  2647                           ;stkvar	_mode @ sp[(0)+-2]
  2648  001E78  0EFE               	movlw	-2
  2649  001E7A  B0E3               	btfsc	plusw1,0,c
  2650  001E7C  D002               	bra	u2335
  2651  001E7E  9C94               	bcf	3988,6,c	;volatile
  2652  001E80  D001               	bra	u2336
  2653  001E82                     u2335:
  2654  001E82  8C94               	bsf	3988,6,c	;volatile
  2655  001E84                     u2336:
  2656  001E84  D0C9               	goto	l942
  2657  001E86                     l3186:
  2658                           
  2659                           ;stkvar	_mode @ sp[(0)+-2]
  2660  001E86  0EFE               	movlw	-2
  2661  001E88  B0E3               	btfsc	plusw1,0,c
  2662  001E8A  D002               	bra	u2345
  2663  001E8C  9E94               	bcf	3988,7,c	;volatile
  2664  001E8E  D001               	bra	u2346
  2665  001E90                     u2345:
  2666  001E90  8E94               	bsf	3988,7,c	;volatile
  2667  001E92                     u2346:
  2668  001E92  D0C2               	goto	l942
  2669  001E94                     l3188:
  2670                           
  2671                           ;stkvar	_mode @ sp[(0)+-2]
  2672  001E94  0EFE               	movlw	-2
  2673  001E96  B0E3               	btfsc	plusw1,0,c
  2674  001E98  D002               	bra	u2355
  2675  001E9A  9895               	bcf	3989,4,c	;volatile
  2676  001E9C  D001               	bra	u2356
  2677  001E9E                     u2355:
  2678  001E9E  8895               	bsf	3989,4,c	;volatile
  2679  001EA0                     u2356:
  2680  001EA0  D0BB               	goto	l942
  2681  001EA2                     l3190:
  2682                           
  2683                           ;stkvar	_mode @ sp[(0)+-2]
  2684  001EA2  0EFE               	movlw	-2
  2685  001EA4  B0E3               	btfsc	plusw1,0,c
  2686  001EA6  D002               	bra	u2365
  2687  001EA8  9A95               	bcf	3989,5,c	;volatile
  2688  001EAA  D001               	bra	u2366
  2689  001EAC                     u2365:
  2690  001EAC  8A95               	bsf	3989,5,c	;volatile
  2691  001EAE                     u2366:
  2692  001EAE  D0B4               	goto	l942
  2693  001EB0                     l3192:
  2694                           
  2695                           ;stkvar	_mode @ sp[(0)+-2]
  2696  001EB0  0EFE               	movlw	-2
  2697  001EB2  B0E3               	btfsc	plusw1,0,c
  2698  001EB4  D002               	bra	u2375
  2699  001EB6  9C95               	bcf	3989,6,c	;volatile
  2700  001EB8  D001               	bra	u2376
  2701  001EBA                     u2375:
  2702  001EBA  8C95               	bsf	3989,6,c	;volatile
  2703  001EBC                     u2376:
  2704  001EBC  D0AD               	goto	l942
  2705  001EBE                     l3194:
  2706                           
  2707                           ;stkvar	_mode @ sp[(0)+-2]
  2708  001EBE  0EFE               	movlw	-2
  2709  001EC0  B0E3               	btfsc	plusw1,0,c
  2710  001EC2  D002               	bra	u2385
  2711  001EC4  9E95               	bcf	3989,7,c	;volatile
  2712  001EC6  D001               	bra	u2386
  2713  001EC8                     u2385:
  2714  001EC8  8E95               	bsf	3989,7,c	;volatile
  2715  001ECA                     u2386:
  2716  001ECA  D0A6               	goto	l942
  2717  001ECC                     l3196:
  2718                           
  2719                           ;stkvar	_mode @ sp[(0)+-2]
  2720  001ECC  0EFE               	movlw	-2
  2721  001ECE  B0E3               	btfsc	plusw1,0,c
  2722  001ED0  D002               	bra	u2395
  2723  001ED2  9093               	bcf	3987,0,c	;volatile
  2724  001ED4  D001               	bra	u2396
  2725  001ED6                     u2395:
  2726  001ED6  8093               	bsf	3987,0,c	;volatile
  2727  001ED8                     u2396:
  2728  001ED8  D09F               	goto	l942
  2729  001EDA                     l3198:
  2730                           
  2731                           ;stkvar	_mode @ sp[(0)+-2]
  2732  001EDA  0EFE               	movlw	-2
  2733  001EDC  B0E3               	btfsc	plusw1,0,c
  2734  001EDE  D002               	bra	u2405
  2735  001EE0  9293               	bcf	3987,1,c	;volatile
  2736  001EE2  D001               	bra	u2406
  2737  001EE4                     u2405:
  2738  001EE4  8293               	bsf	3987,1,c	;volatile
  2739  001EE6                     u2406:
  2740  001EE6  D098               	goto	l942
  2741  001EE8                     l3200:
  2742                           
  2743                           ;stkvar	_mode @ sp[(0)+-2]
  2744  001EE8  0EFE               	movlw	-2
  2745  001EEA  B0E3               	btfsc	plusw1,0,c
  2746  001EEC  D002               	bra	u2415
  2747  001EEE  9493               	bcf	3987,2,c	;volatile
  2748  001EF0  D001               	bra	u2416
  2749  001EF2                     u2415:
  2750  001EF2  8493               	bsf	3987,2,c	;volatile
  2751  001EF4                     u2416:
  2752  001EF4  D091               	goto	l942
  2753  001EF6                     l3202:
  2754                           
  2755                           ;stkvar	_mode @ sp[(0)+-2]
  2756  001EF6  0EFE               	movlw	-2
  2757  001EF8  B0E3               	btfsc	plusw1,0,c
  2758  001EFA  D002               	bra	u2425
  2759  001EFC  9693               	bcf	3987,3,c	;volatile
  2760  001EFE  D001               	bra	u2426
  2761  001F00                     u2425:
  2762  001F00  8693               	bsf	3987,3,c	;volatile
  2763  001F02                     u2426:
  2764  001F02  D08A               	goto	l942
  2765  001F04                     l3204:
  2766                           
  2767                           ;stkvar	_mode @ sp[(0)+-2]
  2768  001F04  0EFE               	movlw	-2
  2769  001F06  B0E3               	btfsc	plusw1,0,c
  2770  001F08  D002               	bra	u2435
  2771  001F0A  9893               	bcf	3987,4,c	;volatile
  2772  001F0C  D001               	bra	u2436
  2773  001F0E                     u2435:
  2774  001F0E  8893               	bsf	3987,4,c	;volatile
  2775  001F10                     u2436:
  2776  001F10  D083               	goto	l942
  2777  001F12                     l3206:
  2778                           
  2779                           ;stkvar	_mode @ sp[(0)+-2]
  2780  001F12  0EFE               	movlw	-2
  2781  001F14  B0E3               	btfsc	plusw1,0,c
  2782  001F16  D002               	bra	u2445
  2783  001F18  9A93               	bcf	3987,5,c	;volatile
  2784  001F1A  D001               	bra	u2446
  2785  001F1C                     u2445:
  2786  001F1C  8A93               	bsf	3987,5,c	;volatile
  2787  001F1E                     u2446:
  2788  001F1E  D07C               	goto	l942
  2789  001F20                     l3208:
  2790                           
  2791                           ;stkvar	_mode @ sp[(0)+-2]
  2792  001F20  0EFE               	movlw	-2
  2793  001F22  B0E3               	btfsc	plusw1,0,c
  2794  001F24  D002               	bra	u2455
  2795  001F26  9C93               	bcf	3987,6,c	;volatile
  2796  001F28  D001               	bra	u2456
  2797  001F2A                     u2455:
  2798  001F2A  8C93               	bsf	3987,6,c	;volatile
  2799  001F2C                     u2456:
  2800  001F2C  D075               	goto	l942
  2801  001F2E                     l3210:
  2802                           
  2803                           ;stkvar	_mode @ sp[(0)+-2]
  2804  001F2E  0EFE               	movlw	-2
  2805  001F30  B0E3               	btfsc	plusw1,0,c
  2806  001F32  D002               	bra	u2465
  2807  001F34  9E93               	bcf	3987,7,c	;volatile
  2808  001F36  D001               	bra	u2466
  2809  001F38                     u2465:
  2810  001F38  8E93               	bsf	3987,7,c	;volatile
  2811  001F3A                     u2466:
  2812  001F3A  D06E               	goto	l942
  2813  001F3C                     l3214:
  2814                           
  2815                           ;stkvar	_pin @ sp[(0)+-1]
  2816  001F3C  0EFF               	movlw	-1
  2817  001F3E  50E3               	movf	plusw1,w,c
  2818                           
  2819                           ; Switch size 1, requested type "space"
  2820                           ; Number of cases is 36, Range of values is 1 to 40
  2821                           ; switch strategies available:
  2822                           ; Name         Instructions Cycles
  2823                           ; simple_byte          109    55 (average)
  2824                           ;	Chosen strategy is simple_byte
  2825  001F40  0A01               	xorlw	1	; case 1
  2826  001F42  B4D8               	btfsc	status,2,c
  2827  001F44  D6FF               	goto	l3140
  2828  001F46  0A03               	xorlw	3	; case 2
  2829  001F48  B4D8               	btfsc	status,2,c
  2830  001F4A  D703               	goto	l3142
  2831  001F4C  0A01               	xorlw	1	; case 3
  2832  001F4E  B4D8               	btfsc	status,2,c
  2833  001F50  D707               	goto	l3144
  2834  001F52  0A07               	xorlw	7	; case 4
  2835  001F54  B4D8               	btfsc	status,2,c
  2836  001F56  D70B               	goto	l3146
  2837  001F58  0A01               	xorlw	1	; case 5
  2838  001F5A  B4D8               	btfsc	status,2,c
  2839  001F5C  D70F               	goto	l3148
  2840  001F5E  0A03               	xorlw	3	; case 6
  2841  001F60  B4D8               	btfsc	status,2,c
  2842  001F62  D713               	goto	l3150
  2843  001F64  0A01               	xorlw	1	; case 7
  2844  001F66  B4D8               	btfsc	status,2,c
  2845  001F68  D717               	goto	l3152
  2846  001F6A  0A0F               	xorlw	15	; case 8
  2847  001F6C  B4D8               	btfsc	status,2,c
  2848  001F6E  D71B               	goto	l3154
  2849  001F70  0A01               	xorlw	1	; case 9
  2850  001F72  B4D8               	btfsc	status,2,c
  2851  001F74  D71F               	goto	l3156
  2852  001F76  0A03               	xorlw	3	; case 10
  2853  001F78  B4D8               	btfsc	status,2,c
  2854  001F7A  D723               	goto	l3158
  2855  001F7C  0A07               	xorlw	7	; case 13
  2856  001F7E  B4D8               	btfsc	status,2,c
  2857  001F80  D727               	goto	l3160
  2858  001F82  0A03               	xorlw	3	; case 14
  2859  001F84  B4D8               	btfsc	status,2,c
  2860  001F86  D72B               	goto	l3162
  2861  001F88  0A01               	xorlw	1	; case 15
  2862  001F8A  B4D8               	btfsc	status,2,c
  2863  001F8C  D72F               	goto	l3164
  2864  001F8E  0A1F               	xorlw	31	; case 16
  2865  001F90  B4D8               	btfsc	status,2,c
  2866  001F92  D733               	goto	l3166
  2867  001F94  0A01               	xorlw	1	; case 17
  2868  001F96  B4D8               	btfsc	status,2,c
  2869  001F98  D737               	goto	l3168
  2870  001F9A  0A03               	xorlw	3	; case 18
  2871  001F9C  B4D8               	btfsc	status,2,c
  2872  001F9E  D73B               	goto	l3170
  2873  001FA0  0A01               	xorlw	1	; case 19
  2874  001FA2  B4D8               	btfsc	status,2,c
  2875  001FA4  D73F               	goto	l3172
  2876  001FA6  0A07               	xorlw	7	; case 20
  2877  001FA8  B4D8               	btfsc	status,2,c
  2878  001FAA  D743               	goto	l3174
  2879  001FAC  0A01               	xorlw	1	; case 21
  2880  001FAE  B4D8               	btfsc	status,2,c
  2881  001FB0  D747               	goto	l3176
  2882  001FB2  0A03               	xorlw	3	; case 22
  2883  001FB4  B4D8               	btfsc	status,2,c
  2884  001FB6  D74B               	goto	l3178
  2885  001FB8  0A01               	xorlw	1	; case 23
  2886  001FBA  B4D8               	btfsc	status,2,c
  2887  001FBC  D74F               	goto	l3180
  2888  001FBE  0A0F               	xorlw	15	; case 24
  2889  001FC0  B4D8               	btfsc	status,2,c
  2890  001FC2  D753               	goto	l3182
  2891  001FC4  0A01               	xorlw	1	; case 25
  2892  001FC6  B4D8               	btfsc	status,2,c
  2893  001FC8  D757               	goto	l3184
  2894  001FCA  0A03               	xorlw	3	; case 26
  2895  001FCC  B4D8               	btfsc	status,2,c
  2896  001FCE  D75B               	goto	l3186
  2897  001FD0  0A01               	xorlw	1	; case 27
  2898  001FD2  B4D8               	btfsc	status,2,c
  2899  001FD4  D75F               	goto	l3188
  2900  001FD6  0A07               	xorlw	7	; case 28
  2901  001FD8  B4D8               	btfsc	status,2,c
  2902  001FDA  D763               	goto	l3190
  2903  001FDC  0A01               	xorlw	1	; case 29
  2904  001FDE  B4D8               	btfsc	status,2,c
  2905  001FE0  D767               	goto	l3192
  2906  001FE2  0A03               	xorlw	3	; case 30
  2907  001FE4  B4D8               	btfsc	status,2,c
  2908  001FE6  D76B               	goto	l3194
  2909  001FE8  0A3F               	xorlw	63	; case 33
  2910  001FEA  B4D8               	btfsc	status,2,c
  2911  001FEC  D76F               	goto	l3196
  2912  001FEE  0A03               	xorlw	3	; case 34
  2913  001FF0  B4D8               	btfsc	status,2,c
  2914  001FF2  D773               	goto	l3198
  2915  001FF4  0A01               	xorlw	1	; case 35
  2916  001FF6  B4D8               	btfsc	status,2,c
  2917  001FF8  D777               	goto	l3200
  2918  001FFA  0A07               	xorlw	7	; case 36
  2919  001FFC  B4D8               	btfsc	status,2,c
  2920  001FFE  D77B               	goto	l3202
  2921  002000  0A01               	xorlw	1	; case 37
  2922  002002  B4D8               	btfsc	status,2,c
  2923  002004  D77F               	goto	l3204
  2924  002006  0A03               	xorlw	3	; case 38
  2925  002008  B4D8               	btfsc	status,2,c
  2926  00200A  D783               	goto	l3206
  2927  00200C  0A01               	xorlw	1	; case 39
  2928  00200E  B4D8               	btfsc	status,2,c
  2929  002010  D787               	goto	l3208
  2930  002012  0A0F               	xorlw	15	; case 40
  2931  002014  B4D8               	btfsc	status,2,c
  2932  002016  D78B               	goto	l3210
  2933  002018                     l942:
  2934                           
  2935                           ; _pinMode: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsi
      +                          ze = 2, vargsize = 0
  2936  002018  52E5               	movf	postdec1,f,c
  2937  00201A  52E5               	movf	postdec1,f,c
  2938  00201C  0012               	return		;funcret
  2939  00201E                     __end_of_pinMode:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           intcon	equ	0xFF2
  2946                           postinc0	equ	0xFEE
  2947                           fsr0h	equ	0xFEA
  2948                           fsr0l	equ	0xFE9
  2949                           wreg	equ	0xFE8
  2950                           postinc1	equ	0xFE6
  2951                           postdec1	equ	0xFE5
  2952                           plusw1	equ	0xFE3
  2953                           fsr1h	equ	0xFE2
  2954                           fsr1l	equ	0xFE1
  2955                           indf2	equ	0xFDF
  2956                           postinc2	equ	0xFDE
  2957                           postdec2	equ	0xFDD
  2958                           fsr2h	equ	0xFDA
  2959                           fsr2l	equ	0xFD9
  2960                           status	equ	0xFD8
  2961                           
  2962 ;; *************** function _SPI_begin *****************
  2963 ;; Defined at:
  2964 ;;		line 208 in file "../../../RF24_c/utility/XC8/spi.c"
  2965 ;; Parameters:    Size  Location     Type
  2966 ;;		None
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;		None
  2969 ;; Return value:  Size  Location     Type
  2970 ;;                  1  [STACK] void 
  2971 ;; Registers used:
  2972 ;;		wreg, status,2
  2973 ;; Tracked objects:
  2974 ;;		On entry : 0/0
  2975 ;;		On exit  : 0/0
  2976 ;;		Unchanged: 0/0
  2977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2982 ;;Total ram usage:        0 bytes
  2983 ;; Hardware stack levels used:    1
  2984 ;; Hardware stack levels required when called:    1
  2985 ;; This function calls:
  2986 ;;		Nothing
  2987 ;; This function is called by:
  2988 ;;		_RF24_begin
  2989 ;; This function uses a reentrant model
  2990 ;;
  2991                           
  2992                           	psect	text7
  2993  004FEE                     __ptext7:
  2994                           	opt stack 0
  2995  004FEE                     _SPI_begin:
  2996                           	opt stack 27
  2997                           
  2998                           ;spi.c: 211: TRISCbits.TRISC4=1;
  2999                           
  3000                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
  3001                           ;incstack = 0
  3002  004FEE  8894               	bsf	3988,4,c	;volatile
  3003                           
  3004                           ;spi.c: 213: TRISCbits.TRISC3=0;
  3005  004FF0  9694               	bcf	3988,3,c	;volatile
  3006                           
  3007                           ;spi.c: 215: TRISCbits.TRISC5=0;
  3008  004FF2  9A94               	bcf	3988,5,c	;volatile
  3009                           
  3010                           ;spi.c: 217: SSPCON1bits.SSPEN=0;
  3011  004FF4  9AC6               	bcf	4038,5,c	;volatile
  3012                           
  3013                           ;spi.c: 218: SSPSTATbits.CKE=1;
  3014  004FF6  8CC7               	bsf	4039,6,c	;volatile
  3015                           
  3016                           ;spi.c: 219: SSPCON1bits.CKP=0;
  3017  004FF8  98C6               	bcf	4038,4,c	;volatile
  3018                           
  3019                           ;spi.c: 220: SSPSTATbits.SMP=0;
  3020  004FFA  9EC7               	bcf	4039,7,c	;volatile
  3021                           
  3022                           ;spi.c: 221: SSPCON1bits.SSPM=1;
  3023  004FFC  50C6               	movf	4038,w,c	;volatile
  3024  004FFE  0BF0               	andlw	-16
  3025  005000  0901               	iorlw	1
  3026  005002  6EC6               	movwf	4038,c	;volatile
  3027                           
  3028                           ;spi.c: 222: SSPCON1bits.SSPEN=1;
  3029  005004  8AC6               	bsf	4038,5,c	;volatile
  3030                           
  3031                           ; _SPI_begin: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, arg
      +                          size = 0, vargsize = 0
  3032  005006  0012               	return		;funcret
  3033  005008                     __end_of_SPI_begin:
  3034                           	opt stack 0
  3035                           tblptru	equ	0xFF8
  3036                           tblptrh	equ	0xFF7
  3037                           tblptrl	equ	0xFF6
  3038                           tablat	equ	0xFF5
  3039                           intcon	equ	0xFF2
  3040                           postinc0	equ	0xFEE
  3041                           fsr0h	equ	0xFEA
  3042                           fsr0l	equ	0xFE9
  3043                           wreg	equ	0xFE8
  3044                           postinc1	equ	0xFE6
  3045                           postdec1	equ	0xFE5
  3046                           plusw1	equ	0xFE3
  3047                           fsr1h	equ	0xFE2
  3048                           fsr1l	equ	0xFE1
  3049                           indf2	equ	0xFDF
  3050                           postinc2	equ	0xFDE
  3051                           postdec2	equ	0xFDD
  3052                           fsr2h	equ	0xFDA
  3053                           fsr2l	equ	0xFD9
  3054                           status	equ	0xFD8
  3055                           
  3056 ;; *************** function _RF24_toggle_features_d *****************
  3057 ;; Defined at:
  3058 ;;		line 1253 in file "../../../RF24_c/RF24_c.c"
  3059 ;; Parameters:    Size  Location     Type
  3060 ;;  rf              2  [STACK] PTR struct RF24
  3061 ;;		 -> radio(22), 
  3062 ;; Auto vars:     Size  Location     Type
  3063 ;;		None
  3064 ;; Return value:  Size  Location     Type
  3065 ;;                  1  [STACK] void 
  3066 ;; Registers used:
  3067 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
  3068 ;; Tracked objects:
  3069 ;;		On entry : 0/0
  3070 ;;		On exit  : 0/0
  3071 ;;		Unchanged: 0/0
  3072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3077 ;;Total ram usage:        0 bytes
  3078 ;; Hardware stack levels used:    1
  3079 ;; Hardware stack levels required when called:    4
  3080 ;; This function calls:
  3081 ;;		_RF24_beginTransaction
  3082 ;;		_RF24_endTransaction
  3083 ;;		_SPI_transfer
  3084 ;; This function is called by:
  3085 ;;		_RF24_begin
  3086 ;; This function uses a reentrant model
  3087 ;;
  3088                           
  3089                           	psect	text8
  3090  004F4C                     __ptext8:
  3091                           	opt stack 0
  3092  004F4C                     _RF24_toggle_features_d:
  3093                           	opt stack 24
  3094                           
  3095                           ;RF24_c.c: 1255: RF24_beginTransaction(rf);
  3096                           ;stkvar	_rf @ sp[(0)+-2]
  3097                           
  3098                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  3099                           ;incstack = 0
  3100  004F4C  0EFE               	movlw	-2
  3101  004F4E  CFE3 FFE6          	movff	plusw1,postinc1
  3102  004F52  CFE3 FFE6          	movff	plusw1,postinc1
  3103  004F56  EC28  F028         	call	_RF24_beginTransaction	;wreg free
  3104                           
  3105                           ;RF24_c.c: 1256: SPI_transfer( 0x50 );
  3106  004F5A  0E50               	movlw	80
  3107  004F5C  6EE6               	movwf	postinc1,c
  3108  004F5E  EC40  F028         	call	_SPI_transfer	;wreg free
  3109                           
  3110                           ;RF24_c.c: 1257: SPI_transfer( 0x73 );
  3111  004F62  0E73               	movlw	115
  3112  004F64  6EE6               	movwf	postinc1,c
  3113  004F66  EC40  F028         	call	_SPI_transfer	;wreg free
  3114                           
  3115                           ;RF24_c.c: 1258: RF24_endTransaction(rf);
  3116                           ;stkvar	_rf @ sp[(0)+-2]
  3117  004F6A  0EFE               	movlw	-2
  3118  004F6C  CFE3 FFE6          	movff	plusw1,postinc1
  3119  004F70  CFE3 FFE6          	movff	plusw1,postinc1
  3120  004F74  EC1C  F028         	call	_RF24_endTransaction	;wreg free
  3121                           
  3122                           ; _RF24_toggle_features_d: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 2, argsize = 2, vargsize = 0
  3123  004F78  52E5               	movf	postdec1,f,c
  3124  004F7A  52E5               	movf	postdec1,f,c
  3125  004F7C  0012               	return		;funcret
  3126  004F7E                     __end_of_RF24_toggle_features_d:
  3127                           	opt stack 0
  3128                           tblptru	equ	0xFF8
  3129                           tblptrh	equ	0xFF7
  3130                           tblptrl	equ	0xFF6
  3131                           tablat	equ	0xFF5
  3132                           intcon	equ	0xFF2
  3133                           postinc0	equ	0xFEE
  3134                           fsr0h	equ	0xFEA
  3135                           fsr0l	equ	0xFE9
  3136                           wreg	equ	0xFE8
  3137                           postinc1	equ	0xFE6
  3138                           postdec1	equ	0xFE5
  3139                           plusw1	equ	0xFE3
  3140                           fsr1h	equ	0xFE2
  3141                           fsr1l	equ	0xFE1
  3142                           indf2	equ	0xFDF
  3143                           postinc2	equ	0xFDE
  3144                           postdec2	equ	0xFDD
  3145                           fsr2h	equ	0xFDA
  3146                           fsr2l	equ	0xFD9
  3147                           status	equ	0xFD8
  3148                           
  3149 ;; *************** function _RF24_setDataRate *****************
  3150 ;; Defined at:
  3151 ;;		line 1440 in file "../../../RF24_c/RF24_c.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;  rf              2  [STACK] PTR struct RF24
  3154 ;;		 -> radio(22), 
  3155 ;;  speed           1  [STACK] enum E3424
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;  setup           1  [STACK] unsigned char 
  3158 ;;  result          1  [STACK] unsigned char 
  3159 ;; Return value:  Size  Location     Type
  3160 ;;                  1  [STACK] unsigned char 
  3161 ;; Registers used:
  3162 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
  3163 ;; Tracked objects:
  3164 ;;		On entry : 0/0
  3165 ;;		On exit  : 0/0
  3166 ;;		Unchanged: 0/0
  3167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3172 ;;Total ram usage:        0 bytes
  3173 ;; Hardware stack levels used:    1
  3174 ;; Hardware stack levels required when called:    5
  3175 ;; This function calls:
  3176 ;;		_RF24_read_register_d
  3177 ;;		_RF24_write_register_d
  3178 ;; This function is called by:
  3179 ;;		_RF24_begin
  3180 ;; This function uses a reentrant model
  3181 ;;
  3182                           
  3183                           	psect	text9
  3184  003A9A                     __ptext9:
  3185                           	opt stack 0
  3186  003A9A                     _RF24_setDataRate:
  3187                           	opt stack 0
  3188                           
  3189                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  3190  003A9A  52E6               	movf	postinc1,f,c
  3191  003A9C  52E6               	movf	postinc1,f,c
  3192                           
  3193                           ;RF24_c.c: 1442: uint8_t result = 0;
  3194                           ;stkvar	_result @ sp[(-2)+1]
  3195                           
  3196                           ;incstack = 0
  3197  003A9E  0EFF               	movlw	-1
  3198  003AA0  6AE3               	clrf	plusw1,c
  3199                           
  3200                           ;RF24_c.c: 1443: uint8_t setup = RF24_read_register_d(rf,0x06) ;
  3201  003AA2  0E06               	movlw	6
  3202  003AA4  6EE6               	movwf	postinc1,c
  3203                           
  3204                           ;stkvar	_rf @ sp[(-3)+-2]
  3205  003AA6  0EFB               	movlw	-5
  3206  003AA8  CFE3 FFE6          	movff	plusw1,postinc1
  3207  003AAC  CFE3 FFE6          	movff	plusw1,postinc1
  3208  003AB0  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  3209                           
  3210                           ;stkvar	_setup @ sp[(-2)+0]
  3211  003AB4  0EFE               	movlw	-2
  3212  003AB6  C050  FFE3         	movff	btemp,plusw1
  3213                           
  3214                           ;RF24_c.c: 1446: setup &= ~((1<<(5)) | (1<<(3))) ;
  3215                           ;stkvar	_setup @ sp[(-2)+0]
  3216  003ABA  0EFE               	movlw	-2
  3217  003ABC  CFE3 F050          	movff	plusw1,btemp
  3218  003AC0  0ED7               	movlw	215
  3219  003AC2  1650               	andwf	btemp,f,c
  3220  003AC4  0EFE               	movlw	-2
  3221  003AC6  C050  FFE3         	movff	btemp,plusw1
  3222                           
  3223                           ;RF24_c.c: 1451: rf->txDelay=85;
  3224                           ;stkvar	_rf @ sp[(-2)+-2]
  3225  003ACA  0EFC               	movlw	-4
  3226  003ACC  CFE3 F051          	movff	plusw1,btemp+1
  3227  003AD0  0EFD               	movlw	-3
  3228  003AD2  CFE3 F052          	movff	plusw1,btemp+2
  3229  003AD6  0E0D               	movlw	13
  3230  003AD8  2451               	addwf	btemp+1,w,c
  3231  003ADA  6ED9               	movwf	fsr2l,c
  3232  003ADC  0E00               	movlw	0
  3233  003ADE  2052               	addwfc	btemp+2,w,c
  3234  003AE0  6EDA               	movwf	fsr2h,c
  3235  003AE2  0E55               	movlw	85
  3236  003AE4  6EDE               	movwf	postinc2,c
  3237  003AE6  0E00               	movlw	0
  3238  003AE8  6EDE               	movwf	postinc2,c
  3239  003AEA  0E00               	movlw	0
  3240  003AEC  6EDE               	movwf	postinc2,c
  3241  003AEE  0E00               	movlw	0
  3242  003AF0  6EDD               	movwf	postdec2,c
  3243                           
  3244                           ;RF24_c.c: 1453: if( speed == RF24_250KBPS )
  3245                           ;stkvar	_speed @ sp[(-2)+-3]
  3246  003AF2  0EFB               	movlw	-5
  3247  003AF4  CFE3 F050          	movff	plusw1,btemp
  3248  003AF8  0E02               	movlw	2
  3249  003AFA  1850               	xorwf	btemp,w,c
  3250  003AFC  A4D8               	btfss	status,2,c
  3251  003AFE  D010               	goto	l3236
  3252                           
  3253                           ;RF24_c.c: 1454: {
  3254                           ;RF24_c.c: 1457: setup |= (1<<(5)) ;
  3255                           ;stkvar	_setup @ sp[(-2)+0]
  3256  003B00  0EFE               	movlw	-2
  3257  003B02  8AE3               	bsf	plusw1,5,c
  3258                           
  3259                           ;RF24_c.c: 1461: rf->txDelay=155;
  3260                           ;stkvar	_rf @ sp[(-2)+-2]
  3261  003B04  0EFC               	movlw	-4
  3262  003B06  CFE3 F051          	movff	plusw1,btemp+1
  3263  003B0A  0EFD               	movlw	-3
  3264  003B0C  CFE3 F052          	movff	plusw1,btemp+2
  3265  003B10  0E0D               	movlw	13
  3266  003B12  2451               	addwf	btemp+1,w,c
  3267  003B14  6ED9               	movwf	fsr2l,c
  3268  003B16  0E00               	movlw	0
  3269  003B18  2052               	addwfc	btemp+2,w,c
  3270  003B1A  6EDA               	movwf	fsr2h,c
  3271  003B1C  0E9B               	movlw	155
  3272  003B1E  D013               	goto	L2
  3273  003B20                     l3236:
  3274                           
  3275                           ;RF24_c.c: 1464: else
  3276                           ;RF24_c.c: 1465: {
  3277                           ;RF24_c.c: 1468: if ( speed == RF24_2MBPS )
  3278                           ;stkvar	_speed @ sp[(-2)+-3]
  3279  003B20  0EFB               	movlw	-5
  3280  003B22  04E3               	decf	plusw1,w,c
  3281  003B24  A4D8               	btfss	status,2,c
  3282  003B26  D016               	goto	l3242
  3283                           
  3284                           ;RF24_c.c: 1469: {
  3285                           ;RF24_c.c: 1470: setup |= (1<<(3));
  3286                           ;stkvar	_setup @ sp[(-2)+0]
  3287  003B28  0EFE               	movlw	-2
  3288  003B2A  86E3               	bsf	plusw1,3,c
  3289                           
  3290                           ;RF24_c.c: 1474: rf->txDelay=65;
  3291                           ;stkvar	_rf @ sp[(-2)+-2]
  3292  003B2C  0EFC               	movlw	-4
  3293  003B2E  CFE3 F051          	movff	plusw1,btemp+1
  3294  003B32  0EFD               	movlw	-3
  3295  003B34  CFE3 F052          	movff	plusw1,btemp+2
  3296  003B38  0E0D               	movlw	13
  3297  003B3A  2451               	addwf	btemp+1,w,c
  3298  003B3C  6ED9               	movwf	fsr2l,c
  3299  003B3E  0E00               	movlw	0
  3300  003B40  2052               	addwfc	btemp+2,w,c
  3301  003B42  6EDA               	movwf	fsr2h,c
  3302  003B44  0E41               	movlw	65
  3303  003B46                     L2:
  3304  003B46  6EDE               	movwf	postinc2,c
  3305  003B48  0E00               	movlw	0
  3306  003B4A  6EDE               	movwf	postinc2,c
  3307  003B4C  0E00               	movlw	0
  3308  003B4E  6EDE               	movwf	postinc2,c
  3309  003B50  0E00               	movlw	0
  3310  003B52  6EDD               	movwf	postdec2,c
  3311  003B54                     l3242:
  3312                           
  3313                           ;RF24_c.c: 1476: }
  3314                           ;RF24_c.c: 1477: }
  3315                           ;RF24_c.c: 1478: RF24_write_register_d(rf,0x06,setup);
  3316                           ;stkvar	_setup @ sp[(-2)+0]
  3317  003B54  0EFE               	movlw	-2
  3318  003B56  50E3               	movf	plusw1,w,c
  3319  003B58  6EE6               	movwf	postinc1,c
  3320  003B5A  0E06               	movlw	6
  3321  003B5C  6EE6               	movwf	postinc1,c
  3322                           
  3323                           ;stkvar	_rf @ sp[(-4)+-2]
  3324  003B5E  0EFA               	movlw	-6
  3325  003B60  CFE3 FFE6          	movff	plusw1,postinc1
  3326  003B64  CFE3 FFE6          	movff	plusw1,postinc1
  3327  003B68  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  3328                           
  3329                           ;RF24_c.c: 1481: if ( RF24_read_register_d(rf,0x06) == setup )
  3330                           ;stkvar	_setup @ sp[(-2)+0]
  3331  003B6C  0E06               	movlw	6
  3332  003B6E  6EE6               	movwf	postinc1,c
  3333                           
  3334                           ;stkvar	_rf @ sp[(-3)+-2]
  3335  003B70  0EFB               	movlw	-5
  3336  003B72  CFE3 FFE6          	movff	plusw1,postinc1
  3337  003B76  CFE3 FFE6          	movff	plusw1,postinc1
  3338  003B7A  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  3339  003B7E  0EFE               	movlw	-2
  3340  003B80  50E3               	movf	plusw1,w,c
  3341  003B82  1850               	xorwf	btemp,w,c
  3342  003B84  A4D8               	btfss	status,2,c
  3343  003B86  D003               	goto	l3248
  3344                           
  3345                           ;RF24_c.c: 1482: {
  3346                           ;RF24_c.c: 1483: result = 1;
  3347                           ;stkvar	_result @ sp[(-2)+1]
  3348  003B88  0EFF               	movlw	-1
  3349  003B8A  6AE3               	clrf	plusw1,c
  3350  003B8C  2AE3               	incf	plusw1,f,c
  3351  003B8E                     l3248:
  3352                           
  3353                           ;RF24_c.c: 1484: }
  3354                           ;RF24_c.c: 1485: return result;
  3355                           ;stkvar	_result @ sp[(-2)+1]
  3356  003B8E  0EFF               	movlw	-1
  3357  003B90  CFE3 F050          	movff	plusw1,btemp
  3358                           
  3359                           ; _RF24_setDataRate: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           3, argsize = 3, vargsize = 0
  3360  003B94  0EFB               	movlw	251
  3361  003B96  26E1               	addwf	fsr1l,f,c
  3362  003B98  0EFF               	movlw	255
  3363  003B9A  22E2               	addwfc	fsr1h,f,c
  3364  003B9C  0012               	return		;funcret
  3365  003B9E                     __end_of_RF24_setDataRate:
  3366                           	opt stack 0
  3367                           tblptru	equ	0xFF8
  3368                           tblptrh	equ	0xFF7
  3369                           tblptrl	equ	0xFF6
  3370                           tablat	equ	0xFF5
  3371                           intcon	equ	0xFF2
  3372                           postinc0	equ	0xFEE
  3373                           fsr0h	equ	0xFEA
  3374                           fsr0l	equ	0xFE9
  3375                           wreg	equ	0xFE8
  3376                           postinc1	equ	0xFE6
  3377                           postdec1	equ	0xFE5
  3378                           plusw1	equ	0xFE3
  3379                           fsr1h	equ	0xFE2
  3380                           fsr1l	equ	0xFE1
  3381                           indf2	equ	0xFDF
  3382                           postinc2	equ	0xFDE
  3383                           postdec2	equ	0xFDD
  3384                           fsr2h	equ	0xFDA
  3385                           fsr2l	equ	0xFD9
  3386                           status	equ	0xFD8
  3387                           
  3388 ;; *************** function _RF24N_init *****************
  3389 ;; Defined at:
  3390 ;;		line 84 in file "../../RF24Network_c.c"
  3391 ;; Parameters:    Size  Location     Type
  3392 ;;  rn              2  [STACK] PTR struct .
  3393 ;;		 -> network(372), 
  3394 ;;  _radio          2  [STACK] PTR struct RF24
  3395 ;;		 -> radio(22), 
  3396 ;; Auto vars:     Size  Location     Type
  3397 ;;		None
  3398 ;; Return value:  Size  Location     Type
  3399 ;;                  1  [STACK] void 
  3400 ;; Registers used:
  3401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2, btemp+10, btemp+11
  3402 ;; Tracked objects:
  3403 ;;		On entry : 0/0
  3404 ;;		On exit  : 0/0
  3405 ;;		Unchanged: 0/0
  3406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3411 ;;Total ram usage:        0 bytes
  3412 ;; Hardware stack levels used:    1
  3413 ;; Hardware stack levels required when called:    1
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_setup
  3418 ;; This function uses a reentrant model
  3419 ;;
  3420                           
  3421                           	psect	text10
  3422  0035B2                     __ptext10:
  3423                           	opt stack 0
  3424  0035B2                     _RF24N_init:
  3425                           	opt stack 28
  3426                           
  3427                           ;RF24Network_c.c: 86: rn->radio=_radio;
  3428                           ;stkvar	__radio @ sp[(0)+-4]
  3429                           
  3430                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  3431                           ;incstack = 0
  3432  0035B2  50E1               	movf	fsr1l,w,c
  3433  0035B4  0FFC               	addlw	-4
  3434  0035B6  6ED9               	movwf	fsr2l,c
  3435  0035B8  50E2               	movf	fsr1h,w,c
  3436  0035BA  6EDA               	movwf	fsr2h,c
  3437  0035BC  0EFF               	movlw	255
  3438  0035BE  22DA               	addwfc	fsr2h,f,c
  3439                           
  3440                           ;stkvar	_rn @ sp[(0)+-2]
  3441  0035C0  0EFE               	movlw	-2
  3442  0035C2  CFE3 F051          	movff	plusw1,btemp+1
  3443  0035C6  0EFF               	movlw	-1
  3444  0035C8  CFE3 F052          	movff	plusw1,btemp+2
  3445  0035CC  0E2F               	movlw	47
  3446  0035CE  2451               	addwf	btemp+1,w,c
  3447  0035D0  6EE9               	movwf	fsr0l,c
  3448  0035D2  0E00               	movlw	0
  3449  0035D4  2052               	addwfc	btemp+2,w,c
  3450  0035D6  6EEA               	movwf	fsr0h,c
  3451  0035D8  CFDE FFEE          	movff	postinc2,postinc0
  3452  0035DC  CFDD FFED          	movff	postdec2,postdec0
  3453                           
  3454                           ;RF24Network_c.c: 87: rn->next_frame= rn->frame_queue;
  3455                           ;stkvar	_rn @ sp[(0)+-2]
  3456  0035E0  0EFE               	movlw	-2
  3457  0035E2  50E3               	movf	plusw1,w,c
  3458  0035E4  0F3C               	addlw	60
  3459  0035E6  6E51               	movwf	btemp+1,c
  3460  0035E8  0EFF               	movlw	-1
  3461  0035EA  CFE3 F052          	movff	plusw1,btemp+2
  3462  0035EE  0E00               	movlw	0
  3463  0035F0  2252               	addwfc	btemp+2,f,c
  3464                           
  3465                           ;stkvar	_rn @ sp[(0)+-2]
  3466  0035F2  0EFE               	movlw	-2
  3467  0035F4  CFE3 F05A          	movff	plusw1,btemp+10
  3468  0035F8  0EFF               	movlw	-1
  3469  0035FA  CFE3 F05B          	movff	plusw1,btemp+11
  3470  0035FE  0ED6               	movlw	214
  3471  003600  245A               	addwf	btemp+10,w,c
  3472  003602  6ED9               	movwf	fsr2l,c
  3473  003604  0E00               	movlw	0
  3474  003606  205B               	addwfc	btemp+11,w,c
  3475  003608  6EDA               	movwf	fsr2h,c
  3476  00360A  C051  FFDE         	movff	btemp+1,postinc2
  3477  00360E  C052  FFDD         	movff	btemp+2,postdec2
  3478                           
  3479                           ;RF24Network_c.c: 89: rn->frag_queue.message_buffer=&rn->frag_queue_message_buffer[0];
  3480                           ;stkvar	_rn @ sp[(0)+-2]
  3481  003612  0EFE               	movlw	-2
  3482  003614  50E3               	movf	plusw1,w,c
  3483  003616  0FE4               	addlw	228
  3484  003618  6E51               	movwf	btemp+1,c
  3485  00361A  0EFF               	movlw	-1
  3486  00361C  CFE3 F052          	movff	plusw1,btemp+2
  3487  003620  0E00               	movlw	0
  3488  003622  2252               	addwfc	btemp+2,f,c
  3489                           
  3490                           ;stkvar	_rn @ sp[(0)+-2]
  3491  003624  0EFE               	movlw	-2
  3492  003626  CFE3 F05A          	movff	plusw1,btemp+10
  3493  00362A  0EFF               	movlw	-1
  3494  00362C  CFE3 F05B          	movff	plusw1,btemp+11
  3495  003630  0EE2               	movlw	226
  3496  003632  245A               	addwf	btemp+10,w,c
  3497  003634  6ED9               	movwf	fsr2l,c
  3498  003636  0E00               	movlw	0
  3499  003638  205B               	addwfc	btemp+11,w,c
  3500  00363A  6EDA               	movwf	fsr2h,c
  3501  00363C  C051  FFDE         	movff	btemp+1,postinc2
  3502  003640  C052  FFDD         	movff	btemp+2,postdec2
  3503                           
  3504                           ;RF24Network_c.c: 90: rn->frag_ptr = &rn->frag_queue;
  3505                           ;stkvar	_rn @ sp[(0)+-2]
  3506  003644  0EFE               	movlw	-2
  3507  003646  50E3               	movf	plusw1,w,c
  3508  003648  0FD8               	addlw	216
  3509  00364A  6E51               	movwf	btemp+1,c
  3510  00364C  0EFF               	movlw	-1
  3511  00364E  CFE3 F052          	movff	plusw1,btemp+2
  3512  003652  0E00               	movlw	0
  3513  003654  2252               	addwfc	btemp+2,f,c
  3514                           
  3515                           ;stkvar	_rn @ sp[(0)+-2]
  3516  003656  0EFE               	movlw	-2
  3517  003658  CFE3 F05A          	movff	plusw1,btemp+10
  3518  00365C  0EFF               	movlw	-1
  3519  00365E  CFE3 F05B          	movff	plusw1,btemp+11
  3520  003662  0E27               	movlw	39
  3521  003664  245A               	addwf	btemp+10,w,c
  3522  003666  6ED9               	movwf	fsr2l,c
  3523  003668  0E00               	movlw	0
  3524  00366A  205B               	addwfc	btemp+11,w,c
  3525  00366C  6EDA               	movwf	fsr2h,c
  3526  00366E  C051  FFDE         	movff	btemp+1,postinc2
  3527  003672  C052  FFDD         	movff	btemp+2,postdec2
  3528                           
  3529                           ;RF24Network_c.c: 92: rn->txTime=0;
  3530                           ;stkvar	_rn @ sp[(0)+-2]
  3531  003676  0EFE               	movlw	-2
  3532  003678  CFE3 F051          	movff	plusw1,btemp+1
  3533  00367C  0EFF               	movlw	-1
  3534  00367E  CFE3 F052          	movff	plusw1,btemp+2
  3535  003682  0E2B               	movlw	43
  3536  003684  2451               	addwf	btemp+1,w,c
  3537  003686  6ED9               	movwf	fsr2l,c
  3538  003688  0E00               	movlw	0
  3539  00368A  2052               	addwfc	btemp+2,w,c
  3540  00368C  6EDA               	movwf	fsr2h,c
  3541  00368E  6ADE               	clrf	postinc2,c
  3542  003690  6ADE               	clrf	postinc2,c
  3543  003692  6ADE               	clrf	postinc2,c
  3544  003694  6ADD               	clrf	postdec2,c
  3545                           
  3546                           ;RF24Network_c.c: 93: rn->networkFlags=0;
  3547                           ;stkvar	_rn @ sp[(0)+-2]
  3548  003696  0EFE               	movlw	-2
  3549  003698  CFE3 F051          	movff	plusw1,btemp+1
  3550  00369C  0EFF               	movlw	-1
  3551  00369E  CFE3 F052          	movff	plusw1,btemp+2
  3552  0036A2  0E2A               	movlw	42
  3553  0036A4  2451               	addwf	btemp+1,w,c
  3554  0036A6  6ED9               	movwf	fsr2l,c
  3555  0036A8  0E00               	movlw	0
  3556  0036AA  2052               	addwfc	btemp+2,w,c
  3557  0036AC  6EDA               	movwf	fsr2h,c
  3558  0036AE  0E00               	movlw	0
  3559  0036B0  6EDF               	movwf	indf2,c
  3560                           
  3561                           ;RF24Network_c.c: 94: rn->returnSysMsgs=0;
  3562                           ;stkvar	_rn @ sp[(0)+-2]
  3563  0036B2  0EFE               	movlw	-2
  3564  0036B4  CFE3 F051          	movff	plusw1,btemp+1
  3565  0036B8  0EFF               	movlw	-1
  3566  0036BA  CFE3 F052          	movff	plusw1,btemp+2
  3567  0036BE  0E29               	movlw	41
  3568  0036C0  2451               	addwf	btemp+1,w,c
  3569  0036C2  6ED9               	movwf	fsr2l,c
  3570  0036C4  0E00               	movlw	0
  3571  0036C6  2052               	addwfc	btemp+2,w,c
  3572  0036C8  6EDA               	movwf	fsr2h,c
  3573  0036CA  0E00               	movlw	0
  3574  0036CC  6EDF               	movwf	indf2,c
  3575                           
  3576                           ;RF24Network_c.c: 95: rn->multicastRelay=0;
  3577                           ;stkvar	_rn @ sp[(0)+-2]
  3578  0036CE  0EFE               	movlw	-2
  3579  0036D0  CFE3 FFD9          	movff	plusw1,fsr2l
  3580  0036D4  0EFF               	movlw	-1
  3581  0036D6  CFE3 FFDA          	movff	plusw1,fsr2h
  3582  0036DA  0E00               	movlw	0
  3583  0036DC  6EDF               	movwf	indf2,c
  3584                           
  3585                           ;RF24Network_c.c: 100: rn->max_frame_payload_size = 32-sizeof(RF24NetworkHeader);
  3586                           ;stkvar	_rn @ sp[(0)+-2]
  3587  0036DE  0EFE               	movlw	-2
  3588  0036E0  CFE3 F051          	movff	plusw1,btemp+1
  3589  0036E4  0EFF               	movlw	-1
  3590  0036E6  CFE3 F052          	movff	plusw1,btemp+2
  3591  0036EA  0E35               	movlw	53
  3592  0036EC  2451               	addwf	btemp+1,w,c
  3593  0036EE  6ED9               	movwf	fsr2l,c
  3594  0036F0  0E00               	movlw	0
  3595  0036F2  2052               	addwfc	btemp+2,w,c
  3596  0036F4  6EDA               	movwf	fsr2h,c
  3597  0036F6  0E18               	movlw	24
  3598  0036F8  6EDE               	movwf	postinc2,c
  3599  0036FA  0E00               	movlw	0
  3600  0036FC  6EDD               	movwf	postdec2,c
  3601                           
  3602                           ; _RF24N_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, ar
      +                          gsize = 4, vargsize = 0
  3603  0036FE  52E5               	movf	postdec1,f,c
  3604  003700  52E5               	movf	postdec1,f,c
  3605  003702  52E5               	movf	postdec1,f,c
  3606  003704  52E5               	movf	postdec1,f,c
  3607  003706  0012               	return		;funcret
  3608  003708                     __end_of_RF24N_init:
  3609                           	opt stack 0
  3610                           tblptru	equ	0xFF8
  3611                           tblptrh	equ	0xFF7
  3612                           tblptrl	equ	0xFF6
  3613                           tablat	equ	0xFF5
  3614                           intcon	equ	0xFF2
  3615                           postinc0	equ	0xFEE
  3616                           postdec0	equ	0xFED
  3617                           fsr0h	equ	0xFEA
  3618                           fsr0l	equ	0xFE9
  3619                           wreg	equ	0xFE8
  3620                           postinc1	equ	0xFE6
  3621                           postdec1	equ	0xFE5
  3622                           plusw1	equ	0xFE3
  3623                           fsr1h	equ	0xFE2
  3624                           fsr1l	equ	0xFE1
  3625                           indf2	equ	0xFDF
  3626                           postinc2	equ	0xFDE
  3627                           postdec2	equ	0xFDD
  3628                           fsr2h	equ	0xFDA
  3629                           fsr2l	equ	0xFD9
  3630                           status	equ	0xFD8
  3631                           
  3632 ;; *************** function _RF24N_begin_d *****************
  3633 ;; Defined at:
  3634 ;;		line 164 in file "../../RF24Network_c.c"
  3635 ;; Parameters:    Size  Location     Type
  3636 ;;  rn              2  [STACK] PTR struct .
  3637 ;;		 -> network(372), 
  3638 ;;  _channel        1  [STACK] unsigned char 
  3639 ;;  _node_addres    2  [STACK] unsigned int 
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;  i               1  [STACK] unsigned char 
  3642 ;;  retryVar        1  [STACK] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1  [STACK] void 
  3645 ;; Registers used:
  3646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp
      ++9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;Total ram usage:        0 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    7
  3659 ;; This function calls:
  3660 ;;		_RF24N_is_valid_address
  3661 ;;		_RF24N_pipe_address
  3662 ;;		_RF24N_setup_address
  3663 ;;		_RF24_enableDynamicPayloads
  3664 ;;		_RF24_isValid
  3665 ;;		_RF24_openReadingPipe_d
  3666 ;;		_RF24_setAutoAck_p
  3667 ;;		_RF24_setChannel
  3668 ;;		_RF24_setRetries
  3669 ;;		_RF24_startListening
  3670 ;;		___lwmod
  3671 ;;		___wmul
  3672 ;; This function is called by:
  3673 ;;		_setup
  3674 ;; This function uses a reentrant model
  3675 ;;
  3676                           
  3677                           	psect	text11
  3678  00201E                     __ptext11:
  3679                           	opt stack 0
  3680  00201E                     _RF24N_begin_d:
  3681                           	opt stack 0
  3682                           
  3683                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
  3684  00201E  52E6               	movf	postinc1,f,c
  3685  002020  52E6               	movf	postinc1,f,c
  3686                           
  3687                           ;RF24Network_c.c: 166: if (! RF24N_is_valid_address(rn, _node_address) )
  3688                           ;stkvar	__node_address @ sp[(-2)+-5]
  3689                           
  3690                           ;incstack = 0
  3691  002022  0EF9               	movlw	-7
  3692  002024  CFE3 FFE6          	movff	plusw1,postinc1
  3693  002028  CFE3 FFE6          	movff	plusw1,postinc1
  3694                           
  3695                           ;stkvar	_rn @ sp[(-4)+-2]
  3696  00202C  0EFA               	movlw	-6
  3697  00202E  CFE3 FFE6          	movff	plusw1,postinc1
  3698  002032  CFE3 FFE6          	movff	plusw1,postinc1
  3699  002036  ECF8  F023         	call	_RF24N_is_valid_address	;wreg free
  3700  00203A  5050               	movf	btemp,w,c
  3701  00203C  B4D8               	btfsc	status,2,c
  3702  00203E  D151               	goto	l202
  3703                           
  3704                           ;RF24Network_c.c: 169: rn->node_address = _node_address;
  3705                           ;stkvar	__node_address @ sp[(-2)+-5]
  3706  002040  50E1               	movf	fsr1l,w,c
  3707  002042  0FF9               	addlw	-7
  3708  002044  6ED9               	movwf	fsr2l,c
  3709  002046  50E2               	movf	fsr1h,w,c
  3710  002048  6EDA               	movwf	fsr2h,c
  3711  00204A  0EFF               	movlw	255
  3712  00204C  22DA               	addwfc	fsr2h,f,c
  3713                           
  3714                           ;stkvar	_rn @ sp[(-2)+-2]
  3715  00204E  0EFC               	movlw	-4
  3716  002050  CFE3 F051          	movff	plusw1,btemp+1
  3717  002054  0EFD               	movlw	-3
  3718  002056  CFE3 F052          	movff	plusw1,btemp+2
  3719  00205A  0E32               	movlw	50
  3720  00205C  2451               	addwf	btemp+1,w,c
  3721  00205E  6EE9               	movwf	fsr0l,c
  3722  002060  0E00               	movlw	0
  3723  002062  2052               	addwfc	btemp+2,w,c
  3724  002064  6EEA               	movwf	fsr0h,c
  3725  002066  CFDE FFEE          	movff	postinc2,postinc0
  3726  00206A  CFDD FFED          	movff	postdec2,postdec0
  3727                           
  3728                           ;RF24Network_c.c: 171: if ( ! RF24_isValid(rn->radio) ){
  3729                           ;stkvar	_rn @ sp[(-2)+-2]
  3730  00206E  0EFC               	movlw	-4
  3731  002070  CFE3 F051          	movff	plusw1,btemp+1
  3732  002074  0EFD               	movlw	-3
  3733  002076  CFE3 F052          	movff	plusw1,btemp+2
  3734  00207A  0E2F               	movlw	47
  3735  00207C  2451               	addwf	btemp+1,w,c
  3736  00207E  6ED9               	movwf	fsr2l,c
  3737  002080  0E00               	movlw	0
  3738  002082  2052               	addwfc	btemp+2,w,c
  3739  002084  6EDA               	movwf	fsr2h,c
  3740  002086  CFDE F051          	movff	postinc2,btemp+1
  3741  00208A  CFDD F052          	movff	postdec2,btemp+2
  3742  00208E  C051  FFE6         	movff	btemp+1,postinc1
  3743  002092  C052  FFE6         	movff	btemp+2,postinc1
  3744  002096  EC78  F026         	call	_RF24_isValid	;wreg free
  3745  00209A  5050               	movf	btemp,w,c
  3746  00209C  B4D8               	btfsc	status,2,c
  3747  00209E  D121               	goto	l202
  3748                           
  3749                           ;RF24Network_c.c: 173: }
  3750                           ;RF24Network_c.c: 176: if(_channel != 255){
  3751                           ;stkvar	__channel @ sp[(-2)+-3]
  3752  0020A0  0EFB               	movlw	-5
  3753  0020A2  28E3               	incf	plusw1,w,c
  3754  0020A4  B4D8               	btfsc	status,2,c
  3755  0020A6  D019               	goto	l3416
  3756                           
  3757                           ;RF24Network_c.c: 177: RF24_setChannel(rn->radio,_channel);
  3758                           ;stkvar	__channel @ sp[(-2)+-3]
  3759  0020A8  0EFB               	movlw	-5
  3760  0020AA  50E3               	movf	plusw1,w,c
  3761  0020AC  6EE6               	movwf	postinc1,c
  3762                           
  3763                           ;stkvar	_rn @ sp[(-3)+-2]
  3764  0020AE  0EFB               	movlw	-5
  3765  0020B0  CFE3 F051          	movff	plusw1,btemp+1
  3766  0020B4  0EFC               	movlw	-4
  3767  0020B6  CFE3 F052          	movff	plusw1,btemp+2
  3768  0020BA  0E2F               	movlw	47
  3769  0020BC  2451               	addwf	btemp+1,w,c
  3770  0020BE  6ED9               	movwf	fsr2l,c
  3771  0020C0  0E00               	movlw	0
  3772  0020C2  2052               	addwfc	btemp+2,w,c
  3773  0020C4  6EDA               	movwf	fsr2h,c
  3774  0020C6  CFDE F051          	movff	postinc2,btemp+1
  3775  0020CA  CFDD F052          	movff	postdec2,btemp+2
  3776  0020CE  C051  FFE6         	movff	btemp+1,postinc1
  3777  0020D2  C052  FFE6         	movff	btemp+2,postinc1
  3778  0020D6  ECDB  F025         	call	_RF24_setChannel	;wreg free
  3779  0020DA                     l3416:
  3780                           
  3781                           ;RF24Network_c.c: 178: }
  3782                           ;RF24Network_c.c: 180: RF24_setAutoAck_p(rn->radio,0,0);
  3783  0020DA  0E00               	movlw	0
  3784  0020DC  6EE6               	movwf	postinc1,c
  3785  0020DE  0E00               	movlw	0
  3786  0020E0  6EE6               	movwf	postinc1,c
  3787                           
  3788                           ;stkvar	_rn @ sp[(-4)+-2]
  3789  0020E2  0EFA               	movlw	-6
  3790  0020E4  CFE3 F051          	movff	plusw1,btemp+1
  3791  0020E8  0EFB               	movlw	-5
  3792  0020EA  CFE3 F052          	movff	plusw1,btemp+2
  3793  0020EE  0E2F               	movlw	47
  3794  0020F0  2451               	addwf	btemp+1,w,c
  3795  0020F2  6ED9               	movwf	fsr2l,c
  3796  0020F4  0E00               	movlw	0
  3797  0020F6  2052               	addwfc	btemp+2,w,c
  3798  0020F8  6EDA               	movwf	fsr2h,c
  3799  0020FA  CFDE F051          	movff	postinc2,btemp+1
  3800  0020FE  CFDD F052          	movff	postdec2,btemp+2
  3801  002102  C051  FFE6         	movff	btemp+1,postinc1
  3802  002106  C052  FFE6         	movff	btemp+2,postinc1
  3803  00210A  ECDC  F021         	call	_RF24_setAutoAck_p	;wreg free
  3804                           
  3805                           ;RF24Network_c.c: 183: RF24_enableDynamicPayloads(rn->radio);
  3806                           ;stkvar	_rn @ sp[(-2)+-2]
  3807  00210E  0EFC               	movlw	-4
  3808  002110  CFE3 F051          	movff	plusw1,btemp+1
  3809  002114  0EFD               	movlw	-3
  3810  002116  CFE3 F052          	movff	plusw1,btemp+2
  3811  00211A  0E2F               	movlw	47
  3812  00211C  2451               	addwf	btemp+1,w,c
  3813  00211E  6ED9               	movwf	fsr2l,c
  3814  002120  0E00               	movlw	0
  3815  002122  2052               	addwfc	btemp+2,w,c
  3816  002124  6EDA               	movwf	fsr2h,c
  3817  002126  CFDE F051          	movff	postinc2,btemp+1
  3818  00212A  CFDD F052          	movff	postdec2,btemp+2
  3819  00212E  C051  FFE6         	movff	btemp+1,postinc1
  3820  002132  C052  FFE6         	movff	btemp+2,postinc1
  3821  002136  EC4A  F023         	call	_RF24_enableDynamicPayloads	;wreg free
  3822                           
  3823                           ;RF24Network_c.c: 187: uint8_t retryVar = (((rn->node_address % 6)+1) *2) + 3;
  3824  00213A  0E06               	movlw	6
  3825  00213C  6EE6               	movwf	postinc1,c
  3826  00213E  0E00               	movlw	0
  3827  002140  6EE6               	movwf	postinc1,c
  3828                           
  3829                           ;stkvar	_rn @ sp[(-4)+-2]
  3830  002142  0EFA               	movlw	-6
  3831  002144  CFE3 F051          	movff	plusw1,btemp+1
  3832  002148  0EFB               	movlw	-5
  3833  00214A  CFE3 F052          	movff	plusw1,btemp+2
  3834  00214E  0E32               	movlw	50
  3835  002150  2451               	addwf	btemp+1,w,c
  3836  002152  6ED9               	movwf	fsr2l,c
  3837  002154  0E00               	movlw	0
  3838  002156  2052               	addwfc	btemp+2,w,c
  3839  002158  6EDA               	movwf	fsr2h,c
  3840  00215A  CFDE F051          	movff	postinc2,btemp+1
  3841  00215E  CFDD F052          	movff	postdec2,btemp+2
  3842  002162  C051  FFE6         	movff	btemp+1,postinc1
  3843  002166  C052  FFE6         	movff	btemp+2,postinc1
  3844  00216A  EC7A  F020         	call	___lwmod	;wreg free
  3845  00216E  5050               	movf	btemp,w,c
  3846  002170  0D02               	mullw	2
  3847  002172  CFF3 F05B          	movff	prodl,btemp+11
  3848  002176  0E05               	movlw	5
  3849  002178  265B               	addwf	btemp+11,f,c
  3850                           
  3851                           ;stkvar	_retryVar @ sp[(-2)+1]
  3852  00217A  0EFF               	movlw	-1
  3853  00217C  C05B  FFE3         	movff	btemp+11,plusw1
  3854                           
  3855                           ;RF24Network_c.c: 188: RF24_setRetries(rn->radio,retryVar, 5);
  3856  002180  0E05               	movlw	5
  3857  002182  6EE6               	movwf	postinc1,c
  3858                           
  3859                           ;stkvar	_retryVar @ sp[(-3)+1]
  3860  002184  0EFE               	movlw	-2
  3861  002186  50E3               	movf	plusw1,w,c
  3862  002188  6EE6               	movwf	postinc1,c
  3863                           
  3864                           ;stkvar	_rn @ sp[(-4)+-2]
  3865  00218A  0EFA               	movlw	-6
  3866  00218C  CFE3 F051          	movff	plusw1,btemp+1
  3867  002190  0EFB               	movlw	-5
  3868  002192  CFE3 F052          	movff	plusw1,btemp+2
  3869  002196  0E2F               	movlw	47
  3870  002198  2451               	addwf	btemp+1,w,c
  3871  00219A  6ED9               	movwf	fsr2l,c
  3872  00219C  0E00               	movlw	0
  3873  00219E  2052               	addwfc	btemp+2,w,c
  3874  0021A0  6EDA               	movwf	fsr2h,c
  3875  0021A2  CFDE F051          	movff	postinc2,btemp+1
  3876  0021A6  CFDD F052          	movff	postdec2,btemp+2
  3877  0021AA  C051  FFE6         	movff	btemp+1,postinc1
  3878  0021AE  C052  FFE6         	movff	btemp+2,postinc1
  3879  0021B2  EC8A  F027         	call	_RF24_setRetries	;wreg free
  3880                           
  3881                           ;RF24Network_c.c: 189: rn->txTimeout = 25;
  3882                           ;stkvar	_rn @ sp[(-2)+-2]
  3883  0021B6  0EFC               	movlw	-4
  3884  0021B8  CFE3 F051          	movff	plusw1,btemp+1
  3885  0021BC  0EFD               	movlw	-3
  3886  0021BE  CFE3 F052          	movff	plusw1,btemp+2
  3887  0021C2  0E01               	movlw	1
  3888  0021C4  2451               	addwf	btemp+1,w,c
  3889  0021C6  6ED9               	movwf	fsr2l,c
  3890  0021C8  0E00               	movlw	0
  3891  0021CA  2052               	addwfc	btemp+2,w,c
  3892  0021CC  6EDA               	movwf	fsr2h,c
  3893  0021CE  0E19               	movlw	25
  3894  0021D0  6EDE               	movwf	postinc2,c
  3895  0021D2  0E00               	movlw	0
  3896  0021D4  6EDE               	movwf	postinc2,c
  3897  0021D6  0E00               	movlw	0
  3898  0021D8  6EDE               	movwf	postinc2,c
  3899  0021DA  0E00               	movlw	0
  3900  0021DC  6EDD               	movwf	postdec2,c
  3901                           
  3902                           ;RF24Network_c.c: 190: rn->routeTimeout = rn->txTimeout*3;
  3903  0021DE  0E03               	movlw	3
  3904  0021E0  6EE6               	movwf	postinc1,c
  3905  0021E2  0E00               	movlw	0
  3906  0021E4  6EE6               	movwf	postinc1,c
  3907                           
  3908                           ;stkvar	_rn @ sp[(-4)+-2]
  3909  0021E6  0EFA               	movlw	-6
  3910  0021E8  CFE3 F051          	movff	plusw1,btemp+1
  3911  0021EC  0EFB               	movlw	-5
  3912  0021EE  CFE3 F052          	movff	plusw1,btemp+2
  3913  0021F2  0E01               	movlw	1
  3914  0021F4  2451               	addwf	btemp+1,w,c
  3915  0021F6  6ED9               	movwf	fsr2l,c
  3916  0021F8  0E00               	movlw	0
  3917  0021FA  2052               	addwfc	btemp+2,w,c
  3918  0021FC  6EDA               	movwf	fsr2h,c
  3919  0021FE  CFDE F051          	movff	postinc2,btemp+1
  3920  002202  CFDD F052          	movff	postdec2,btemp+2
  3921  002206  C051  FFE6         	movff	btemp+1,postinc1
  3922  00220A  C052  FFE6         	movff	btemp+2,postinc1
  3923  00220E  EC30  F022         	call	___wmul	;wreg free
  3924                           
  3925                           ;stkvar	_rn @ sp[(-2)+-2]
  3926  002212  0EFC               	movlw	-4
  3927  002214  CFE3 F05A          	movff	plusw1,btemp+10
  3928  002218  0EFD               	movlw	-3
  3929  00221A  CFE3 F05B          	movff	plusw1,btemp+11
  3930  00221E  0E05               	movlw	5
  3931  002220  245A               	addwf	btemp+10,w,c
  3932  002222  6ED9               	movwf	fsr2l,c
  3933  002224  0E00               	movlw	0
  3934  002226  205B               	addwfc	btemp+11,w,c
  3935  002228  6EDA               	movwf	fsr2h,c
  3936  00222A  C050  FFDE         	movff	btemp,postinc2
  3937  00222E  C051  FFDD         	movff	btemp+1,postdec2
  3938                           
  3939                           ;RF24Network_c.c: 200: RF24N_setup_address(rn);
  3940                           ;stkvar	_rn @ sp[(-2)+-2]
  3941  002232  0EFC               	movlw	-4
  3942  002234  CFE3 FFE6          	movff	plusw1,postinc1
  3943  002238  CFE3 FFE6          	movff	plusw1,postinc1
  3944  00223C  EC0D  F014         	call	_RF24N_setup_address	;wreg free
  3945                           
  3946                           ;RF24Network_c.c: 203: uint8_t i = 6;
  3947                           ;stkvar	_i @ sp[(-2)+0]
  3948  002240  0EFE               	movlw	-2
  3949  002242  6AE3               	clrf	plusw1,c
  3950  002244  82E3               	bsf	plusw1,1,c
  3951  002246  84E3               	bsf	plusw1,2,c	;indir
  3952                           
  3953                           ;RF24Network_c.c: 204: while (i--){
  3954  002248  D030               	goto	l3434
  3955  00224A                     l3432:
  3956                           
  3957                           ;RF24Network_c.c: 205: RF24_openReadingPipe_d(rn->radio,i,RF24N_pipe_address(rn,_node_ad
      +                          dress,i));
  3958                           ;stkvar	_i @ sp[(-2)+0]
  3959  00224A  0EFE               	movlw	-2
  3960  00224C  50E3               	movf	plusw1,w,c
  3961  00224E  6EE6               	movwf	postinc1,c
  3962                           
  3963                           ;stkvar	__node_address @ sp[(-3)+-5]
  3964  002250  0EF8               	movlw	-8
  3965  002252  CFE3 FFE6          	movff	plusw1,postinc1
  3966  002256  CFE3 FFE6          	movff	plusw1,postinc1
  3967                           
  3968                           ;stkvar	_rn @ sp[(-5)+-2]
  3969  00225A  0EF9               	movlw	-7
  3970  00225C  CFE3 FFE6          	movff	plusw1,postinc1
  3971  002260  CFE3 FFE6          	movff	plusw1,postinc1
  3972  002264  ECF8  F017         	call	_RF24N_pipe_address	;wreg free
  3973  002268  C050  FFE6         	movff	btemp,postinc1
  3974  00226C  C051  FFE6         	movff	btemp+1,postinc1
  3975  002270  C052  FFE6         	movff	btemp+2,postinc1
  3976  002274  C053  FFE6         	movff	btemp+3,postinc1
  3977                           
  3978                           ;stkvar	_i @ sp[(-6)+0]
  3979  002278  0EFA               	movlw	-6
  3980  00227A  50E3               	movf	plusw1,w,c
  3981  00227C  6EE6               	movwf	postinc1,c
  3982                           
  3983                           ;stkvar	_rn @ sp[(-7)+-2]
  3984  00227E  0EF7               	movlw	-9
  3985  002280  CFE3 F051          	movff	plusw1,btemp+1
  3986  002284  0EF8               	movlw	-8
  3987  002286  CFE3 F052          	movff	plusw1,btemp+2
  3988  00228A  0E2F               	movlw	47
  3989  00228C  2451               	addwf	btemp+1,w,c
  3990  00228E  6ED9               	movwf	fsr2l,c
  3991  002290  0E00               	movlw	0
  3992  002292  2052               	addwfc	btemp+2,w,c
  3993  002294  6EDA               	movwf	fsr2h,c
  3994  002296  CFDE F051          	movff	postinc2,btemp+1
  3995  00229A  CFDD F052          	movff	postdec2,btemp+2
  3996  00229E  C051  FFE6         	movff	btemp+1,postinc1
  3997  0022A2  C052  FFE6         	movff	btemp+2,postinc1
  3998  0022A6  EC21  F017         	call	_RF24_openReadingPipe_d	;wreg free
  3999  0022AA                     l3434:
  4000                           
  4001                           ;stkvar	_i @ sp[(-2)+0]
  4002  0022AA  0EFE               	movlw	-2
  4003  0022AC  06E3               	decf	plusw1,f,c
  4004  0022AE  0EFE               	movlw	-2
  4005  0022B0  28E3               	incf	plusw1,w,c
  4006  0022B2  A4D8               	btfss	status,2,c
  4007  0022B4  D7CA               	goto	l3432
  4008                           
  4009                           ;RF24Network_c.c: 206: }
  4010                           ;RF24Network_c.c: 207: RF24_startListening(rn->radio);
  4011                           ;stkvar	_rn @ sp[(-2)+-2]
  4012  0022B6  0EFC               	movlw	-4
  4013  0022B8  CFE3 F051          	movff	plusw1,btemp+1
  4014  0022BC  0EFD               	movlw	-3
  4015  0022BE  CFE3 F052          	movff	plusw1,btemp+2
  4016  0022C2  0E2F               	movlw	47
  4017  0022C4  2451               	addwf	btemp+1,w,c
  4018  0022C6  6ED9               	movwf	fsr2l,c
  4019  0022C8  0E00               	movlw	0
  4020  0022CA  2052               	addwfc	btemp+2,w,c
  4021  0022CC  6EDA               	movwf	fsr2h,c
  4022  0022CE  CFDE F051          	movff	postinc2,btemp+1
  4023  0022D2  CFDD F052          	movff	postdec2,btemp+2
  4024  0022D6  C051  FFE6         	movff	btemp+1,postinc1
  4025  0022DA  C052  FFE6         	movff	btemp+2,postinc1
  4026  0022DE  ECC8  F01C         	call	_RF24_startListening	;wreg free
  4027  0022E2                     l202:
  4028                           
  4029                           ; _RF24N_begin_d: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5,
      +                           argsize = 5, vargsize = 0
  4030  0022E2  0EF9               	movlw	249
  4031  0022E4  26E1               	addwf	fsr1l,f,c
  4032  0022E6  0EFF               	movlw	255
  4033  0022E8  22E2               	addwfc	fsr1h,f,c
  4034  0022EA  0012               	return		;funcret
  4035  0022EC                     __end_of_RF24N_begin_d:
  4036                           	opt stack 0
  4037                           tblptru	equ	0xFF8
  4038                           tblptrh	equ	0xFF7
  4039                           tblptrl	equ	0xFF6
  4040                           tablat	equ	0xFF5
  4041                           prodl	equ	0xFF3
  4042                           intcon	equ	0xFF2
  4043                           postinc0	equ	0xFEE
  4044                           postdec0	equ	0xFED
  4045                           fsr0h	equ	0xFEA
  4046                           fsr0l	equ	0xFE9
  4047                           wreg	equ	0xFE8
  4048                           postinc1	equ	0xFE6
  4049                           postdec1	equ	0xFE5
  4050                           plusw1	equ	0xFE3
  4051                           fsr1h	equ	0xFE2
  4052                           fsr1l	equ	0xFE1
  4053                           indf2	equ	0xFDF
  4054                           postinc2	equ	0xFDE
  4055                           postdec2	equ	0xFDD
  4056                           fsr2h	equ	0xFDA
  4057                           fsr2l	equ	0xFD9
  4058                           status	equ	0xFD8
  4059                           
  4060 ;; *************** function _RF24_setRetries *****************
  4061 ;; Defined at:
  4062 ;;		line 1567 in file "../../../RF24_c/RF24_c.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;  rf              2  [STACK] PTR struct RF24
  4065 ;;		 -> radio(22), 
  4066 ;;  delay           1  [STACK] unsigned char 
  4067 ;;  count           1  [STACK] unsigned char 
  4068 ;; Auto vars:     Size  Location     Type
  4069 ;;		None
  4070 ;; Return value:  Size  Location     Type
  4071 ;;                  1  [STACK] void 
  4072 ;; Registers used:
  4073 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
  4074 ;; Tracked objects:
  4075 ;;		On entry : 0/0
  4076 ;;		On exit  : 0/0
  4077 ;;		Unchanged: 0/0
  4078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;Total ram usage:        0 bytes
  4084 ;; Hardware stack levels used:    1
  4085 ;; Hardware stack levels required when called:    5
  4086 ;; This function calls:
  4087 ;;		_RF24_write_register_d
  4088 ;; This function is called by:
  4089 ;;		_RF24N_begin_d
  4090 ;;		_RF24_begin
  4091 ;; This function uses a reentrant model
  4092 ;;
  4093                           
  4094                           	psect	text12
  4095  004F14                     __ptext12:
  4096                           	opt stack 0
  4097  004F14                     _RF24_setRetries:
  4098                           	opt stack 23
  4099                           
  4100                           ;RF24_c.c: 1569: RF24_write_register_d(rf,0x04,(delay&0xf)<<4 | (count&0xf)<<0);
  4101                           ;stkvar	_count @ sp[(0)+-4]
  4102                           
  4103                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  4104                           ;incstack = 0
  4105  004F14  0EFC               	movlw	-4
  4106  004F16  CFE3 F05B          	movff	plusw1,btemp+11
  4107  004F1A  0E0F               	movlw	15
  4108  004F1C  165B               	andwf	btemp+11,f,c
  4109                           
  4110                           ;stkvar	_delay @ sp[(0)+-3]
  4111  004F1E  0EFD               	movlw	-3
  4112  004F20  CFE3 F05A          	movff	plusw1,btemp+10
  4113  004F24  0E0F               	movlw	15
  4114  004F26  165A               	andwf	btemp+10,f,c
  4115  004F28  385A               	swapf	btemp+10,w,c
  4116  004F2A  0BF0               	andlw	240
  4117  004F2C  105B               	iorwf	btemp+11,w,c
  4118  004F2E  6EE6               	movwf	postinc1,c
  4119  004F30  0E04               	movlw	4
  4120  004F32  6EE6               	movwf	postinc1,c
  4121                           
  4122                           ;stkvar	_rf @ sp[(-2)+-2]
  4123  004F34  0EFC               	movlw	-4
  4124  004F36  CFE3 FFE6          	movff	plusw1,postinc1
  4125  004F3A  CFE3 FFE6          	movff	plusw1,postinc1
  4126  004F3E  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  4127                           
  4128                           ; _RF24_setRetries: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          4, argsize = 4, vargsize = 0
  4129  004F42  52E5               	movf	postdec1,f,c
  4130  004F44  52E5               	movf	postdec1,f,c
  4131  004F46  52E5               	movf	postdec1,f,c
  4132  004F48  52E5               	movf	postdec1,f,c
  4133  004F4A  0012               	return		;funcret
  4134  004F4C                     __end_of_RF24_setRetries:
  4135                           	opt stack 0
  4136                           tblptru	equ	0xFF8
  4137                           tblptrh	equ	0xFF7
  4138                           tblptrl	equ	0xFF6
  4139                           tablat	equ	0xFF5
  4140                           prodl	equ	0xFF3
  4141                           intcon	equ	0xFF2
  4142                           postinc0	equ	0xFEE
  4143                           postdec0	equ	0xFED
  4144                           fsr0h	equ	0xFEA
  4145                           fsr0l	equ	0xFE9
  4146                           wreg	equ	0xFE8
  4147                           postinc1	equ	0xFE6
  4148                           postdec1	equ	0xFE5
  4149                           plusw1	equ	0xFE3
  4150                           fsr1h	equ	0xFE2
  4151                           fsr1l	equ	0xFE1
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _RF24_setChannel *****************
  4160 ;; Defined at:
  4161 ;;		line 461 in file "../../../RF24_c/RF24_c.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  rf              2  [STACK] PTR struct RF24
  4164 ;;		 -> radio(22), 
  4165 ;;  channel         1  [STACK] unsigned char 
  4166 ;; Auto vars:     Size  Location     Type
  4167 ;;  max_channel     1    0        const unsigned char 
  4168 ;; Return value:  Size  Location     Type
  4169 ;;                  1  [STACK] void 
  4170 ;; Registers used:
  4171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
  4172 ;; Tracked objects:
  4173 ;;		On entry : 0/0
  4174 ;;		On exit  : 0/0
  4175 ;;		Unchanged: 0/0
  4176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4181 ;;Total ram usage:        0 bytes
  4182 ;; Hardware stack levels used:    1
  4183 ;; Hardware stack levels required when called:    5
  4184 ;; This function calls:
  4185 ;;		_RF24_write_register_d
  4186 ;; This function is called by:
  4187 ;;		_RF24N_begin_d
  4188 ;;		_RF24_begin
  4189 ;; This function uses a reentrant model
  4190 ;;
  4191                           
  4192                           	psect	text13
  4193  004BB6                     __ptext13:
  4194                           	opt stack 0
  4195  004BB6                     _RF24_setChannel:
  4196                           	opt stack 0
  4197                           
  4198                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
  4199  004BB6  52E6               	movf	postinc1,f,c
  4200  004BB8  52E6               	movf	postinc1,f,c
  4201                           
  4202                           ;RF24_c.c: 464: RF24_write_register_d(rf,0x05,(channel<max_channel?channel:max_channel))
      +                          ;
  4203                           ;stkvar	_channel @ sp[(-2)+-3]
  4204                           
  4205                           ;incstack = 0
  4206  004BBA  0EFB               	movlw	-5
  4207  004BBC  CFE3 F050          	movff	plusw1,btemp
  4208  004BC0  0E7C               	movlw	124
  4209  004BC2  6450               	cpfsgt	btemp,c
  4210  004BC4  D005               	goto	l2970
  4211  004BC6  0E7D               	movlw	125
  4212  004BC8  6E51               	movwf	btemp+1,c
  4213  004BCA  0E00               	movlw	0
  4214  004BCC  6E52               	movwf	btemp+2,c
  4215  004BCE  D004               	goto	L3
  4216  004BD0                     l2970:
  4217                           
  4218                           ;stkvar	_channel @ sp[(-2)+-3]
  4219  004BD0  0EFB               	movlw	-5
  4220  004BD2  50E3               	movf	plusw1,w,c
  4221  004BD4  6E51               	movwf	btemp+1,c
  4222  004BD6  6A52               	clrf	btemp+2,c
  4223  004BD8                     L3:
  4224                           
  4225                           ;stkvar	_RF24_setChannel$1938 @ sp[(-2)+0]
  4226  004BD8  0EFE               	movlw	-2
  4227  004BDA  C051  FFE3         	movff	btemp+1,plusw1
  4228  004BDE  0EFF               	movlw	-1
  4229  004BE0  C052  FFE3         	movff	btemp+2,plusw1
  4230                           
  4231                           ;stkvar	_RF24_setChannel$1938 @ sp[(-2)+0]
  4232  004BE4  0EFE               	movlw	-2
  4233  004BE6  50E3               	movf	plusw1,w,c
  4234  004BE8  6EE6               	movwf	postinc1,c
  4235  004BEA  0E05               	movlw	5
  4236  004BEC  6EE6               	movwf	postinc1,c
  4237                           
  4238                           ;stkvar	_rf @ sp[(-4)+-2]
  4239  004BEE  0EFA               	movlw	-6
  4240  004BF0  CFE3 FFE6          	movff	plusw1,postinc1
  4241  004BF4  CFE3 FFE6          	movff	plusw1,postinc1
  4242  004BF8  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  4243                           
  4244                           ; _RF24_setChannel: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          3, argsize = 3, vargsize = 0
  4245  004BFC  0EFB               	movlw	251
  4246  004BFE  26E1               	addwf	fsr1l,f,c
  4247  004C00  0EFF               	movlw	255
  4248  004C02  22E2               	addwfc	fsr1h,f,c
  4249  004C04  0012               	return		;funcret
  4250  004C06                     __end_of_RF24_setChannel:
  4251                           	opt stack 0
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodl	equ	0xFF3
  4257                           intcon	equ	0xFF2
  4258                           postinc0	equ	0xFEE
  4259                           postdec0	equ	0xFED
  4260                           fsr0h	equ	0xFEA
  4261                           fsr0l	equ	0xFE9
  4262                           wreg	equ	0xFE8
  4263                           postinc1	equ	0xFE6
  4264                           postdec1	equ	0xFE5
  4265                           plusw1	equ	0xFE3
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           postdec2	equ	0xFDD
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _RF24_openReadingPipe_d *****************
  4276 ;; Defined at:
  4277 ;;		line 1180 in file "../../../RF24_c/RF24_c.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;  rf              2  [STACK] PTR struct RF24
  4280 ;;		 -> radio(22), 
  4281 ;;  child           1  [STACK] unsigned char 
  4282 ;;  address         4  [STACK] unsigned long 
  4283 ;; Auto vars:     Size  Location     Type
  4284 ;;		None
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1  [STACK] void 
  4287 ;; Registers used:
  4288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;Total ram usage:        0 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; Hardware stack levels required when called:    5
  4301 ;; This function calls:
  4302 ;;		_RF24_read_register_d
  4303 ;;		_RF24_write_register_c_d
  4304 ;;		_RF24_write_register_d
  4305 ;;		_memcpy
  4306 ;; This function is called by:
  4307 ;;		_RF24N_begin_d
  4308 ;; This function uses a reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text14
  4312  002E42                     __ptext14:
  4313                           	opt stack 0
  4314  002E42                     _RF24_openReadingPipe_d:
  4315                           	opt stack 23
  4316                           
  4317                           ;RF24_c.c: 1185: if (child == 0){
  4318                           ;stkvar	_child @ sp[(0)+-3]
  4319                           
  4320                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 7, argsize = 7 var
      +                          gsize = 0, retsize = 0
  4321                           ;incstack = 0
  4322  002E42  0EFD               	movlw	-3
  4323  002E44  50E3               	movf	plusw1,w,c
  4324  002E46  A4D8               	btfss	status,2,c
  4325  002E48  D025               	goto	l3010
  4326                           
  4327                           ;RF24_c.c: 1186: memcpy(rf->pipe0_reading_address,&address,rf->addr_width);
  4328                           ;stkvar	_rf @ sp[(0)+-2]
  4329  002E4A  0EFE               	movlw	-2
  4330  002E4C  CFE3 F051          	movff	plusw1,btemp+1
  4331  002E50  0EFF               	movlw	-1
  4332  002E52  CFE3 F052          	movff	plusw1,btemp+2
  4333  002E56  0E0C               	movlw	12
  4334  002E58  2451               	addwf	btemp+1,w,c
  4335  002E5A  6ED9               	movwf	fsr2l,c
  4336  002E5C  0E00               	movlw	0
  4337  002E5E  2052               	addwfc	btemp+2,w,c
  4338  002E60  6EDA               	movwf	fsr2h,c
  4339  002E62  50DF               	movf	indf2,w,c
  4340  002E64  6EE6               	movwf	postinc1,c
  4341  002E66  0E00               	movlw	0
  4342  002E68  6EE6               	movwf	postinc1,c
  4343                           
  4344                           ;stkvar	_address @ sp[(-2)+-7]
  4345  002E6A  0EF7               	movlw	247
  4346  002E6C  24E1               	addwf	fsr1l,w,c
  4347  002E6E  6EE6               	movwf	postinc1,c
  4348  002E70  0EFF               	movlw	255
  4349  002E72  20E2               	addwfc	fsr1h,w,c
  4350  002E74  6EE6               	movwf	postinc1,c
  4351                           
  4352                           ;stkvar	_rf @ sp[(-4)+-2]
  4353  002E76  0EFA               	movlw	-6
  4354  002E78  50E3               	movf	plusw1,w,c
  4355  002E7A  0F07               	addlw	7
  4356  002E7C  6E51               	movwf	btemp+1,c
  4357  002E7E  0EFB               	movlw	-5
  4358  002E80  CFE3 F052          	movff	plusw1,btemp+2
  4359  002E84  0E00               	movlw	0
  4360  002E86  2252               	addwfc	btemp+2,f,c
  4361  002E88  C051  FFE6         	movff	btemp+1,postinc1
  4362  002E8C  C052  FFE6         	movff	btemp+2,postinc1
  4363  002E90  ECB5  F01F         	call	_memcpy	;wreg free
  4364  002E94                     l3010:
  4365                           
  4366                           ;RF24_c.c: 1187: }
  4367                           ;RF24_c.c: 1189: if (child <= 6)
  4368                           ;stkvar	_child @ sp[(0)+-3]
  4369  002E94  0EFD               	movlw	-3
  4370  002E96  CFE3 F050          	movff	plusw1,btemp
  4371  002E9A  0E07               	movlw	7
  4372  002E9C  6050               	cpfslt	btemp,c
  4373  002E9E  D0A3               	goto	l755
  4374                           
  4375                           ;RF24_c.c: 1190: {
  4376                           ;RF24_c.c: 1192: if ( child < 2 )
  4377                           ;stkvar	_child @ sp[(0)+-3]
  4378  002EA0  0EFD               	movlw	-3
  4379  002EA2  CFE3 F050          	movff	plusw1,btemp
  4380  002EA6  0E02               	movlw	2
  4381  002EA8  6050               	cpfslt	btemp,c
  4382  002EAA  D02C               	goto	l3016
  4383                           
  4384                           ;RF24_c.c: 1193: RF24_write_register_c_d(rf,(*(&child_pipe[child])), (const uint8_t*)(&a
      +                          ddress), rf->addr_width);
  4385                           ;stkvar	_rf @ sp[(0)+-2]
  4386  002EAC  0EFE               	movlw	-2
  4387  002EAE  CFE3 F051          	movff	plusw1,btemp+1
  4388  002EB2  0EFF               	movlw	-1
  4389  002EB4  CFE3 F052          	movff	plusw1,btemp+2
  4390  002EB8  0E0C               	movlw	12
  4391  002EBA  2451               	addwf	btemp+1,w,c
  4392  002EBC  6ED9               	movwf	fsr2l,c
  4393  002EBE  0E00               	movlw	0
  4394  002EC0  2052               	addwfc	btemp+2,w,c
  4395  002EC2  6EDA               	movwf	fsr2h,c
  4396  002EC4  50DF               	movf	indf2,w,c
  4397  002EC6  6EE6               	movwf	postinc1,c
  4398                           
  4399                           ;stkvar	_address @ sp[(-1)+-7]
  4400  002EC8  0EF8               	movlw	248
  4401  002ECA  24E1               	addwf	fsr1l,w,c
  4402  002ECC  6EE6               	movwf	postinc1,c
  4403  002ECE  0EFF               	movlw	255
  4404  002ED0  20E2               	addwfc	fsr1h,w,c
  4405  002ED2  6EE6               	movwf	postinc1,c
  4406                           
  4407                           ;stkvar	_child @ sp[(-3)+-3]
  4408  002ED4  0EFA               	movlw	-6
  4409  002ED6  50E3               	movf	plusw1,w,c
  4410  002ED8  6E51               	movwf	btemp+1,c
  4411  002EDA  6A52               	clrf	btemp+2,c
  4412  002EDC  0ED1               	movlw	low _child_pipe
  4413  002EDE  2451               	addwf	btemp+1,w,c
  4414  002EE0  6EF6               	movwf	tblptrl,c
  4415  002EE2  0EFD               	movlw	high _child_pipe
  4416  002EE4  2052               	addwfc	btemp+2,w,c
  4417  002EE6  6EF7               	movwf	tblptrh,c
  4418  002EE8                     	if	1	;There are 3 active tblptr bytes
  4419  002EE8  6AF8               	clrf	tblptru,c
  4420  002EEA  0E00               	movlw	low (__mediumconst shr (0+16))
  4421  002EEC  22F8               	addwfc	tblptru,f,c
  4422  002EEE                     	endif
  4423  002EEE  0008               	tblrd		*
  4424  002EF0  50F5               	movf	tablat,w,c
  4425  002EF2  6EE6               	movwf	postinc1,c
  4426                           
  4427                           ;stkvar	_rf @ sp[(-4)+-2]
  4428  002EF4  0EFA               	movlw	-6
  4429  002EF6  CFE3 FFE6          	movff	plusw1,postinc1
  4430  002EFA  CFE3 FFE6          	movff	plusw1,postinc1
  4431  002EFE  ECC0  F023         	call	_RF24_write_register_c_d	;wreg free
  4432  002F02  D01F               	goto	l754
  4433  002F04                     l3016:
  4434                           
  4435                           ;RF24_c.c: 1194: else
  4436                           ;RF24_c.c: 1195: RF24_write_register_c_d(rf,(*(&child_pipe[child])), (const uint8_t*)(&a
      +                          ddress), 1);
  4437  002F04  0E01               	movlw	1
  4438  002F06  6EE6               	movwf	postinc1,c
  4439                           
  4440                           ;stkvar	_address @ sp[(-1)+-7]
  4441  002F08  0EF8               	movlw	248
  4442  002F0A  24E1               	addwf	fsr1l,w,c
  4443  002F0C  6EE6               	movwf	postinc1,c
  4444  002F0E  0EFF               	movlw	255
  4445  002F10  20E2               	addwfc	fsr1h,w,c
  4446  002F12  6EE6               	movwf	postinc1,c
  4447                           
  4448                           ;stkvar	_child @ sp[(-3)+-3]
  4449  002F14  0EFA               	movlw	-6
  4450  002F16  50E3               	movf	plusw1,w,c
  4451  002F18  6E51               	movwf	btemp+1,c
  4452  002F1A  6A52               	clrf	btemp+2,c
  4453  002F1C  0ED1               	movlw	low _child_pipe
  4454  002F1E  2451               	addwf	btemp+1,w,c
  4455  002F20  6EF6               	movwf	tblptrl,c
  4456  002F22  0EFD               	movlw	high _child_pipe
  4457  002F24  2052               	addwfc	btemp+2,w,c
  4458  002F26  6EF7               	movwf	tblptrh,c
  4459  002F28                     	if	1	;There are 3 active tblptr bytes
  4460  002F28  6AF8               	clrf	tblptru,c
  4461  002F2A  0E00               	movlw	low (__mediumconst shr (0+16))
  4462  002F2C  22F8               	addwfc	tblptru,f,c
  4463  002F2E                     	endif
  4464  002F2E  0008               	tblrd		*
  4465  002F30  50F5               	movf	tablat,w,c
  4466  002F32  6EE6               	movwf	postinc1,c
  4467                           
  4468                           ;stkvar	_rf @ sp[(-4)+-2]
  4469  002F34  0EFA               	movlw	-6
  4470  002F36  CFE3 FFE6          	movff	plusw1,postinc1
  4471  002F3A  CFE3 FFE6          	movff	plusw1,postinc1
  4472  002F3E  ECC0  F023         	call	_RF24_write_register_c_d	;wreg free
  4473  002F42                     l754:
  4474                           
  4475                           ;RF24_c.c: 1197: RF24_write_register_d(rf,(*(&child_payload_size[child])),rf->payload_si
      +                          ze);
  4476                           ;stkvar	_rf @ sp[(0)+-2]
  4477  002F42  0EFE               	movlw	-2
  4478  002F44  CFE3 F051          	movff	plusw1,btemp+1
  4479  002F48  0EFF               	movlw	-1
  4480  002F4A  CFE3 F052          	movff	plusw1,btemp+2
  4481  002F4E  0E05               	movlw	5
  4482  002F50  2451               	addwf	btemp+1,w,c
  4483  002F52  6ED9               	movwf	fsr2l,c
  4484  002F54  0E00               	movlw	0
  4485  002F56  2052               	addwfc	btemp+2,w,c
  4486  002F58  6EDA               	movwf	fsr2h,c
  4487  002F5A  50DF               	movf	indf2,w,c
  4488  002F5C  6EE6               	movwf	postinc1,c
  4489                           
  4490                           ;stkvar	_child @ sp[(-1)+-3]
  4491  002F5E  0EFC               	movlw	-4
  4492  002F60  50E3               	movf	plusw1,w,c
  4493  002F62  6E51               	movwf	btemp+1,c
  4494  002F64  6A52               	clrf	btemp+2,c
  4495  002F66  0ECB               	movlw	low _child_payload_size
  4496  002F68  2451               	addwf	btemp+1,w,c
  4497  002F6A  6EF6               	movwf	tblptrl,c
  4498  002F6C  0EFD               	movlw	high _child_payload_size
  4499  002F6E  2052               	addwfc	btemp+2,w,c
  4500  002F70  6EF7               	movwf	tblptrh,c
  4501  002F72                     	if	1	;There are 3 active tblptr bytes
  4502  002F72  6AF8               	clrf	tblptru,c
  4503  002F74  0E00               	movlw	low (__mediumconst shr (0+16))
  4504  002F76  22F8               	addwfc	tblptru,f,c
  4505  002F78                     	endif
  4506  002F78  0008               	tblrd		*
  4507  002F7A  50F5               	movf	tablat,w,c
  4508  002F7C  6EE6               	movwf	postinc1,c
  4509                           
  4510                           ;stkvar	_rf @ sp[(-2)+-2]
  4511  002F7E  0EFC               	movlw	-4
  4512  002F80  CFE3 FFE6          	movff	plusw1,postinc1
  4513  002F84  CFE3 FFE6          	movff	plusw1,postinc1
  4514  002F88  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  4515                           
  4516                           ;RF24_c.c: 1202: RF24_write_register_d(rf,0x02,RF24_read_register_d(rf,0x02) | (1<<((*(&
      +                          child_pipe_enable[child])))));
  4517                           ;stkvar	_child @ sp[(0)+-3]
  4518  002F8C  0EFD               	movlw	-3
  4519  002F8E  50E3               	movf	plusw1,w,c
  4520  002F90  6E51               	movwf	btemp+1,c
  4521  002F92  6A52               	clrf	btemp+2,c
  4522  002F94  0ED7               	movlw	low _child_pipe_enable
  4523  002F96  2451               	addwf	btemp+1,w,c
  4524  002F98  6EF6               	movwf	tblptrl,c
  4525  002F9A  0EFD               	movlw	high _child_pipe_enable
  4526  002F9C  2052               	addwfc	btemp+2,w,c
  4527  002F9E  6EF7               	movwf	tblptrh,c
  4528  002FA0                     	if	1	;There are 3 active tblptr bytes
  4529  002FA0  6AF8               	clrf	tblptru,c
  4530  002FA2  0E00               	movlw	low (__mediumconst shr (0+16))
  4531  002FA4  22F8               	addwfc	tblptru,f,c
  4532  002FA6                     	endif
  4533  002FA6  0008               	tblrd		*
  4534  002FA8  CFF5 F05B          	movff	tablat,btemp+11
  4535  002FAC  0E01               	movlw	1
  4536  002FAE  6E5A               	movwf	btemp+10,c
  4537  002FB0  2A5B               	incf	btemp+11,f,c
  4538  002FB2  D002               	goto	u1924
  4539  002FB4                     u1925:
  4540  002FB4  90D8               	bcf	status,0,c
  4541  002FB6  365A               	rlcf	btemp+10,f,c
  4542  002FB8                     u1924:
  4543  002FB8  2E5B               	decfsz	btemp+11,f,c
  4544  002FBA  D7FC               	goto	u1925
  4545  002FBC  0E02               	movlw	2
  4546  002FBE  6EE6               	movwf	postinc1,c
  4547                           
  4548                           ;stkvar	_rf @ sp[(-1)+-2]
  4549  002FC0  0EFD               	movlw	-3
  4550  002FC2  CFE3 FFE6          	movff	plusw1,postinc1
  4551  002FC6  CFE3 FFE6          	movff	plusw1,postinc1
  4552  002FCA  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  4553  002FCE  5050               	movf	btemp,w,c
  4554  002FD0  105A               	iorwf	btemp+10,w,c
  4555  002FD2  6EE6               	movwf	postinc1,c
  4556  002FD4  0E02               	movlw	2
  4557  002FD6  6EE6               	movwf	postinc1,c
  4558                           
  4559                           ;stkvar	_rf @ sp[(-2)+-2]
  4560  002FD8  0EFC               	movlw	-4
  4561  002FDA  CFE3 FFE6          	movff	plusw1,postinc1
  4562  002FDE  CFE3 FFE6          	movff	plusw1,postinc1
  4563  002FE2  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  4564  002FE6                     l755:
  4565                           
  4566                           ; _RF24_openReadingPipe_d: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 7, argsize = 7, vargsize = 0
  4567  002FE6  0EF9               	movlw	249
  4568  002FE8  26E1               	addwf	fsr1l,f,c
  4569  002FEA  0EFF               	movlw	255
  4570  002FEC  22E2               	addwfc	fsr1h,f,c
  4571  002FEE  0012               	return		;funcret
  4572  002FF0                     __end_of_RF24_openReadingPipe_d:
  4573                           	opt stack 0
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           prodl	equ	0xFF3
  4579                           intcon	equ	0xFF2
  4580                           postinc0	equ	0xFEE
  4581                           postdec0	equ	0xFED
  4582                           fsr0h	equ	0xFEA
  4583                           fsr0l	equ	0xFE9
  4584                           wreg	equ	0xFE8
  4585                           postinc1	equ	0xFE6
  4586                           postdec1	equ	0xFE5
  4587                           plusw1	equ	0xFE3
  4588                           fsr1h	equ	0xFE2
  4589                           fsr1l	equ	0xFE1
  4590                           indf2	equ	0xFDF
  4591                           postinc2	equ	0xFDE
  4592                           postdec2	equ	0xFDD
  4593                           fsr2h	equ	0xFDA
  4594                           fsr2l	equ	0xFD9
  4595                           status	equ	0xFD8
  4596                           
  4597 ;; *************** function _RF24_enableDynamicPayloads *****************
  4598 ;; Defined at:
  4599 ;;		line 1263 in file "../../../RF24_c/RF24_c.c"
  4600 ;; Parameters:    Size  Location     Type
  4601 ;;  rf              2  [STACK] PTR struct RF24
  4602 ;;		 -> radio(22), 
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;		None
  4605 ;; Return value:  Size  Location     Type
  4606 ;;                  1  [STACK] void 
  4607 ;; Registers used:
  4608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
  4609 ;; Tracked objects:
  4610 ;;		On entry : 0/0
  4611 ;;		On exit  : 0/0
  4612 ;;		Unchanged: 0/0
  4613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;Total ram usage:        0 bytes
  4619 ;; Hardware stack levels used:    1
  4620 ;; Hardware stack levels required when called:    5
  4621 ;; This function calls:
  4622 ;;		_RF24_read_register_d
  4623 ;;		_RF24_write_register_d
  4624 ;; This function is called by:
  4625 ;;		_RF24N_begin_d
  4626 ;; This function uses a reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text15
  4630  004694                     __ptext15:
  4631                           	opt stack 0
  4632  004694                     _RF24_enableDynamicPayloads:
  4633                           	opt stack 23
  4634                           
  4635                           ;RF24_c.c: 1268: RF24_write_register_d(rf,0x1D,RF24_read_register_d(rf,0x1D) | (1<<(2)) 
      +                          );
  4636                           
  4637                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4638                           ;incstack = 0
  4639  004694  0E1D               	movlw	29
  4640  004696  6EE6               	movwf	postinc1,c
  4641                           
  4642                           ;stkvar	_rf @ sp[(-1)+-2]
  4643  004698  0EFD               	movlw	-3
  4644  00469A  CFE3 FFE6          	movff	plusw1,postinc1
  4645  00469E  CFE3 FFE6          	movff	plusw1,postinc1
  4646  0046A2  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  4647  0046A6  5050               	movf	btemp,w,c
  4648  0046A8  0904               	iorlw	4
  4649  0046AA  6EE6               	movwf	postinc1,c
  4650  0046AC  0E1D               	movlw	29
  4651  0046AE  6EE6               	movwf	postinc1,c
  4652                           
  4653                           ;stkvar	_rf @ sp[(-2)+-2]
  4654  0046B0  0EFC               	movlw	-4
  4655  0046B2  CFE3 FFE6          	movff	plusw1,postinc1
  4656  0046B6  CFE3 FFE6          	movff	plusw1,postinc1
  4657  0046BA  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  4658                           
  4659                           ;RF24_c.c: 1271: ;
  4660                           ;RF24_c.c: 1277: RF24_write_register_d(rf,0x1C,RF24_read_register_d(rf,0x1C) | (1<<(5)) 
      +                          | (1<<(4)) | (1<<(3)) | (1<<(2)) | (1<<(1)) | (1<<(0)));
  4661  0046BE  0E1C               	movlw	28
  4662  0046C0  6EE6               	movwf	postinc1,c
  4663                           
  4664                           ;stkvar	_rf @ sp[(-1)+-2]
  4665  0046C2  0EFD               	movlw	-3
  4666  0046C4  CFE3 FFE6          	movff	plusw1,postinc1
  4667  0046C8  CFE3 FFE6          	movff	plusw1,postinc1
  4668  0046CC  ECC4  F026         	call	_RF24_read_register_d	;wreg free
  4669  0046D0  5050               	movf	btemp,w,c
  4670  0046D2  093F               	iorlw	63
  4671  0046D4  6EE6               	movwf	postinc1,c
  4672  0046D6  0E1C               	movlw	28
  4673  0046D8  6EE6               	movwf	postinc1,c
  4674                           
  4675                           ;stkvar	_rf @ sp[(-2)+-2]
  4676  0046DA  0EFC               	movlw	-4
  4677  0046DC  CFE3 FFE6          	movff	plusw1,postinc1
  4678  0046E0  CFE3 FFE6          	movff	plusw1,postinc1
  4679  0046E4  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  4680                           
  4681                           ;RF24_c.c: 1279: rf->dynamic_payloads_enabled = 1;
  4682                           ;stkvar	_rf @ sp[(0)+-2]
  4683  0046E8  0EFE               	movlw	-2
  4684  0046EA  CFE3 F051          	movff	plusw1,btemp+1
  4685  0046EE  0EFF               	movlw	-1
  4686  0046F0  CFE3 F052          	movff	plusw1,btemp+2
  4687  0046F4  0E06               	movlw	6
  4688  0046F6  2451               	addwf	btemp+1,w,c
  4689  0046F8  6ED9               	movwf	fsr2l,c
  4690  0046FA  0E00               	movlw	0
  4691  0046FC  2052               	addwfc	btemp+2,w,c
  4692  0046FE  6EDA               	movwf	fsr2h,c
  4693  004700  0E01               	movlw	1
  4694  004702  6EDF               	movwf	indf2,c
  4695                           
  4696                           ; _RF24_enableDynamicPayloads: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 2, argsize = 2, vargsize = 0
  4697  004704  52E5               	movf	postdec1,f,c
  4698  004706  52E5               	movf	postdec1,f,c
  4699  004708  0012               	return		;funcret
  4700  00470A                     __end_of_RF24_enableDynamicPayloads:
  4701                           	opt stack 0
  4702                           tblptru	equ	0xFF8
  4703                           tblptrh	equ	0xFF7
  4704                           tblptrl	equ	0xFF6
  4705                           tablat	equ	0xFF5
  4706                           prodl	equ	0xFF3
  4707                           intcon	equ	0xFF2
  4708                           postinc0	equ	0xFEE
  4709                           postdec0	equ	0xFED
  4710                           fsr0h	equ	0xFEA
  4711                           fsr0l	equ	0xFE9
  4712                           wreg	equ	0xFE8
  4713                           postinc1	equ	0xFE6
  4714                           postdec1	equ	0xFE5
  4715                           plusw1	equ	0xFE3
  4716                           fsr1h	equ	0xFE2
  4717                           fsr1l	equ	0xFE1
  4718                           indf2	equ	0xFDF
  4719                           postinc2	equ	0xFDE
  4720                           postdec2	equ	0xFDD
  4721                           fsr2h	equ	0xFDA
  4722                           fsr2l	equ	0xFD9
  4723                           status	equ	0xFD8
  4724                           
  4725 ;; *************** function _RF24N_setup_address *****************
  4726 ;; Defined at:
  4727 ;;		line 1207 in file "../../RF24Network_c.c"
  4728 ;; Parameters:    Size  Location     Type
  4729 ;;  rn              2  [STACK] PTR struct .
  4730 ;;		 -> network(372), 
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  node_mask_ch    2  [STACK] unsigned int 
  4733 ;;  parent_mask     2  [STACK] unsigned int 
  4734 ;;  m               2  [STACK] unsigned int 
  4735 ;;  i               2  [STACK] unsigned int 
  4736 ;;  count           1  [STACK] unsigned char 
  4737 ;; Return value:  Size  Location     Type
  4738 ;;                  1  [STACK] void 
  4739 ;; Registers used:
  4740 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  4741 ;; Tracked objects:
  4742 ;;		On entry : 0/0
  4743 ;;		On exit  : 0/0
  4744 ;;		Unchanged: 0/0
  4745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;Total ram usage:        0 bytes
  4751 ;; Hardware stack levels used:    1
  4752 ;; Hardware stack levels required when called:    1
  4753 ;; This function calls:
  4754 ;;		Nothing
  4755 ;; This function is called by:
  4756 ;;		_RF24N_begin_d
  4757 ;; This function uses a reentrant model
  4758 ;;
  4759                           
  4760                           	psect	text16
  4761  00281A                     __ptext16:
  4762                           	opt stack 0
  4763  00281A                     _RF24N_setup_address:
  4764                           	opt stack 0
  4765                           
  4766                           ; autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  4767  00281A  0E09               	movlw	9
  4768  00281C  26E1               	addwf	fsr1l,f,c
  4769  00281E  0E00               	movlw	0
  4770  002820  22E2               	addwfc	fsr1h,f,c
  4771                           
  4772                           ;RF24Network_c.c: 1210: uint16_t node_mask_check = 0xFFFF;
  4773                           
  4774                           ;incstack = 0
  4775  002822  0EFF               	movlw	255
  4776  002824  6E51               	movwf	btemp+1,c
  4777  002826  0EFF               	movlw	255
  4778  002828  6E52               	movwf	btemp+2,c
  4779                           
  4780                           ;stkvar	_node_mask_check @ sp[(-9)+0]
  4781  00282A  0EF7               	movlw	-9
  4782  00282C  C051  FFE3         	movff	btemp+1,plusw1
  4783  002830  0EF8               	movlw	-8
  4784  002832  C052  FFE3         	movff	btemp+2,plusw1
  4785                           
  4786                           ;RF24Network_c.c: 1212: uint8_t count = 0;
  4787                           ;stkvar	_count @ sp[(-9)+8]
  4788  002836  0EFF               	movlw	-1
  4789  002838  6AE3               	clrf	plusw1,c
  4790                           
  4791                           ;RF24Network_c.c: 1215: while ( rn->node_address & node_mask_check ){
  4792  00283A  D012               	goto	l2988
  4793  00283C                     l2984:
  4794                           
  4795                           ;RF24Network_c.c: 1216: node_mask_check <<= 3;
  4796  00283C  0E03               	movlw	3
  4797  00283E  6E5B               	movwf	btemp+11,c
  4798                           
  4799                           ;stkvar	_node_mask_check @ sp[(-9)+0]
  4800  002840  50E1               	movf	fsr1l,w,c
  4801  002842  0FF7               	addlw	-9
  4802  002844  6ED9               	movwf	fsr2l,c
  4803  002846  50E2               	movf	fsr1h,w,c
  4804  002848  6EDA               	movwf	fsr2h,c
  4805  00284A  0EFF               	movlw	255
  4806  00284C  22DA               	addwfc	fsr2h,f,c
  4807  00284E  285B               	incf	btemp+11,w,c
  4808  002850  D003               	goto	u1840
  4809  002852                     u1845:
  4810  002852  90D8               	bcf	status,0,c
  4811  002854  36DE               	rlcf	postinc2,f,c
  4812  002856  36DD               	rlcf	postdec2,f,c
  4813  002858                     u1840:
  4814  002858  2EE8               	decfsz	wreg,f,c
  4815  00285A  D7FB               	goto	u1845
  4816                           
  4817                           ;RF24Network_c.c: 1218: count++;
  4818                           ;stkvar	_count @ sp[(-9)+8]
  4819  00285C  0EFF               	movlw	-1
  4820  00285E  2AE3               	incf	plusw1,f,c
  4821  002860                     l2988:
  4822                           
  4823                           ;stkvar	_node_mask_check @ sp[(-9)+0]
  4824  002860  0EF7               	movlw	-9
  4825  002862  CFE3 F051          	movff	plusw1,btemp+1
  4826  002866  0EF8               	movlw	-8
  4827  002868  CFE3 F052          	movff	plusw1,btemp+2
  4828                           
  4829                           ;stkvar	_rn @ sp[(-9)+-2]
  4830  00286C  0EF5               	movlw	-11
  4831  00286E  CFE3 F05A          	movff	plusw1,btemp+10
  4832  002872  0EF6               	movlw	-10
  4833  002874  CFE3 F05B          	movff	plusw1,btemp+11
  4834  002878  0E32               	movlw	50
  4835  00287A  245A               	addwf	btemp+10,w,c
  4836  00287C  6ED9               	movwf	fsr2l,c
  4837  00287E  0E00               	movlw	0
  4838  002880  205B               	addwfc	btemp+11,w,c
  4839  002882  6EDA               	movwf	fsr2h,c
  4840  002884  CFDE F05A          	movff	postinc2,btemp+10
  4841  002888  CFDD F05B          	movff	postdec2,btemp+11
  4842  00288C  5051               	movf	btemp+1,w,c
  4843  00288E  165A               	andwf	btemp+10,f,c
  4844  002890  5052               	movf	btemp+2,w,c
  4845  002892  165B               	andwf	btemp+11,f,c
  4846  002894  505A               	movf	btemp+10,w,c
  4847  002896  105B               	iorwf	btemp+11,w,c
  4848  002898  A4D8               	btfss	status,2,c
  4849  00289A  D7D0               	goto	l2984
  4850                           
  4851                           ;RF24Network_c.c: 1219: }
  4852                           ;RF24Network_c.c: 1220: rn->multicast_level = count;
  4853                           ;stkvar	_count @ sp[(-9)+8]
  4854                           ;stkvar	_rn @ sp[(-9)+-2]
  4855  00289C  0EF5               	movlw	-11
  4856  00289E  CFE3 F051          	movff	plusw1,btemp+1
  4857  0028A2  0EF6               	movlw	-10
  4858  0028A4  CFE3 F052          	movff	plusw1,btemp+2
  4859  0028A8  0E31               	movlw	49
  4860  0028AA  2451               	addwf	btemp+1,w,c
  4861  0028AC  6ED9               	movwf	fsr2l,c
  4862  0028AE  0E00               	movlw	0
  4863  0028B0  2052               	addwfc	btemp+2,w,c
  4864  0028B2  6EDA               	movwf	fsr2h,c
  4865  0028B4  0EFF               	movlw	-1
  4866  0028B6  CFE3 FFDF          	movff	plusw1,indf2
  4867                           
  4868                           ;RF24Network_c.c: 1225: rn->node_mask = ~ node_mask_check;
  4869                           ;stkvar	_node_mask_check @ sp[(-9)+0]
  4870  0028BA  0EF7               	movlw	-9
  4871  0028BC  CFE3 F05A          	movff	plusw1,btemp+10
  4872  0028C0  0EF8               	movlw	-8
  4873  0028C2  CFE3 F05B          	movff	plusw1,btemp+11
  4874  0028C6  1C5A               	comf	btemp+10,w,c
  4875  0028C8  6E51               	movwf	btemp+1,c
  4876  0028CA  1C5B               	comf	btemp+11,w,c
  4877  0028CC  6E52               	movwf	btemp+2,c
  4878                           
  4879                           ;stkvar	_rn @ sp[(-9)+-2]
  4880  0028CE  0EF5               	movlw	-11
  4881  0028D0  CFE3 F05A          	movff	plusw1,btemp+10
  4882  0028D4  0EF6               	movlw	-10
  4883  0028D6  CFE3 F05B          	movff	plusw1,btemp+11
  4884  0028DA  0E3A               	movlw	58
  4885  0028DC  245A               	addwf	btemp+10,w,c
  4886  0028DE  6ED9               	movwf	fsr2l,c
  4887  0028E0  0E00               	movlw	0
  4888  0028E2  205B               	addwfc	btemp+11,w,c
  4889  0028E4  6EDA               	movwf	fsr2h,c
  4890  0028E6  C051  FFDE         	movff	btemp+1,postinc2
  4891  0028EA  C052  FFDD         	movff	btemp+2,postdec2
  4892                           
  4893                           ;RF24Network_c.c: 1228: uint16_t parent_mask = rn->node_mask >> 3;
  4894                           ;stkvar	_rn @ sp[(-9)+-2]
  4895  0028EE  0EF5               	movlw	-11
  4896  0028F0  CFE3 F051          	movff	plusw1,btemp+1
  4897  0028F4  0EF6               	movlw	-10
  4898  0028F6  CFE3 F052          	movff	plusw1,btemp+2
  4899  0028FA  0E3A               	movlw	58
  4900  0028FC  2451               	addwf	btemp+1,w,c
  4901  0028FE  6ED9               	movwf	fsr2l,c
  4902  002900  0E00               	movlw	0
  4903  002902  2052               	addwfc	btemp+2,w,c
  4904  002904  6EDA               	movwf	fsr2h,c
  4905  002906  CFDE F051          	movff	postinc2,btemp+1
  4906  00290A  CFDD F052          	movff	postdec2,btemp+2
  4907  00290E  90D8               	bcf	status,0,c
  4908  002910  3252               	rrcf	btemp+2,f,c
  4909  002912  3251               	rrcf	btemp+1,f,c
  4910  002914  90D8               	bcf	status,0,c
  4911  002916  3252               	rrcf	btemp+2,f,c
  4912  002918  3251               	rrcf	btemp+1,f,c
  4913  00291A  90D8               	bcf	status,0,c
  4914  00291C  3252               	rrcf	btemp+2,f,c
  4915  00291E  3251               	rrcf	btemp+1,f,c
  4916                           
  4917                           ;stkvar	_parent_mask @ sp[(-9)+2]
  4918  002920  0EF9               	movlw	-7
  4919  002922  C051  FFE3         	movff	btemp+1,plusw1
  4920  002926  0EFA               	movlw	-6
  4921  002928  C052  FFE3         	movff	btemp+2,plusw1
  4922                           
  4923                           ;RF24Network_c.c: 1231: rn->parent_node = rn->node_address & parent_mask;
  4924                           ;stkvar	_parent_mask @ sp[(-9)+2]
  4925  00292C  0EF9               	movlw	-7
  4926  00292E  CFE3 F051          	movff	plusw1,btemp+1
  4927  002932  0EFA               	movlw	-6
  4928  002934  CFE3 F052          	movff	plusw1,btemp+2
  4929                           
  4930                           ;stkvar	_rn @ sp[(-9)+-2]
  4931  002938  0EF5               	movlw	-11
  4932  00293A  CFE3 F05A          	movff	plusw1,btemp+10
  4933  00293E  0EF6               	movlw	-10
  4934  002940  CFE3 F05B          	movff	plusw1,btemp+11
  4935  002944  0E32               	movlw	50
  4936  002946  245A               	addwf	btemp+10,w,c
  4937  002948  6ED9               	movwf	fsr2l,c
  4938  00294A  0E00               	movlw	0
  4939  00294C  205B               	addwfc	btemp+11,w,c
  4940  00294E  6EDA               	movwf	fsr2h,c
  4941  002950  CFDE F05A          	movff	postinc2,btemp+10
  4942  002954  CFDD F05B          	movff	postdec2,btemp+11
  4943  002958  5051               	movf	btemp+1,w,c
  4944  00295A  165A               	andwf	btemp+10,f,c
  4945  00295C  5052               	movf	btemp+2,w,c
  4946  00295E  165B               	andwf	btemp+11,f,c
  4947                           
  4948                           ;stkvar	_rn @ sp[(-9)+-2]
  4949  002960  0EF5               	movlw	-11
  4950  002962  CFE3 F051          	movff	plusw1,btemp+1
  4951  002966  0EF6               	movlw	-10
  4952  002968  CFE3 F052          	movff	plusw1,btemp+2
  4953  00296C  0E37               	movlw	55
  4954  00296E  2451               	addwf	btemp+1,w,c
  4955  002970  6ED9               	movwf	fsr2l,c
  4956  002972  0E00               	movlw	0
  4957  002974  2052               	addwfc	btemp+2,w,c
  4958  002976  6EDA               	movwf	fsr2h,c
  4959  002978  C05A  FFDE         	movff	btemp+10,postinc2
  4960  00297C  C05B  FFDD         	movff	btemp+11,postdec2
  4961                           
  4962                           ;RF24Network_c.c: 1234: uint16_t i = rn->node_address;
  4963                           ;stkvar	_rn @ sp[(-9)+-2]
  4964  002980  0EF5               	movlw	-11
  4965  002982  CFE3 F051          	movff	plusw1,btemp+1
  4966  002986  0EF6               	movlw	-10
  4967  002988  CFE3 F052          	movff	plusw1,btemp+2
  4968  00298C  0E32               	movlw	50
  4969  00298E  2451               	addwf	btemp+1,w,c
  4970  002990  6ED9               	movwf	fsr2l,c
  4971  002992  0E00               	movlw	0
  4972  002994  2052               	addwfc	btemp+2,w,c
  4973  002996  6EDA               	movwf	fsr2h,c
  4974  002998  CFDE F051          	movff	postinc2,btemp+1
  4975  00299C  CFDD F052          	movff	postdec2,btemp+2
  4976                           
  4977                           ;stkvar	_i @ sp[(-9)+6]
  4978  0029A0  0EFD               	movlw	-3
  4979  0029A2  C051  FFE3         	movff	btemp+1,plusw1
  4980  0029A6  0EFE               	movlw	-2
  4981  0029A8  C052  FFE3         	movff	btemp+2,plusw1
  4982                           
  4983                           ;RF24Network_c.c: 1235: uint16_t m = parent_mask;
  4984                           ;stkvar	_parent_mask @ sp[(-9)+2]
  4985                           ;stkvar	_m @ sp[(-9)+4]
  4986  0029AC  0EF9               	movlw	-7
  4987  0029AE  CFE3 F050          	movff	plusw1,btemp
  4988  0029B2  0EFB               	movlw	-5
  4989  0029B4  C050  FFE3         	movff	btemp,plusw1
  4990  0029B8  0EFA               	movlw	-6
  4991  0029BA  CFE3 F050          	movff	plusw1,btemp
  4992  0029BE  0EFC               	movlw	-4
  4993  0029C0  C050  FFE3         	movff	btemp,plusw1
  4994                           
  4995                           ;RF24Network_c.c: 1236: while (m)
  4996  0029C4  D022               	goto	l3002
  4997  0029C6                     l3000:
  4998                           
  4999                           ;RF24Network_c.c: 1237: {
  5000                           ;RF24Network_c.c: 1238: i >>= 3;
  5001  0029C6  0E03               	movlw	3
  5002  0029C8  6E5B               	movwf	btemp+11,c
  5003                           
  5004                           ;stkvar	_i @ sp[(-9)+6]
  5005  0029CA  50E1               	movf	fsr1l,w,c
  5006  0029CC  0FFD               	addlw	-3
  5007  0029CE  6ED9               	movwf	fsr2l,c
  5008  0029D0  50E2               	movf	fsr1h,w,c
  5009  0029D2  6EDA               	movwf	fsr2h,c
  5010  0029D4  0EFF               	movlw	255
  5011  0029D6  22DA               	addwfc	fsr2h,f,c
  5012  0029D8  285B               	incf	btemp+11,w,c
  5013  0029DA  D004               	goto	u1860
  5014  0029DC                     u1865:
  5015  0029DC  2AD9               	incf	fsr2l,f,c
  5016  0029DE  90D8               	bcf	status,0,c
  5017  0029E0  32DD               	rrcf	postdec2,f,c
  5018  0029E2  32DF               	rrcf	indf2,f,c
  5019  0029E4                     u1860:
  5020  0029E4  2EE8               	decfsz	wreg,f,c
  5021  0029E6  D7FA               	goto	u1865
  5022                           
  5023                           ;RF24Network_c.c: 1239: m >>= 3;
  5024  0029E8  0E03               	movlw	3
  5025  0029EA  6E5B               	movwf	btemp+11,c
  5026                           
  5027                           ;stkvar	_m @ sp[(-9)+4]
  5028  0029EC  50E1               	movf	fsr1l,w,c
  5029  0029EE  0FFB               	addlw	-5
  5030  0029F0  6ED9               	movwf	fsr2l,c
  5031  0029F2  50E2               	movf	fsr1h,w,c
  5032  0029F4  6EDA               	movwf	fsr2h,c
  5033  0029F6  0EFF               	movlw	255
  5034  0029F8  22DA               	addwfc	fsr2h,f,c
  5035  0029FA  285B               	incf	btemp+11,w,c
  5036  0029FC  D004               	goto	u1870
  5037  0029FE                     u1875:
  5038  0029FE  2AD9               	incf	fsr2l,f,c
  5039  002A00  90D8               	bcf	status,0,c
  5040  002A02  32DD               	rrcf	postdec2,f,c
  5041  002A04  32DF               	rrcf	indf2,f,c
  5042  002A06                     u1870:
  5043  002A06  2EE8               	decfsz	wreg,f,c
  5044  002A08  D7FA               	goto	u1875
  5045  002A0A                     l3002:
  5046                           
  5047                           ;stkvar	_m @ sp[(-9)+4]
  5048  002A0A  0EFB               	movlw	-5
  5049  002A0C  CFE3 F050          	movff	plusw1,btemp
  5050  002A10  0EFC               	movlw	-4
  5051  002A12  50E3               	movf	plusw1,w,c
  5052  002A14  1050               	iorwf	btemp,w,c
  5053  002A16  A4D8               	btfss	status,2,c
  5054  002A18  D7D6               	goto	l3000
  5055                           
  5056                           ;RF24Network_c.c: 1240: }
  5057                           ;RF24Network_c.c: 1241: rn->parent_pipe = i;
  5058                           ;stkvar	_i @ sp[(-9)+6]
  5059                           ;stkvar	_rn @ sp[(-9)+-2]
  5060  002A1A  0EF5               	movlw	-11
  5061  002A1C  CFE3 F051          	movff	plusw1,btemp+1
  5062  002A20  0EF6               	movlw	-10
  5063  002A22  CFE3 F052          	movff	plusw1,btemp+2
  5064  002A26  0E39               	movlw	57
  5065  002A28  2451               	addwf	btemp+1,w,c
  5066  002A2A  6ED9               	movwf	fsr2l,c
  5067  002A2C  0E00               	movlw	0
  5068  002A2E  2052               	addwfc	btemp+2,w,c
  5069  002A30  6EDA               	movwf	fsr2h,c
  5070  002A32  0EFD               	movlw	-3
  5071  002A34  CFE3 FFDF          	movff	plusw1,indf2
  5072                           
  5073                           ; _RF24N_setup_address: autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsiz
      +                          e = 2, argsize = 2, vargsize = 0
  5074  002A38  0EF5               	movlw	245
  5075  002A3A  26E1               	addwf	fsr1l,f,c
  5076  002A3C  0EFF               	movlw	255
  5077  002A3E  22E2               	addwfc	fsr1h,f,c
  5078  002A40  0012               	return		;funcret
  5079  002A42                     __end_of_RF24N_setup_address:
  5080                           	opt stack 0
  5081                           tblptru	equ	0xFF8
  5082                           tblptrh	equ	0xFF7
  5083                           tblptrl	equ	0xFF6
  5084                           tablat	equ	0xFF5
  5085                           prodl	equ	0xFF3
  5086                           intcon	equ	0xFF2
  5087                           postinc0	equ	0xFEE
  5088                           postdec0	equ	0xFED
  5089                           fsr0h	equ	0xFEA
  5090                           fsr0l	equ	0xFE9
  5091                           wreg	equ	0xFE8
  5092                           postinc1	equ	0xFE6
  5093                           postdec1	equ	0xFE5
  5094                           plusw1	equ	0xFE3
  5095                           fsr1h	equ	0xFE2
  5096                           fsr1l	equ	0xFE1
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           postdec2	equ	0xFDD
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _loop *****************
  5105 ;; Defined at:
  5106 ;;		line 53 in file "helloworld_tx.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  header          8  [STACK] struct .
  5111 ;;  payload         8  [STACK] struct .
  5112 ;;  ok              1  [STACK] unsigned char 
  5113 ;;  now             4  [STACK] unsigned long 
  5114 ;; Return value:  Size  Location     Type
  5115 ;;                  1  [STACK] void 
  5116 ;; Registers used:
  5117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
  5118 ;; Tracked objects:
  5119 ;;		On entry : 0/0
  5120 ;;		On exit  : 0/0
  5121 ;;		Unchanged: 0/0
  5122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;Total ram usage:        0 bytes
  5128 ;; Hardware stack levels used:    1
  5129 ;; Hardware stack levels required when called:   13
  5130 ;; This function calls:
  5131 ;;		_RF24NH_init
  5132 ;;		_RF24N_update
  5133 ;;		_RF24N_write_m
  5134 ;;		_Serial_print
  5135 ;;		_Serial_println
  5136 ;;		_millis
  5137 ;; This function is called by:
  5138 ;;		_main
  5139 ;; This function uses a reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text17
  5143  003458                     __ptext17:
  5144                           	opt stack 0
  5145  003458                     _loop:
  5146                           	opt stack 0
  5147                           
  5148                           ; autosize = 21, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 va
      +                          rgsize = 0, retsize = 0
  5149  003458  0E15               	movlw	21
  5150  00345A  26E1               	addwf	fsr1l,f,c
  5151  00345C  0E00               	movlw	0
  5152  00345E  22E2               	addwfc	fsr1h,f,c
  5153                           
  5154                           ;helloworld_tx.c: 55: RF24N_update(&network);
  5155                           
  5156                           ;incstack = 0
  5157  003460  0E0C               	movlw	low _network
  5158  003462  6EE6               	movwf	postinc1,c
  5159  003464  0E0E               	movlw	high _network
  5160  003466  6EE6               	movwf	postinc1,c
  5161  003468  ECA4  F005         	call	_RF24N_update	;wreg free
  5162                           
  5163                           ;helloworld_tx.c: 58: unsigned long now = millis();
  5164  00346C  EC4A  F028         	call	_millis	;wreg free
  5165                           
  5166                           ;stkvar	_now @ sp[(-21)+17]
  5167  003470  0EFC               	movlw	-4
  5168  003472  C050  FFE3         	movff	btemp,plusw1
  5169  003476  0EFD               	movlw	-3
  5170  003478  C051  FFE3         	movff	btemp+1,plusw1
  5171  00347C  0EFE               	movlw	-2
  5172  00347E  C052  FFE3         	movff	btemp+2,plusw1
  5173  003482  0EFF               	movlw	-1
  5174  003484  C053  FFE3         	movff	btemp+3,plusw1
  5175                           
  5176                           ;helloworld_tx.c: 59: if ( now - last_sent >= interval )
  5177                           ;stkvar	_now @ sp[(-21)+17]
  5178  003488  0EFC               	movlw	-4
  5179  00348A  CFE3 F058          	movff	plusw1,btemp+8
  5180  00348E  0EFD               	movlw	-3
  5181  003490  CFE3 F059          	movff	plusw1,btemp+9
  5182  003494  0EFE               	movlw	-2
  5183  003496  CFE3 F05A          	movff	plusw1,btemp+10
  5184  00349A  0EFF               	movlw	-1
  5185  00349C  CFE3 F05B          	movff	plusw1,btemp+11
  5186  0034A0  5001               	movf	_last_sent,w,c
  5187  0034A2  5C58               	subwf	btemp+8,w,c
  5188  0034A4  6E54               	movwf	btemp+4,c
  5189  0034A6  5002               	movf	_last_sent+1,w,c
  5190  0034A8  5859               	subwfb	btemp+9,w,c
  5191  0034AA  6E55               	movwf	btemp+5,c
  5192  0034AC  5003               	movf	_last_sent+2,w,c
  5193  0034AE  585A               	subwfb	btemp+10,w,c
  5194  0034B0  6E56               	movwf	btemp+6,c
  5195  0034B2  5004               	movf	_last_sent+3,w,c
  5196  0034B4  585B               	subwfb	btemp+11,w,c
  5197  0034B6  6E57               	movwf	btemp+7,c
  5198  0034B8  5057               	movf	btemp+7,w,c
  5199  0034BA  1056               	iorwf	btemp+6,w,c
  5200  0034BC  E106               	bnz	u2640
  5201  0034BE  0ED0               	movlw	208
  5202  0034C0  5C54               	subwf	btemp+4,w,c
  5203  0034C2  0E07               	movlw	7
  5204  0034C4  5855               	subwfb	btemp+5,w,c
  5205  0034C6  A0D8               	btfss	status,0,c
  5206  0034C8  D06F               	goto	l45
  5207  0034CA                     u2640:
  5208                           
  5209                           ;helloworld_tx.c: 60: {
  5210                           ;helloworld_tx.c: 61: last_sent = now;
  5211                           ;stkvar	_now @ sp[(-21)+17]
  5212  0034CA  50E1               	movf	fsr1l,w,c
  5213  0034CC  0FFC               	addlw	-4
  5214  0034CE  6ED9               	movwf	fsr2l,c
  5215  0034D0  50E2               	movf	fsr1h,w,c
  5216  0034D2  6EDA               	movwf	fsr2h,c
  5217  0034D4  0EFF               	movlw	255
  5218  0034D6  22DA               	addwfc	fsr2h,f,c
  5219  0034D8  CFDE F001          	movff	postinc2,_last_sent
  5220  0034DC  CFDE F002          	movff	postinc2,_last_sent+1
  5221  0034E0  CFDE F003          	movff	postinc2,_last_sent+2
  5222  0034E4  CFDE F004          	movff	postinc2,_last_sent+3
  5223                           
  5224                           ;helloworld_tx.c: 63: Serial_print("Sending...");
  5225  0034E8  0E9D               	movlw	low STR_2
  5226  0034EA  6EE6               	movwf	postinc1,c
  5227  0034EC  0EFF               	movlw	high STR_2
  5228  0034EE  6EE6               	movwf	postinc1,c
  5229  0034F0  ECC6  F022         	call	_Serial_print	;wreg free
  5230                           
  5231                           ;helloworld_tx.c: 64: payload_t payload;
  5232                           ;helloworld_tx.c: 65: payload.ms= millis();
  5233  0034F4  EC4A  F028         	call	_millis	;wreg free
  5234                           
  5235                           ;stkvar	_payload @ sp[(-21)+8]
  5236  0034F8  0EF3               	movlw	-13
  5237  0034FA  C050  FFE3         	movff	btemp,plusw1
  5238  0034FE  0EF4               	movlw	-12
  5239  003500  C051  FFE3         	movff	btemp+1,plusw1
  5240  003504  0EF5               	movlw	-11
  5241  003506  C052  FFE3         	movff	btemp+2,plusw1
  5242  00350A  0EF6               	movlw	-10
  5243  00350C  C053  FFE3         	movff	btemp+3,plusw1
  5244                           
  5245                           ;helloworld_tx.c: 66: payload.counter=packets_sent++;
  5246                           ;stkvar	_payload @ sp[(-21)+8]
  5247  003510  0EF7               	movlw	247
  5248  003512  24E1               	addwf	fsr1l,w,c
  5249  003514  6ED9               	movwf	fsr2l,c
  5250  003516  0EFF               	movlw	255
  5251  003518  20E2               	addwfc	fsr1h,w,c
  5252  00351A  6EDA               	movwf	fsr2h,c
  5253  00351C  C009  FFDE         	movff	_packets_sent,postinc2
  5254  003520  C00A  FFDE         	movff	_packets_sent+1,postinc2
  5255  003524  C00B  FFDE         	movff	_packets_sent+2,postinc2
  5256  003528  C00C  FFDE         	movff	_packets_sent+3,postinc2
  5257  00352C  0E01               	movlw	1
  5258  00352E  2609               	addwf	_packets_sent,f,c
  5259  003530  0E00               	movlw	0
  5260  003532  220A               	addwfc	_packets_sent+1,f,c
  5261  003534  220B               	addwfc	_packets_sent+2,f,c
  5262  003536  220C               	addwfc	_packets_sent+3,f,c
  5263                           
  5264                           ;helloworld_tx.c: 67: RF24NetworkHeader header;
  5265                           ;helloworld_tx.c: 68: RF24NH_init(&header, other_node,0);
  5266  003538  0E00               	movlw	0
  5267  00353A  6EE6               	movwf	postinc1,c
  5268  00353C  0E00               	movlw	0
  5269  00353E  6EE6               	movwf	postinc1,c
  5270  003540  0E00               	movlw	0
  5271  003542  6EE6               	movwf	postinc1,c
  5272                           
  5273                           ;stkvar	_header @ sp[(-24)+0]
  5274  003544  0EE8               	movlw	232
  5275  003546  24E1               	addwf	fsr1l,w,c
  5276  003548  6EE6               	movwf	postinc1,c
  5277  00354A  0EFF               	movlw	255
  5278  00354C  20E2               	addwfc	fsr1h,w,c
  5279  00354E  6EE6               	movwf	postinc1,c
  5280  003550  EC0D  F023         	call	_RF24NH_init	;wreg free
  5281                           
  5282                           ;helloworld_tx.c: 69: bool ok = RF24N_write_m(&network,&header,&payload,sizeof(payload))
      +                          ;
  5283  003554  0E08               	movlw	8
  5284  003556  6EE6               	movwf	postinc1,c
  5285  003558  0E00               	movlw	0
  5286  00355A  6EE6               	movwf	postinc1,c
  5287                           
  5288                           ;stkvar	_payload @ sp[(-23)+8]
  5289  00355C  0EF1               	movlw	241
  5290  00355E  24E1               	addwf	fsr1l,w,c
  5291  003560  6EE6               	movwf	postinc1,c
  5292  003562  0EFF               	movlw	255
  5293  003564  20E2               	addwfc	fsr1h,w,c
  5294  003566  6EE6               	movwf	postinc1,c
  5295                           
  5296                           ;stkvar	_header @ sp[(-25)+0]
  5297  003568  0EE7               	movlw	231
  5298  00356A  24E1               	addwf	fsr1l,w,c
  5299  00356C  6EE6               	movwf	postinc1,c
  5300  00356E  0EFF               	movlw	255
  5301  003570  20E2               	addwfc	fsr1h,w,c
  5302  003572  6EE6               	movwf	postinc1,c
  5303  003574  0E0C               	movlw	low _network
  5304  003576  6EE6               	movwf	postinc1,c
  5305  003578  0E0E               	movlw	high _network
  5306  00357A  6EE6               	movwf	postinc1,c
  5307  00357C  EC2D  F027         	call	_RF24N_write_m	;wreg free
  5308                           
  5309                           ;stkvar	_ok @ sp[(-21)+16]
  5310  003580  0EFB               	movlw	-5
  5311  003582  C050  FFE3         	movff	btemp,plusw1
  5312                           
  5313                           ;helloworld_tx.c: 70: if (ok)
  5314                           ;stkvar	_ok @ sp[(-21)+16]
  5315  003586  0EFB               	movlw	-5
  5316  003588  50E3               	movf	plusw1,w,c
  5317  00358A  B4D8               	btfsc	status,2,c
  5318  00358C  D007               	goto	l3486
  5319                           
  5320                           ;helloworld_tx.c: 71: Serial_println("ok.");
  5321  00358E  0EFB               	movlw	low STR_3
  5322  003590  6EE6               	movwf	postinc1,c
  5323  003592  0EFF               	movlw	high STR_3
  5324  003594  6EE6               	movwf	postinc1,c
  5325  003596  ECE7  F027         	call	_Serial_println	;wreg free
  5326  00359A  D006               	goto	l45
  5327  00359C                     l3486:
  5328                           
  5329                           ;helloworld_tx.c: 72: else
  5330                           ;helloworld_tx.c: 73: Serial_println("failed.");
  5331  00359C  0ED4               	movlw	low STR_4
  5332  00359E  6EE6               	movwf	postinc1,c
  5333  0035A0  0EFF               	movlw	high STR_4
  5334  0035A2  6EE6               	movwf	postinc1,c
  5335  0035A4  ECE7  F027         	call	_Serial_println	;wreg free
  5336  0035A8                     l45:
  5337                           
  5338                           ; _loop: autosize = 21, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize
      +                           = 0, vargsize = 0
  5339  0035A8  0EEB               	movlw	235
  5340  0035AA  26E1               	addwf	fsr1l,f,c
  5341  0035AC  0EFF               	movlw	255
  5342  0035AE  22E2               	addwfc	fsr1h,f,c
  5343  0035B0  0012               	return		;funcret
  5344  0035B2                     __end_of_loop:
  5345                           	opt stack 0
  5346                           tblptru	equ	0xFF8
  5347                           tblptrh	equ	0xFF7
  5348                           tblptrl	equ	0xFF6
  5349                           tablat	equ	0xFF5
  5350                           prodl	equ	0xFF3
  5351                           intcon	equ	0xFF2
  5352                           postinc0	equ	0xFEE
  5353                           postdec0	equ	0xFED
  5354                           fsr0h	equ	0xFEA
  5355                           fsr0l	equ	0xFE9
  5356                           wreg	equ	0xFE8
  5357                           postinc1	equ	0xFE6
  5358                           postdec1	equ	0xFE5
  5359                           plusw1	equ	0xFE3
  5360                           fsr1h	equ	0xFE2
  5361                           fsr1l	equ	0xFE1
  5362                           indf2	equ	0xFDF
  5363                           postinc2	equ	0xFDE
  5364                           postdec2	equ	0xFDD
  5365                           fsr2h	equ	0xFDA
  5366                           fsr2l	equ	0xFD9
  5367                           status	equ	0xFD8
  5368                           
  5369 ;; *************** function _Serial_println *****************
  5370 ;; Defined at:
  5371 ;;		line 76 in file "serial.c"
  5372 ;; Parameters:    Size  Location     Type
  5373 ;;  val             2  [STACK] PTR const unsigned char 
  5374 ;;		 -> STR_4(8), STR_3(4), STR_1(36), 
  5375 ;; Auto vars:     Size  Location     Type
  5376 ;;		None
  5377 ;; Return value:  Size  Location     Type
  5378 ;;                  1  [STACK] void 
  5379 ;; Registers used:
  5380 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, tblptrl, tblptrh, tblptru
  5381 ;; Tracked objects:
  5382 ;;		On entry : 0/0
  5383 ;;		On exit  : 0/0
  5384 ;;		Unchanged: 0/0
  5385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;Total ram usage:        0 bytes
  5391 ;; Hardware stack levels used:    1
  5392 ;; Hardware stack levels required when called:    3
  5393 ;; This function calls:
  5394 ;;		_Serial_print
  5395 ;; This function is called by:
  5396 ;;		_setup
  5397 ;;		_loop
  5398 ;; This function uses a reentrant model
  5399 ;;
  5400                           
  5401                           	psect	text18
  5402  004FCE                     __ptext18:
  5403                           	opt stack 0
  5404  004FCE                     _Serial_println:
  5405                           	opt stack 26
  5406                           
  5407                           ;serial.c: 78: Serial_print(val);
  5408                           ;stkvar	_val @ sp[(0)+-2]
  5409                           
  5410                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  5411                           ;incstack = 0
  5412  004FCE  0EFE               	movlw	-2
  5413  004FD0  CFE3 FFE6          	movff	plusw1,postinc1
  5414  004FD4  CFE3 FFE6          	movff	plusw1,postinc1
  5415  004FD8  ECC6  F022         	call	_Serial_print	;wreg free
  5416                           
  5417                           ;serial.c: 79: Serial_print("\r\n");
  5418  004FDC  0E67               	movlw	low (STR_27+12)
  5419  004FDE  6EE6               	movwf	postinc1,c
  5420  004FE0  0EFF               	movlw	high (STR_27+12)
  5421  004FE2  6EE6               	movwf	postinc1,c
  5422  004FE4  ECC6  F022         	call	_Serial_print	;wreg free
  5423                           
  5424                           ; _Serial_println: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2
      +                          , argsize = 2, vargsize = 0
  5425  004FE8  52E5               	movf	postdec1,f,c
  5426  004FEA  52E5               	movf	postdec1,f,c
  5427  004FEC  0012               	return		;funcret
  5428  004FEE                     __end_of_Serial_println:
  5429                           	opt stack 0
  5430                           tblptru	equ	0xFF8
  5431                           tblptrh	equ	0xFF7
  5432                           tblptrl	equ	0xFF6
  5433                           tablat	equ	0xFF5
  5434                           prodl	equ	0xFF3
  5435                           intcon	equ	0xFF2
  5436                           postinc0	equ	0xFEE
  5437                           postdec0	equ	0xFED
  5438                           fsr0h	equ	0xFEA
  5439                           fsr0l	equ	0xFE9
  5440                           wreg	equ	0xFE8
  5441                           postinc1	equ	0xFE6
  5442                           postdec1	equ	0xFE5
  5443                           plusw1	equ	0xFE3
  5444                           fsr1h	equ	0xFE2
  5445                           fsr1l	equ	0xFE1
  5446                           indf2	equ	0xFDF
  5447                           postinc2	equ	0xFDE
  5448                           postdec2	equ	0xFDD
  5449                           fsr2h	equ	0xFDA
  5450                           fsr2l	equ	0xFD9
  5451                           status	equ	0xFD8
  5452                           
  5453 ;; *************** function _Serial_print *****************
  5454 ;; Defined at:
  5455 ;;		line 65 in file "serial.c"
  5456 ;; Parameters:    Size  Location     Type
  5457 ;;  val             2  [STACK] PTR const unsigned char 
  5458 ;;		 -> STR_5(3), STR_4(8), STR_3(4), STR_2(11), 
  5459 ;;		 -> STR_1(36), 
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;  i               2  [STACK] unsigned int 
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1  [STACK] void 
  5464 ;; Registers used:
  5465 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, tblptrl, tblptrh, tblptru
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    2
  5478 ;; This function calls:
  5479 ;;		_Serial_tx
  5480 ;; This function is called by:
  5481 ;;		_loop
  5482 ;;		_Serial_println
  5483 ;; This function uses a reentrant model
  5484 ;;
  5485                           
  5486                           	psect	text19
  5487  00458C                     __ptext19:
  5488                           	opt stack 0
  5489  00458C                     _Serial_print:
  5490                           	opt stack 0
  5491                           
  5492                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  5493  00458C  52E6               	movf	postinc1,f,c
  5494  00458E  52E6               	movf	postinc1,f,c
  5495                           
  5496                           ;serial.c: 67: unsigned int i=0;
  5497                           ;stkvar	_i @ sp[(-2)+0]
  5498                           
  5499                           ;incstack = 0
  5500  004590  0EFE               	movlw	-2
  5501  004592  6AE3               	clrf	plusw1,c
  5502  004594  0EFF               	movlw	-1
  5503  004596  6AE3               	clrf	plusw1,c
  5504                           
  5505                           ;serial.c: 69: while(val[i])
  5506  004598  D025               	goto	l2962
  5507  00459A                     l2958:
  5508                           
  5509                           ;serial.c: 70: {
  5510                           ;serial.c: 71: Serial_tx(val[i]);
  5511                           ;stkvar	_i @ sp[(-2)+0]
  5512                           ;stkvar	_val @ sp[(-2)+-2]
  5513  00459A  0EFC               	movlw	-4
  5514  00459C  CFE3 F051          	movff	plusw1,btemp+1
  5515  0045A0  0EFD               	movlw	-3
  5516  0045A2  CFE3 F052          	movff	plusw1,btemp+2
  5517  0045A6  0EFE               	movlw	-2
  5518  0045A8  50E3               	movf	plusw1,w,c
  5519  0045AA  2651               	addwf	btemp+1,f,c
  5520  0045AC  0EFF               	movlw	-1
  5521  0045AE  50E3               	movf	plusw1,w,c
  5522  0045B0  2252               	addwfc	btemp+2,f,c
  5523  0045B2  C051  FFF6         	movff	btemp+1,tblptrl
  5524  0045B6  C052  FFF7         	movff	btemp+2,tblptrh
  5525  0045BA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5526  0045BA  6AF8               	clrf	tblptru,c
  5527  0045BC                     	endif
  5528  0045BC                     	if	0	;tblptru may be non-zero
  5529  0045BC                     	endif
  5530  0045BC  0008               	tblrd		*
  5531  0045BE  50F5               	movf	tablat,w,c
  5532  0045C0  6EE6               	movwf	postinc1,c
  5533  0045C2  EC53  F028         	call	_Serial_tx	;wreg free
  5534                           
  5535                           ;serial.c: 72: i++;
  5536                           ;stkvar	_i @ sp[(-2)+0]
  5537  0045C6  0EFE               	movlw	-2
  5538  0045C8  50E3               	movf	plusw1,w,c
  5539  0045CA  0F01               	addlw	1
  5540  0045CC  6E50               	movwf	btemp,c
  5541  0045CE  0EFE               	movlw	-2
  5542  0045D0  C050  FFE3         	movff	btemp,plusw1
  5543  0045D4  6A50               	clrf	btemp,c
  5544  0045D6  0EFF               	movlw	-1
  5545  0045D8  50E3               	movf	plusw1,w,c
  5546  0045DA  2050               	addwfc	btemp,w,c
  5547  0045DC  6E50               	movwf	btemp,c
  5548  0045DE  0EFF               	movlw	-1
  5549  0045E0  C050  FFE3         	movff	btemp,plusw1
  5550  0045E4                     l2962:
  5551                           
  5552                           ;stkvar	_i @ sp[(-2)+0]
  5553                           ;stkvar	_val @ sp[(-2)+-2]
  5554  0045E4  0EFC               	movlw	-4
  5555  0045E6  CFE3 F051          	movff	plusw1,btemp+1
  5556  0045EA  0EFD               	movlw	-3
  5557  0045EC  CFE3 F052          	movff	plusw1,btemp+2
  5558  0045F0  0EFE               	movlw	-2
  5559  0045F2  50E3               	movf	plusw1,w,c
  5560  0045F4  2651               	addwf	btemp+1,f,c
  5561  0045F6  0EFF               	movlw	-1
  5562  0045F8  50E3               	movf	plusw1,w,c
  5563  0045FA  2252               	addwfc	btemp+2,f,c
  5564  0045FC  C051  FFF6         	movff	btemp+1,tblptrl
  5565  004600  C052  FFF7         	movff	btemp+2,tblptrh
  5566  004604                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5567  004604  6AF8               	clrf	tblptru,c
  5568  004606                     	endif
  5569  004606                     	if	0	;tblptru may be non-zero
  5570  004606                     	endif
  5571  004606  0008               	tblrd		*
  5572  004608  50F5               	movf	tablat,w,c
  5573  00460A  0900               	iorlw	0
  5574  00460C  A4D8               	btfss	status,2,c
  5575  00460E  D7C5               	goto	l2958
  5576                           
  5577                           ; _Serial_print: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, 
      +                          argsize = 2, vargsize = 0
  5578  004610  52E5               	movf	postdec1,f,c
  5579  004612  52E5               	movf	postdec1,f,c
  5580  004614  52E5               	movf	postdec1,f,c
  5581  004616  52E5               	movf	postdec1,f,c
  5582  004618  0012               	return		;funcret
  5583  00461A                     __end_of_Serial_print:
  5584                           	opt stack 0
  5585                           tblptru	equ	0xFF8
  5586                           tblptrh	equ	0xFF7
  5587                           tblptrl	equ	0xFF6
  5588                           tablat	equ	0xFF5
  5589                           prodl	equ	0xFF3
  5590                           intcon	equ	0xFF2
  5591                           postinc0	equ	0xFEE
  5592                           postdec0	equ	0xFED
  5593                           fsr0h	equ	0xFEA
  5594                           fsr0l	equ	0xFE9
  5595                           wreg	equ	0xFE8
  5596                           postinc1	equ	0xFE6
  5597                           postdec1	equ	0xFE5
  5598                           plusw1	equ	0xFE3
  5599                           fsr1h	equ	0xFE2
  5600                           fsr1l	equ	0xFE1
  5601                           indf2	equ	0xFDF
  5602                           postinc2	equ	0xFDE
  5603                           postdec2	equ	0xFDD
  5604                           fsr2h	equ	0xFDA
  5605                           fsr2l	equ	0xFD9
  5606                           status	equ	0xFD8
  5607                           
  5608 ;; *************** function _Serial_tx *****************
  5609 ;; Defined at:
  5610 ;;		line 59 in file "serial.c"
  5611 ;; Parameters:    Size  Location     Type
  5612 ;;  val             1  [STACK] const unsigned char 
  5613 ;; Auto vars:     Size  Location     Type
  5614 ;;		None
  5615 ;; Return value:  Size  Location     Type
  5616 ;;                  1  [STACK] void 
  5617 ;; Registers used:
  5618 ;;		fsr1l, fsr1h
  5619 ;; Tracked objects:
  5620 ;;		On entry : 0/0
  5621 ;;		On exit  : 0/0
  5622 ;;		Unchanged: 0/0
  5623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5627 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5628 ;;Total ram usage:        0 bytes
  5629 ;; Hardware stack levels used:    1
  5630 ;; Hardware stack levels required when called:    1
  5631 ;; This function calls:
  5632 ;;		Nothing
  5633 ;; This function is called by:
  5634 ;;		_Serial_print
  5635 ;; This function uses a reentrant model
  5636 ;;
  5637                           
  5638                           	psect	text20
  5639  0050A6                     __ptext20:
  5640                           	opt stack 0
  5641  0050A6                     _Serial_tx:
  5642                           	opt stack 26
  5643                           
  5644                           ;serial.c: 61: TXREG=val;
  5645                           ;stkvar	_val @ sp[(0)+-1]
  5646                           
  5647                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
  5648                           ;incstack = 0
  5649  0050A6  0EFF               	movlw	-1
  5650  0050A8  CFE3 FFAD          	movff	plusw1,4013	;volatile
  5651  0050AC                     l95:
  5652  0050AC  A2AC               	btfss	4012,1,c	;volatile
  5653  0050AE  D7FE               	goto	l95
  5654                           
  5655                           ; _Serial_tx: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, arg
      +                          size = 1, vargsize = 0
  5656  0050B0  52E5               	movf	postdec1,f,c
  5657  0050B2  0012               	return		;funcret
  5658  0050B4                     __end_of_Serial_tx:
  5659                           	opt stack 0
  5660                           tblptru	equ	0xFF8
  5661                           tblptrh	equ	0xFF7
  5662                           tblptrl	equ	0xFF6
  5663                           tablat	equ	0xFF5
  5664                           prodl	equ	0xFF3
  5665                           intcon	equ	0xFF2
  5666                           postinc0	equ	0xFEE
  5667                           postdec0	equ	0xFED
  5668                           fsr0h	equ	0xFEA
  5669                           fsr0l	equ	0xFE9
  5670                           wreg	equ	0xFE8
  5671                           postinc1	equ	0xFE6
  5672                           postdec1	equ	0xFE5
  5673                           plusw1	equ	0xFE3
  5674                           fsr1h	equ	0xFE2
  5675                           fsr1l	equ	0xFE1
  5676                           indf2	equ	0xFDF
  5677                           postinc2	equ	0xFDE
  5678                           postdec2	equ	0xFDD
  5679                           fsr2h	equ	0xFDA
  5680                           fsr2l	equ	0xFD9
  5681                           status	equ	0xFD8
  5682                           
  5683 ;; *************** function _RF24N_write_m *****************
  5684 ;; Defined at:
  5685 ;;		line 784 in file "../../RF24Network_c.c"
  5686 ;; Parameters:    Size  Location     Type
  5687 ;;  rn              2  [STACK] PTR struct .
  5688 ;;		 -> network(372), 
  5689 ;;  header          2  [STACK] PTR struct .
  5690 ;;		 -> header(8), 
  5691 ;;  message         2  [STACK] PTR const void 
  5692 ;;		 -> payload(8), 
  5693 ;;  len             2  [STACK] unsigned int 
  5694 ;; Auto vars:     Size  Location     Type
  5695 ;;		None
  5696 ;; Return value:  Size  Location     Type
  5697 ;;                  1  [STACK] unsigned char 
  5698 ;; Registers used:
  5699 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
  5700 ;; Tracked objects:
  5701 ;;		On entry : 0/0
  5702 ;;		On exit  : 0/0
  5703 ;;		Unchanged: 0/0
  5704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5706 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5708 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5709 ;;Total ram usage:        0 bytes
  5710 ;; Hardware stack levels used:    1
  5711 ;; Hardware stack levels required when called:   12
  5712 ;; This function calls:
  5713 ;;		_RF24N_write_
  5714 ;; This function is called by:
  5715 ;;		_loop
  5716 ;; This function uses a reentrant model
  5717 ;;
  5718                           
  5719                           	psect	text21
  5720  004E5A                     __ptext21:
  5721                           	opt stack 0
  5722  004E5A                     _RF24N_write_m:
  5723                           	opt stack 17
  5724                           
  5725                           ;RF24Network_c.c: 785: return RF24N_write_(rn,header,message,len,070);
  5726                           
  5727                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
  5728                           ;incstack = 0
  5729  004E5A  0E38               	movlw	56
  5730  004E5C  6EE6               	movwf	postinc1,c
  5731  004E5E  0E00               	movlw	0
  5732  004E60  6EE6               	movwf	postinc1,c
  5733                           
  5734                           ;stkvar	_len @ sp[(-2)+-8]
  5735  004E62  0EF6               	movlw	-10
  5736  004E64  CFE3 FFE6          	movff	plusw1,postinc1
  5737  004E68  CFE3 FFE6          	movff	plusw1,postinc1
  5738                           
  5739                           ;stkvar	_message @ sp[(-4)+-6]
  5740  004E6C  0EF6               	movlw	-10
  5741  004E6E  CFE3 FFE6          	movff	plusw1,postinc1
  5742  004E72  CFE3 FFE6          	movff	plusw1,postinc1
  5743                           
  5744                           ;stkvar	_header @ sp[(-6)+-4]
  5745  004E76  0EF6               	movlw	-10
  5746  004E78  CFE3 FFE6          	movff	plusw1,postinc1
  5747  004E7C  CFE3 FFE6          	movff	plusw1,postinc1
  5748                           
  5749                           ;stkvar	_rn @ sp[(-8)+-2]
  5750  004E80  0EF6               	movlw	-10
  5751  004E82  CFE3 FFE6          	movff	plusw1,postinc1
  5752  004E86  CFE3 FFE6          	movff	plusw1,postinc1
  5753  004E8A  EC84  F009         	call	_RF24N_write_	;wreg free
  5754                           
  5755                           ; _RF24N_write_m: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8,
      +                           argsize = 8, vargsize = 0
  5756  004E8E  0EF8               	movlw	248
  5757  004E90  26E1               	addwf	fsr1l,f,c
  5758  004E92  0EFF               	movlw	255
  5759  004E94  22E2               	addwfc	fsr1h,f,c
  5760  004E96  0012               	return		;funcret
  5761  004E98                     __end_of_RF24N_write_m:
  5762                           	opt stack 0
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodl	equ	0xFF3
  5768                           intcon	equ	0xFF2
  5769                           postinc0	equ	0xFEE
  5770                           postdec0	equ	0xFED
  5771                           fsr0h	equ	0xFEA
  5772                           fsr0l	equ	0xFE9
  5773                           wreg	equ	0xFE8
  5774                           postinc1	equ	0xFE6
  5775                           postdec1	equ	0xFE5
  5776                           plusw1	equ	0xFE3
  5777                           fsr1h	equ	0xFE2
  5778                           fsr1l	equ	0xFE1
  5779                           indf2	equ	0xFDF
  5780                           postinc2	equ	0xFDE
  5781                           postdec2	equ	0xFDD
  5782                           fsr2h	equ	0xFDA
  5783                           fsr2l	equ	0xFD9
  5784                           status	equ	0xFD8
  5785                           
  5786 ;; *************** function _RF24N_write_ *****************
  5787 ;; Defined at:
  5788 ;;		line 788 in file "../../RF24Network_c.c"
  5789 ;; Parameters:    Size  Location     Type
  5790 ;;  rn              2  [STACK] PTR struct .
  5791 ;;		 -> network(372), 
  5792 ;;  header          2  [STACK] PTR struct .
  5793 ;;		 -> header(8), 
  5794 ;;  message         2  [STACK] PTR const void 
  5795 ;;		 -> payload(8), 
  5796 ;;  len             2  [STACK] unsigned int 
  5797 ;;  writeDirect     2  [STACK] unsigned int 
  5798 ;; Auto vars:     Size  Location     Type
  5799 ;;  offset          2  [STACK] unsigned int 
  5800 ;;  fragmentLen     2  [STACK] unsigned int 
  5801 ;;  fragment_id     1  [STACK] unsigned char 
  5802 ;;  ok              1  [STACK] unsigned char 
  5803 ;;  msgCount        1  [STACK] unsigned char 
  5804 ;;  type            1  [STACK] unsigned char 
  5805 ;;  retriesPerFr    1  [STACK] unsigned char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1  [STACK] unsigned char 
  5808 ;; Registers used:
  5809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:        0 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:   11
  5822 ;; This function calls:
  5823 ;;		_RF24N__write
  5824 ;;		_RF24N_update
  5825 ;;		_RF24_setAutoAck_p
  5826 ;;		_RF24_startListening
  5827 ;;		_RF24_stopListening
  5828 ;;		_RF24_txStandBy_t
  5829 ;;		___lwdiv
  5830 ;;		___lwmod
  5831 ;;		___wmul
  5832 ;;		_delay
  5833 ;;		_delayMicroseconds
  5834 ;;		_millis
  5835 ;; This function is called by:
  5836 ;;		_RF24N_write_m
  5837 ;; This function uses a reentrant model
  5838 ;;
  5839                           
  5840                           	psect	text22
  5841  001308                     __ptext22:
  5842                           	opt stack 0
  5843  001308                     _RF24N_write_:
  5844                           	opt stack 0
  5845                           
  5846                           ; autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10 v
      +                          argsize = 0, retsize = 0
  5847  001308  0E09               	movlw	9
  5848  00130A  26E1               	addwf	fsr1l,f,c
  5849  00130C  0E00               	movlw	0
  5850  00130E  22E2               	addwfc	fsr1h,f,c
  5851                           
  5852                           ;RF24Network_c.c: 790: while(millis()-rn->txTime < 25){ if(RF24N_update(rn) > 127){break
      +                          ;} }
  5853                           
  5854                           ;incstack = 0
  5855  001310  D00B               	goto	l3026
  5856  001312                     l3022:
  5857                           
  5858                           ;stkvar	_rn @ sp[(-9)+-2]
  5859  001312  0EF5               	movlw	-11
  5860  001314  CFE3 FFE6          	movff	plusw1,postinc1
  5861  001318  CFE3 FFE6          	movff	plusw1,postinc1
  5862  00131C  ECA4  F005         	call	_RF24N_update	;wreg free
  5863  001320  0E7F               	movlw	127
  5864  001322  6450               	cpfsgt	btemp,c
  5865  001324  D001               	goto	l3026
  5866  001326  D02C               	goto	l3028
  5867  001328                     l3026:
  5868                           
  5869                           ;stkvar	_rn @ sp[(-9)+-2]
  5870  001328  0EF5               	movlw	-11
  5871  00132A  CFE3 F051          	movff	plusw1,btemp+1
  5872  00132E  0EF6               	movlw	-10
  5873  001330  CFE3 F052          	movff	plusw1,btemp+2
  5874  001334  0E2B               	movlw	43
  5875  001336  2451               	addwf	btemp+1,w,c
  5876  001338  6ED9               	movwf	fsr2l,c
  5877  00133A  0E00               	movlw	0
  5878  00133C  2052               	addwfc	btemp+2,w,c
  5879  00133E  6EDA               	movwf	fsr2h,c
  5880  001340  CFDE F058          	movff	postinc2,btemp+8
  5881  001344  CFDE F059          	movff	postinc2,btemp+9
  5882  001348  CFDE F05A          	movff	postinc2,btemp+10
  5883  00134C  CFDE F05B          	movff	postinc2,btemp+11
  5884  001350  EC4A  F028         	call	_millis	;wreg free
  5885  001354  5058               	movf	btemp+8,w,c
  5886  001356  5C50               	subwf	btemp,w,c
  5887  001358  6E54               	movwf	btemp+4,c
  5888  00135A  5059               	movf	btemp+9,w,c
  5889  00135C  5851               	subwfb	btemp+1,w,c
  5890  00135E  6E55               	movwf	btemp+5,c
  5891  001360  505A               	movf	btemp+10,w,c
  5892  001362  5852               	subwfb	btemp+2,w,c
  5893  001364  6E56               	movwf	btemp+6,c
  5894  001366  505B               	movf	btemp+11,w,c
  5895  001368  5853               	subwfb	btemp+3,w,c
  5896  00136A  6E57               	movwf	btemp+7,c
  5897  00136C  BE57               	btfsc	btemp+7,7,c
  5898  00136E  D7D1               	goto	l3022
  5899  001370  5057               	movf	btemp+7,w,c
  5900  001372  1056               	iorwf	btemp+6,w,c
  5901  001374  1055               	iorwf	btemp+5,w,c
  5902  001376  E104               	bnz	u1940
  5903  001378  0E19               	movlw	25
  5904  00137A  5C54               	subwf	btemp+4,w,c
  5905  00137C  A0D8               	btfss	status,0,c
  5906  00137E  D7C9               	goto	l3022
  5907  001380                     u1940:
  5908  001380                     l3028:
  5909                           
  5910                           ;RF24Network_c.c: 791: delayMicroseconds(200);
  5911  001380  0EC8               	movlw	200
  5912  001382  6EE6               	movwf	postinc1,c
  5913  001384  EC7B  F022         	call	_delayMicroseconds	;wreg free
  5914                           
  5915                           ;RF24Network_c.c: 799: if(len <= rn->max_frame_payload_size){
  5916                           ;stkvar	_len @ sp[(-9)+-8]
  5917                           ;stkvar	_rn @ sp[(-9)+-2]
  5918  001388  0EF5               	movlw	-11
  5919  00138A  CFE3 F051          	movff	plusw1,btemp+1
  5920  00138E  0EF6               	movlw	-10
  5921  001390  CFE3 F052          	movff	plusw1,btemp+2
  5922  001394  0E35               	movlw	53
  5923  001396  2451               	addwf	btemp+1,w,c
  5924  001398  6ED9               	movwf	fsr2l,c
  5925  00139A  0E00               	movlw	0
  5926  00139C  2052               	addwfc	btemp+2,w,c
  5927  00139E  6EDA               	movwf	fsr2h,c
  5928  0013A0  0EEF               	movlw	-17
  5929  0013A2  50E3               	movf	plusw1,w,c
  5930  0013A4  5CDE               	subwf	postinc2,w,c
  5931  0013A6  0EF0               	movlw	-16
  5932  0013A8  50E3               	movf	plusw1,w,c
  5933  0013AA  58DE               	subwfb	postinc2,w,c
  5934  0013AC  A0D8               	btfss	status,0,c
  5935  0013AE  D049               	goto	l3046
  5936                           
  5937                           ;RF24Network_c.c: 801: rn->frame_size = len + sizeof(RF24NetworkHeader);
  5938                           ;stkvar	_rn @ sp[(-9)+-2]
  5939  0013B0  0EF5               	movlw	-11
  5940  0013B2  CFE3 F051          	movff	plusw1,btemp+1
  5941  0013B6  0EF6               	movlw	-10
  5942  0013B8  CFE3 F052          	movff	plusw1,btemp+2
  5943  0013BC  0E34               	movlw	52
  5944  0013BE  2451               	addwf	btemp+1,w,c
  5945  0013C0  6ED9               	movwf	fsr2l,c
  5946  0013C2  0E00               	movlw	0
  5947  0013C4  2052               	addwfc	btemp+2,w,c
  5948  0013C6  6EDA               	movwf	fsr2h,c
  5949                           
  5950                           ;stkvar	_len @ sp[(-9)+-8]
  5951  0013C8  0EEF               	movlw	-17
  5952  0013CA  50E3               	movf	plusw1,w,c
  5953  0013CC  0F08               	addlw	8
  5954  0013CE  6EDF               	movwf	indf2,c
  5955                           
  5956                           ;RF24Network_c.c: 802: if(RF24N__write(rn,header,message,len,writeDirect)){
  5957                           ;stkvar	_writeDirect @ sp[(-9)+-10]
  5958  0013D0  0EED               	movlw	-19
  5959  0013D2  CFE3 FFE6          	movff	plusw1,postinc1
  5960  0013D6  CFE3 FFE6          	movff	plusw1,postinc1
  5961                           
  5962                           ;stkvar	_len @ sp[(-11)+-8]
  5963  0013DA  0EED               	movlw	-19
  5964  0013DC  CFE3 FFE6          	movff	plusw1,postinc1
  5965  0013E0  CFE3 FFE6          	movff	plusw1,postinc1
  5966                           
  5967                           ;stkvar	_message @ sp[(-13)+-6]
  5968  0013E4  0EED               	movlw	-19
  5969  0013E6  CFE3 FFE6          	movff	plusw1,postinc1
  5970  0013EA  CFE3 FFE6          	movff	plusw1,postinc1
  5971                           
  5972                           ;stkvar	_header @ sp[(-15)+-4]
  5973  0013EE  0EED               	movlw	-19
  5974  0013F0  CFE3 FFE6          	movff	plusw1,postinc1
  5975  0013F4  CFE3 FFE6          	movff	plusw1,postinc1
  5976                           
  5977                           ;stkvar	_rn @ sp[(-17)+-2]
  5978  0013F8  0EED               	movlw	-19
  5979  0013FA  CFE3 FFE6          	movff	plusw1,postinc1
  5980  0013FE  CFE3 FFE6          	movff	plusw1,postinc1
  5981  001402  ECBA  F018         	call	_RF24N__write	;wreg free
  5982  001406  5050               	movf	btemp,w,c
  5983  001408  B4D8               	btfsc	status,2,c
  5984  00140A  D002               	goto	l3040
  5985  00140C                     l3036:
  5986                           
  5987                           ;RF24Network_c.c: 803: return 1;
  5988  00140C  0E01               	movlw	1
  5989  00140E  D017               	goto	L4
  5990  001410                     l3040:
  5991                           
  5992                           ;RF24Network_c.c: 804: }
  5993                           ;RF24Network_c.c: 805: rn->txTime = millis();
  5994  001410  EC4A  F028         	call	_millis	;wreg free
  5995  001414                     
  5996                           ;stkvar	_rn @ sp[(-9)+-2]
  5997  001414  0EF5               	movlw	-11
  5998  001416  CFE3 F05A          	movff	plusw1,btemp+10
  5999  00141A  0EF6               	movlw	-10
  6000  00141C  CFE3 F05B          	movff	plusw1,btemp+11
  6001  001420  0E2B               	movlw	43
  6002  001422  245A               	addwf	btemp+10,w,c
  6003  001424  6ED9               	movwf	fsr2l,c
  6004  001426  0E00               	movlw	0
  6005  001428  205B               	addwfc	btemp+11,w,c
  6006  00142A  6EDA               	movwf	fsr2h,c
  6007  00142C  C050  FFDE         	movff	btemp,postinc2
  6008  001430  C051  FFDE         	movff	btemp+1,postinc2
  6009  001434  C052  FFDE         	movff	btemp+2,postinc2
  6010  001438  C053  FFDE         	movff	btemp+3,postinc2
  6011  00143C                     l3042:
  6012                           
  6013                           ;RF24Network_c.c: 806: return 0;
  6014  00143C  0E00               	movlw	0
  6015  00143E                     L4:
  6016  00143E  6E50               	movwf	btemp,c
  6017  001440  D245               	goto	l310
  6018  001442                     l3046:
  6019                           
  6020                           ;RF24Network_c.c: 807: }
  6021                           ;RF24Network_c.c: 809: if (len > 144 + 10-10) {
  6022                           ;stkvar	_len @ sp[(-9)+-8]
  6023  001442  0EF0               	movlw	-16
  6024  001444  50E3               	movf	plusw1,w,c
  6025  001446  E1FA               	bnz	l3042
  6026  001448  0EEF               	movlw	-17
  6027  00144A  CFE3 F050          	movff	plusw1,btemp
  6028  00144E  0E91               	movlw	145
  6029  001450  5E50               	subwf	btemp,f,c
  6030  001452  B0D8               	btfsc	status,0,c
  6031  001454  D7F3               	goto	l3042
  6032                           
  6033                           ;RF24Network_c.c: 812: }
  6034                           ;RF24Network_c.c: 815: uint8_t fragment_id = (len % rn->max_frame_payload_size != 0) + (
      +                          (len ) / rn->max_frame_payload_size);
  6035                           ;stkvar	_rn @ sp[(-9)+-2]
  6036  001456  0EF5               	movlw	-11
  6037  001458  CFE3 F051          	movff	plusw1,btemp+1
  6038  00145C  0EF6               	movlw	-10
  6039  00145E  CFE3 F052          	movff	plusw1,btemp+2
  6040  001462  0E35               	movlw	53
  6041  001464  2451               	addwf	btemp+1,w,c
  6042  001466  6ED9               	movwf	fsr2l,c
  6043  001468  0E00               	movlw	0
  6044  00146A  2052               	addwfc	btemp+2,w,c
  6045  00146C  6EDA               	movwf	fsr2h,c
  6046  00146E  CFDE F051          	movff	postinc2,btemp+1
  6047  001472  CFDD F052          	movff	postdec2,btemp+2
  6048  001476  C051  FFE6         	movff	btemp+1,postinc1
  6049  00147A  C052  FFE6         	movff	btemp+2,postinc1
  6050                           
  6051                           ;stkvar	_len @ sp[(-11)+-8]
  6052  00147E  0EED               	movlw	-19
  6053  001480  CFE3 FFE6          	movff	plusw1,postinc1
  6054  001484  CFE3 FFE6          	movff	plusw1,postinc1
  6055  001488  EC40  F01F         	call	___lwdiv	;wreg free
  6056  00148C  C050  F058         	movff	btemp,btemp+8
  6057  001490  C051  F059         	movff	btemp+1,btemp+9
  6058                           
  6059                           ;stkvar	_rn @ sp[(-9)+-2]
  6060  001494  0EF5               	movlw	-11
  6061  001496  CFE3 F051          	movff	plusw1,btemp+1
  6062  00149A  0EF6               	movlw	-10
  6063  00149C  CFE3 F052          	movff	plusw1,btemp+2
  6064  0014A0  0E35               	movlw	53
  6065  0014A2  2451               	addwf	btemp+1,w,c
  6066  0014A4  6ED9               	movwf	fsr2l,c
  6067  0014A6  0E00               	movlw	0
  6068  0014A8  2052               	addwfc	btemp+2,w,c
  6069  0014AA  6EDA               	movwf	fsr2h,c
  6070  0014AC  CFDE F051          	movff	postinc2,btemp+1
  6071  0014B0  CFDD F052          	movff	postdec2,btemp+2
  6072  0014B4  C051  FFE6         	movff	btemp+1,postinc1
  6073  0014B8  C052  FFE6         	movff	btemp+2,postinc1
  6074                           
  6075                           ;stkvar	_len @ sp[(-11)+-8]
  6076  0014BC  0EED               	movlw	-19
  6077  0014BE  CFE3 FFE6          	movff	plusw1,postinc1
  6078  0014C2  CFE3 FFE6          	movff	plusw1,postinc1
  6079  0014C6  EC7A  F020         	call	___lwmod	;wreg free
  6080  0014CA  5050               	movf	btemp,w,c
  6081  0014CC  1051               	iorwf	btemp+1,w,c
  6082  0014CE  B4D8               	btfsc	status,2,c
  6083  0014D0  D002               	goto	u1980
  6084  0014D2  0E01               	movlw	1
  6085  0014D4  D001               	goto	u1990
  6086  0014D6                     u1980:
  6087  0014D6  0E00               	movlw	0
  6088  0014D8                     u1990:
  6089  0014D8  2458               	addwf	btemp+8,w,c
  6090  0014DA  6E5B               	movwf	btemp+11,c
  6091                           
  6092                           ;stkvar	_fragment_id @ sp[(-9)+4]
  6093  0014DC  0EFB               	movlw	-5
  6094  0014DE  C05B  FFE3         	movff	btemp+11,plusw1
  6095                           
  6096                           ;RF24Network_c.c: 817: uint8_t msgCount = 0;
  6097                           ;stkvar	_msgCount @ sp[(-9)+6]
  6098  0014E2  0EFD               	movlw	-3
  6099  0014E4  6AE3               	clrf	plusw1,c
  6100                           
  6101                           ;RF24Network_c.c: 819: ;
  6102                           ;RF24Network_c.c: 821: if(header->to_node != 0100){
  6103                           ;stkvar	_header @ sp[(-9)+-4]
  6104  0014E6  0EF3               	movlw	-13
  6105  0014E8  CFE3 F051          	movff	plusw1,btemp+1
  6106  0014EC  0EF4               	movlw	-12
  6107  0014EE  CFE3 F052          	movff	plusw1,btemp+2
  6108  0014F2  0E02               	movlw	2
  6109  0014F4  2451               	addwf	btemp+1,w,c
  6110  0014F6  6ED9               	movwf	fsr2l,c
  6111  0014F8  0E00               	movlw	0
  6112  0014FA  2052               	addwfc	btemp+2,w,c
  6113  0014FC  6EDA               	movwf	fsr2h,c
  6114  0014FE  0E40               	movlw	64
  6115  001500  18DE               	xorwf	postinc2,w,c
  6116  001502  10DE               	iorwf	postinc2,w,c
  6117  001504  B4D8               	btfsc	status,2,c
  6118  001506  D024               	goto	l3062
  6119                           
  6120                           ;RF24Network_c.c: 822: rn->networkFlags |= 4;
  6121                           ;stkvar	_rn @ sp[(-9)+-2]
  6122  001508  0EF5               	movlw	-11
  6123  00150A  CFE3 F051          	movff	plusw1,btemp+1
  6124  00150E  0EF6               	movlw	-10
  6125  001510  CFE3 F052          	movff	plusw1,btemp+2
  6126  001514  0E2A               	movlw	42
  6127  001516  2451               	addwf	btemp+1,w,c
  6128  001518  6ED9               	movwf	fsr2l,c
  6129  00151A  0E00               	movlw	0
  6130  00151C  2052               	addwfc	btemp+2,w,c
  6131  00151E  6EDA               	movwf	fsr2h,c
  6132  001520  0E00               	movlw	0
  6133  001522  84DB               	bsf	plusw2,2,c
  6134                           
  6135                           ;RF24Network_c.c: 824: RF24_stopListening(rn->radio);
  6136                           ;stkvar	_rn @ sp[(-9)+-2]
  6137  001524  0EF5               	movlw	-11
  6138  001526  CFE3 F051          	movff	plusw1,btemp+1
  6139  00152A  0EF6               	movlw	-10
  6140  00152C  CFE3 F052          	movff	plusw1,btemp+2
  6141  001530  0E2F               	movlw	47
  6142  001532  2451               	addwf	btemp+1,w,c
  6143  001534  6ED9               	movwf	fsr2l,c
  6144  001536  0E00               	movlw	0
  6145  001538  2052               	addwfc	btemp+2,w,c
  6146  00153A  6EDA               	movwf	fsr2h,c
  6147  00153C  CFDE F051          	movff	postinc2,btemp+1
  6148  001540  CFDD F052          	movff	postdec2,btemp+2
  6149  001544  C051  FFE6         	movff	btemp+1,postinc1
  6150  001548  C052  FFE6         	movff	btemp+2,postinc1
  6151  00154C  EC50  F01E         	call	_RF24_stopListening	;wreg free
  6152  001550                     l3062:
  6153                           
  6154                           ;RF24Network_c.c: 826: }
  6155                           ;RF24Network_c.c: 828: uint8_t retriesPerFrag = 0;
  6156                           ;stkvar	_retriesPerFrag @ sp[(-9)+8]
  6157  001550  0EFF               	movlw	-1
  6158  001552  6AE3               	clrf	plusw1,c
  6159                           
  6160                           ;RF24Network_c.c: 829: uint8_t type = header->type;
  6161                           ;stkvar	_header @ sp[(-9)+-4]
  6162  001554  0EF3               	movlw	-13
  6163  001556  CFE3 F051          	movff	plusw1,btemp+1
  6164  00155A  0EF4               	movlw	-12
  6165  00155C  CFE3 F052          	movff	plusw1,btemp+2
  6166  001560  0E06               	movlw	6
  6167  001562  2451               	addwf	btemp+1,w,c
  6168  001564  6ED9               	movwf	fsr2l,c
  6169  001566  0E00               	movlw	0
  6170  001568  2052               	addwfc	btemp+2,w,c
  6171  00156A  6EDA               	movwf	fsr2h,c
  6172  00156C  50DF               	movf	indf2,w,c
  6173  00156E  6E5B               	movwf	btemp+11,c
  6174                           
  6175                           ;stkvar	_type @ sp[(-9)+7]
  6176  001570  0EFE               	movlw	-2
  6177  001572  C05B  FFE3         	movff	btemp+11,plusw1
  6178                           
  6179                           ;RF24Network_c.c: 830: uint8_t ok = 0;
  6180                           ;stkvar	_ok @ sp[(-9)+5]
  6181  001576  0EFC               	movlw	-4
  6182  001578  6AE3               	clrf	plusw1,c
  6183                           
  6184                           ;RF24Network_c.c: 832: while (fragment_id > 0) {
  6185  00157A  D10F               	goto	l3108
  6186  00157C                     l3068:
  6187                           
  6188                           ;RF24Network_c.c: 836: header->reserved = fragment_id;
  6189                           ;stkvar	_fragment_id @ sp[(-9)+4]
  6190                           ;stkvar	_header @ sp[(-9)+-4]
  6191  00157C  0EF3               	movlw	-13
  6192  00157E  CFE3 F051          	movff	plusw1,btemp+1
  6193  001582  0EF4               	movlw	-12
  6194  001584  CFE3 F052          	movff	plusw1,btemp+2
  6195  001588  0E07               	movlw	7
  6196  00158A  2451               	addwf	btemp+1,w,c
  6197  00158C  6ED9               	movwf	fsr2l,c
  6198  00158E  0E00               	movlw	0
  6199  001590  2052               	addwfc	btemp+2,w,c
  6200  001592  6EDA               	movwf	fsr2h,c
  6201  001594  0EFB               	movlw	-5
  6202  001596  CFE3 FFDF          	movff	plusw1,indf2
  6203                           
  6204                           ;RF24Network_c.c: 838: if (fragment_id == 1) {
  6205                           ;stkvar	_fragment_id @ sp[(-9)+4]
  6206  00159A  0EFB               	movlw	-5
  6207  00159C  04E3               	decf	plusw1,w,c
  6208  00159E  A4D8               	btfss	status,2,c
  6209  0015A0  D01E               	goto	l3074
  6210                           
  6211                           ;RF24Network_c.c: 839: header->type = 150;
  6212                           ;stkvar	_header @ sp[(-9)+-4]
  6213  0015A2  0EF3               	movlw	-13
  6214  0015A4  CFE3 F051          	movff	plusw1,btemp+1
  6215  0015A8  0EF4               	movlw	-12
  6216  0015AA  CFE3 F052          	movff	plusw1,btemp+2
  6217  0015AE  0E06               	movlw	6
  6218  0015B0  2451               	addwf	btemp+1,w,c
  6219  0015B2  6ED9               	movwf	fsr2l,c
  6220  0015B4  0E00               	movlw	0
  6221  0015B6  2052               	addwfc	btemp+2,w,c
  6222  0015B8  6EDA               	movwf	fsr2h,c
  6223  0015BA  0E96               	movlw	150
  6224  0015BC  6EDF               	movwf	indf2,c
  6225                           
  6226                           ;RF24Network_c.c: 840: header->reserved = type;
  6227                           ;stkvar	_type @ sp[(-9)+7]
  6228                           ;stkvar	_header @ sp[(-9)+-4]
  6229  0015BE  0EF3               	movlw	-13
  6230  0015C0  CFE3 F051          	movff	plusw1,btemp+1
  6231  0015C4  0EF4               	movlw	-12
  6232  0015C6  CFE3 F052          	movff	plusw1,btemp+2
  6233  0015CA  0E07               	movlw	7
  6234  0015CC  2451               	addwf	btemp+1,w,c
  6235  0015CE  6ED9               	movwf	fsr2l,c
  6236  0015D0  0E00               	movlw	0
  6237  0015D2  2052               	addwfc	btemp+2,w,c
  6238  0015D4  6EDA               	movwf	fsr2h,c
  6239  0015D6  0EFE               	movlw	-2
  6240  0015D8  CFE3 FFDF          	movff	plusw1,indf2
  6241                           
  6242                           ;RF24Network_c.c: 841: } else {
  6243  0015DC  D020               	goto	l3080
  6244  0015DE                     l3074:
  6245                           
  6246                           ;RF24Network_c.c: 842: if (msgCount == 0) {
  6247                           ;stkvar	_msgCount @ sp[(-9)+6]
  6248  0015DE  0EFD               	movlw	-3
  6249  0015E0  50E3               	movf	plusw1,w,c
  6250  0015E2  A4D8               	btfss	status,2,c
  6251  0015E4  D00E               	goto	l3078
  6252                           
  6253                           ;RF24Network_c.c: 843: header->type = 148;
  6254                           ;stkvar	_header @ sp[(-9)+-4]
  6255  0015E6  0EF3               	movlw	-13
  6256  0015E8  CFE3 F051          	movff	plusw1,btemp+1
  6257  0015EC  0EF4               	movlw	-12
  6258  0015EE  CFE3 F052          	movff	plusw1,btemp+2
  6259  0015F2  0E06               	movlw	6
  6260  0015F4  2451               	addwf	btemp+1,w,c
  6261  0015F6  6ED9               	movwf	fsr2l,c
  6262  0015F8  0E00               	movlw	0
  6263  0015FA  2052               	addwfc	btemp+2,w,c
  6264  0015FC  6EDA               	movwf	fsr2h,c
  6265  0015FE  0E94               	movlw	148
  6266  001600  D00D               	goto	L5
  6267  001602                     l3078:
  6268                           
  6269                           ;RF24Network_c.c: 845: header->type = 149;
  6270                           ;stkvar	_header @ sp[(-9)+-4]
  6271  001602  0EF3               	movlw	-13
  6272  001604  CFE3 F051          	movff	plusw1,btemp+1
  6273  001608  0EF4               	movlw	-12
  6274  00160A  CFE3 F052          	movff	plusw1,btemp+2
  6275  00160E  0E06               	movlw	6
  6276  001610  2451               	addwf	btemp+1,w,c
  6277  001612  6ED9               	movwf	fsr2l,c
  6278  001614  0E00               	movlw	0
  6279  001616  2052               	addwfc	btemp+2,w,c
  6280  001618  6EDA               	movwf	fsr2h,c
  6281  00161A  0E95               	movlw	149
  6282  00161C                     L5:
  6283  00161C  6EDF               	movwf	indf2,c
  6284  00161E                     l3080:
  6285                           
  6286                           ;RF24Network_c.c: 846: }
  6287                           ;RF24Network_c.c: 847: }
  6288                           ;RF24Network_c.c: 849: uint16_t offset = msgCount*rn->max_frame_payload_size;
  6289                           ;stkvar	_rn @ sp[(-9)+-2]
  6290  00161E  0EF5               	movlw	-11
  6291  001620  CFE3 F051          	movff	plusw1,btemp+1
  6292  001624  0EF6               	movlw	-10
  6293  001626  CFE3 F052          	movff	plusw1,btemp+2
  6294  00162A  0E35               	movlw	53
  6295  00162C  2451               	addwf	btemp+1,w,c
  6296  00162E  6ED9               	movwf	fsr2l,c
  6297  001630  0E00               	movlw	0
  6298  001632  2052               	addwfc	btemp+2,w,c
  6299  001634  6EDA               	movwf	fsr2h,c
  6300  001636  CFDE F051          	movff	postinc2,btemp+1
  6301  00163A  CFDD F052          	movff	postdec2,btemp+2
  6302  00163E  C051  FFE6         	movff	btemp+1,postinc1
  6303  001642  C052  FFE6         	movff	btemp+2,postinc1
  6304                           
  6305                           ;stkvar	_msgCount @ sp[(-11)+6]
  6306  001646  0EFB               	movlw	-5
  6307  001648  50E3               	movf	plusw1,w,c
  6308  00164A  6EE6               	movwf	postinc1,c
  6309  00164C  0E00               	movlw	0
  6310  00164E  6EE6               	movwf	postinc1,c
  6311  001650  EC30  F022         	call	___wmul	;wreg free
  6312                           
  6313                           ;stkvar	_offset @ sp[(-9)+0]
  6314  001654  0EF7               	movlw	-9
  6315  001656  C050  FFE3         	movff	btemp,plusw1
  6316  00165A  0EF8               	movlw	-8
  6317  00165C  C051  FFE3         	movff	btemp+1,plusw1
  6318                           
  6319                           ;RF24Network_c.c: 850: uint16_t fragmentLen = ((uint16_t)(len-offset)<rn->max_frame_payl
      +                          oad_size?(uint16_t)(len-offset):rn->max_frame_payload_size);
  6320                           ;stkvar	_rn @ sp[(-9)+-2]
  6321  001660  0EF5               	movlw	-11
  6322  001662  CFE3 F051          	movff	plusw1,btemp+1
  6323  001666  0EF6               	movlw	-10
  6324  001668  CFE3 F052          	movff	plusw1,btemp+2
  6325  00166C  0E35               	movlw	53
  6326  00166E  2451               	addwf	btemp+1,w,c
  6327  001670  6ED9               	movwf	fsr2l,c
  6328  001672  0E00               	movlw	0
  6329  001674  2052               	addwfc	btemp+2,w,c
  6330  001676  6EDA               	movwf	fsr2h,c
  6331                           
  6332                           ;stkvar	_offset @ sp[(-9)+0]
  6333                           ;stkvar	_len @ sp[(-9)+-8]
  6334  001678  0EEF               	movlw	-17
  6335  00167A  CFE3 F051          	movff	plusw1,btemp+1
  6336  00167E  0EF0               	movlw	-16
  6337  001680  CFE3 F052          	movff	plusw1,btemp+2
  6338  001684  0EF7               	movlw	-9
  6339  001686  50E3               	movf	plusw1,w,c
  6340  001688  5E51               	subwf	btemp+1,f,c
  6341  00168A  0EF8               	movlw	-8
  6342  00168C  50E3               	movf	plusw1,w,c
  6343  00168E  5A52               	subwfb	btemp+2,f,c
  6344  001690  50DE               	movf	postinc2,w,c
  6345  001692  5C51               	subwf	btemp+1,w,c
  6346  001694  50DE               	movf	postinc2,w,c
  6347  001696  5852               	subwfb	btemp+2,w,c
  6348  001698  A0D8               	btfss	status,0,c
  6349  00169A  D011               	goto	l3086
  6350                           
  6351                           ;stkvar	_rn @ sp[(-9)+-2]
  6352  00169C  0EF5               	movlw	-11
  6353  00169E  CFE3 F051          	movff	plusw1,btemp+1
  6354  0016A2  0EF6               	movlw	-10
  6355  0016A4  CFE3 F052          	movff	plusw1,btemp+2
  6356  0016A8  0E35               	movlw	53
  6357  0016AA  2451               	addwf	btemp+1,w,c
  6358  0016AC  6ED9               	movwf	fsr2l,c
  6359  0016AE  0E00               	movlw	0
  6360  0016B0  2052               	addwfc	btemp+2,w,c
  6361  0016B2  6EDA               	movwf	fsr2h,c
  6362  0016B4  CFDE F051          	movff	postinc2,btemp+1
  6363  0016B8  CFDD F052          	movff	postdec2,btemp+2
  6364  0016BC  D00C               	goto	L6
  6365  0016BE                     l3086:
  6366                           
  6367                           ;stkvar	_offset @ sp[(-9)+0]
  6368                           ;stkvar	_len @ sp[(-9)+-8]
  6369  0016BE  0EEF               	movlw	-17
  6370  0016C0  CFE3 F051          	movff	plusw1,btemp+1
  6371  0016C4  0EF0               	movlw	-16
  6372  0016C6  CFE3 F052          	movff	plusw1,btemp+2
  6373  0016CA  0EF7               	movlw	-9
  6374  0016CC  50E3               	movf	plusw1,w,c
  6375  0016CE  5E51               	subwf	btemp+1,f,c
  6376  0016D0  0EF8               	movlw	-8
  6377  0016D2  50E3               	movf	plusw1,w,c
  6378  0016D4  5A52               	subwfb	btemp+2,f,c
  6379  0016D6                     L6:
  6380                           
  6381                           ;stkvar	_fragmentLen @ sp[(-9)+2]
  6382  0016D6  0EF9               	movlw	-7
  6383  0016D8  C051  FFE3         	movff	btemp+1,plusw1
  6384  0016DC  0EFA               	movlw	-6
  6385  0016DE  C052  FFE3         	movff	btemp+2,plusw1
  6386                           
  6387                           ;RF24Network_c.c: 853: rn->frame_size = sizeof(RF24NetworkHeader)+fragmentLen;
  6388                           ;stkvar	_rn @ sp[(-9)+-2]
  6389  0016E2  0EF5               	movlw	-11
  6390  0016E4  CFE3 F051          	movff	plusw1,btemp+1
  6391  0016E8  0EF6               	movlw	-10
  6392  0016EA  CFE3 F052          	movff	plusw1,btemp+2
  6393  0016EE  0E34               	movlw	52
  6394  0016F0  2451               	addwf	btemp+1,w,c
  6395  0016F2  6ED9               	movwf	fsr2l,c
  6396  0016F4  0E00               	movlw	0
  6397  0016F6  2052               	addwfc	btemp+2,w,c
  6398  0016F8  6EDA               	movwf	fsr2h,c
  6399                           
  6400                           ;stkvar	_fragmentLen @ sp[(-9)+2]
  6401  0016FA  0EF9               	movlw	-7
  6402  0016FC  50E3               	movf	plusw1,w,c
  6403  0016FE  0F08               	addlw	8
  6404  001700  6EDF               	movwf	indf2,c
  6405                           
  6406                           ;RF24Network_c.c: 854: ok = RF24N__write(rn,header,((char *)message)+offset,fragmentLen,
      +                          writeDirect);
  6407                           ;stkvar	_writeDirect @ sp[(-9)+-10]
  6408  001702  0EED               	movlw	-19
  6409  001704  CFE3 FFE6          	movff	plusw1,postinc1
  6410  001708  CFE3 FFE6          	movff	plusw1,postinc1
  6411                           
  6412                           ;stkvar	_fragmentLen @ sp[(-11)+2]
  6413  00170C  0EF7               	movlw	-9
  6414  00170E  CFE3 FFE6          	movff	plusw1,postinc1
  6415  001712  CFE3 FFE6          	movff	plusw1,postinc1
  6416                           
  6417                           ;stkvar	_offset @ sp[(-13)+0]
  6418  001716  0EF3               	movlw	-13
  6419  001718  CFE3 F05A          	movff	plusw1,btemp+10
  6420  00171C  0EF4               	movlw	-12
  6421  00171E  CFE3 F05B          	movff	plusw1,btemp+11
  6422                           
  6423                           ;stkvar	_message @ sp[(-13)+-6]
  6424  001722  0EED               	movlw	-19
  6425  001724  CFE3 F058          	movff	plusw1,btemp+8
  6426  001728  0EEE               	movlw	-18
  6427  00172A  CFE3 F059          	movff	plusw1,btemp+9
  6428  00172E  505A               	movf	btemp+10,w,c
  6429  001730  2458               	addwf	btemp+8,w,c
  6430  001732  6E51               	movwf	btemp+1,c
  6431  001734  505B               	movf	btemp+11,w,c
  6432  001736  2059               	addwfc	btemp+9,w,c
  6433  001738  6E52               	movwf	btemp+2,c
  6434  00173A  C051  FFE6         	movff	btemp+1,postinc1
  6435  00173E  C052  FFE6         	movff	btemp+2,postinc1
  6436                           
  6437                           ;stkvar	_header @ sp[(-15)+-4]
  6438  001742  0EED               	movlw	-19
  6439  001744  CFE3 FFE6          	movff	plusw1,postinc1
  6440  001748  CFE3 FFE6          	movff	plusw1,postinc1
  6441                           
  6442                           ;stkvar	_rn @ sp[(-17)+-2]
  6443  00174C  0EED               	movlw	-19
  6444  00174E  CFE3 FFE6          	movff	plusw1,postinc1
  6445  001752  CFE3 FFE6          	movff	plusw1,postinc1
  6446  001756  ECBA  F018         	call	_RF24N__write	;wreg free
  6447                           
  6448                           ;stkvar	_ok @ sp[(-9)+5]
  6449  00175A  0EFC               	movlw	-4
  6450  00175C  C050  FFE3         	movff	btemp,plusw1
  6451                           
  6452                           ;RF24Network_c.c: 856: if (!ok) {
  6453                           ;stkvar	_ok @ sp[(-9)+5]
  6454  001760  0EFC               	movlw	-4
  6455  001762  50E3               	movf	plusw1,w,c
  6456  001764  A4D8               	btfss	status,2,c
  6457  001766  D008               	goto	l3098
  6458                           
  6459                           ;RF24Network_c.c: 857: delay(2);
  6460  001768  0E02               	movlw	2
  6461  00176A  6EE6               	movwf	postinc1,c
  6462  00176C  0E00               	movlw	0
  6463  00176E  6EE6               	movwf	postinc1,c
  6464  001770  ECD8  F020         	call	_delay	;wreg free
  6465                           
  6466                           ;RF24Network_c.c: 858: ++retriesPerFrag;
  6467                           ;stkvar	_retriesPerFrag @ sp[(-9)+8]
  6468  001774  0EFF               	movlw	-1
  6469  001776  D005               	goto	L7
  6470  001778                     l3098:
  6471                           
  6472                           ;RF24Network_c.c: 861: retriesPerFrag = 0;
  6473                           ;stkvar	_retriesPerFrag @ sp[(-9)+8]
  6474  001778  0EFF               	movlw	-1
  6475  00177A  6AE3               	clrf	plusw1,c
  6476                           
  6477                           ;RF24Network_c.c: 862: fragment_id--;
  6478                           ;stkvar	_fragment_id @ sp[(-9)+4]
  6479  00177C  0EFB               	movlw	-5
  6480  00177E  06E3               	decf	plusw1,f,c
  6481                           
  6482                           ;RF24Network_c.c: 863: msgCount++;
  6483                           ;stkvar	_msgCount @ sp[(-9)+6]
  6484  001780  0EFD               	movlw	-3
  6485  001782                     L7:
  6486  001782  2AE3               	incf	plusw1,f,c
  6487                           
  6488                           ;RF24Network_c.c: 864: }
  6489                           ;RF24Network_c.c: 868: if (!ok && retriesPerFrag >= 3) {
  6490                           ;stkvar	_ok @ sp[(-9)+5]
  6491  001784  0EFC               	movlw	-4
  6492  001786  50E3               	movf	plusw1,w,c
  6493  001788  A4D8               	btfss	status,2,c
  6494  00178A  D007               	goto	l3108
  6495                           
  6496                           ;stkvar	_retriesPerFrag @ sp[(-9)+8]
  6497  00178C  0EFF               	movlw	-1
  6498  00178E  CFE3 F050          	movff	plusw1,btemp
  6499  001792  0E02               	movlw	2
  6500  001794  6450               	cpfsgt	btemp,c
  6501  001796  D001               	goto	l3108
  6502  001798  D004               	goto	l3110
  6503  00179A                     l3108:
  6504                           
  6505                           ;stkvar	_fragment_id @ sp[(-9)+4]
  6506  00179A  0EFB               	movlw	-5
  6507  00179C  50E3               	movf	plusw1,w,c
  6508  00179E  A4D8               	btfss	status,2,c
  6509  0017A0  D6ED               	goto	l3068
  6510  0017A2                     l3110:
  6511                           
  6512                           ;RF24Network_c.c: 871: }
  6513                           ;RF24Network_c.c: 880: }
  6514                           ;RF24Network_c.c: 881: header->type = type;
  6515                           ;stkvar	_type @ sp[(-9)+7]
  6516                           ;stkvar	_header @ sp[(-9)+-4]
  6517  0017A2  0EF3               	movlw	-13
  6518  0017A4  CFE3 F051          	movff	plusw1,btemp+1
  6519  0017A8  0EF4               	movlw	-12
  6520  0017AA  CFE3 F052          	movff	plusw1,btemp+2
  6521  0017AE  0E06               	movlw	6
  6522  0017B0  2451               	addwf	btemp+1,w,c
  6523  0017B2  6ED9               	movwf	fsr2l,c
  6524  0017B4  0E00               	movlw	0
  6525  0017B6  2052               	addwfc	btemp+2,w,c
  6526  0017B8  6EDA               	movwf	fsr2h,c
  6527  0017BA  0EFE               	movlw	-2
  6528  0017BC  CFE3 FFDF          	movff	plusw1,indf2
  6529                           
  6530                           ;RF24Network_c.c: 883: if(rn->networkFlags & 4){
  6531                           ;stkvar	_rn @ sp[(-9)+-2]
  6532  0017C0  0EF5               	movlw	-11
  6533  0017C2  CFE3 F051          	movff	plusw1,btemp+1
  6534  0017C6  0EF6               	movlw	-10
  6535  0017C8  CFE3 F052          	movff	plusw1,btemp+2
  6536  0017CC  0E2A               	movlw	42
  6537  0017CE  2451               	addwf	btemp+1,w,c
  6538  0017D0  6ED9               	movwf	fsr2l,c
  6539  0017D2  0E00               	movlw	0
  6540  0017D4  2052               	addwfc	btemp+2,w,c
  6541  0017D6  6EDA               	movwf	fsr2h,c
  6542  0017D8  A4DF               	btfss	indf2,2,c
  6543  0017DA  D05F               	goto	l3118
  6544                           
  6545                           ;RF24Network_c.c: 884: ok = RF24_txStandBy_t(rn->radio,rn->txTimeout,0);
  6546  0017DC  0E00               	movlw	0
  6547  0017DE  6EE6               	movwf	postinc1,c
  6548                           
  6549                           ;stkvar	_rn @ sp[(-10)+-2]
  6550  0017E0  0EF4               	movlw	-12
  6551  0017E2  CFE3 F051          	movff	plusw1,btemp+1
  6552  0017E6  0EF5               	movlw	-11
  6553  0017E8  CFE3 F052          	movff	plusw1,btemp+2
  6554  0017EC  0E01               	movlw	1
  6555  0017EE  2451               	addwf	btemp+1,w,c
  6556  0017F0  6ED9               	movwf	fsr2l,c
  6557  0017F2  0E00               	movlw	0
  6558  0017F4  2052               	addwfc	btemp+2,w,c
  6559  0017F6  6EDA               	movwf	fsr2h,c
  6560  0017F8  CFDE FFE6          	movff	postinc2,postinc1
  6561  0017FC  CFDE FFE6          	movff	postinc2,postinc1
  6562  001800  CFDE FFE6          	movff	postinc2,postinc1
  6563  001804  CFDE FFE6          	movff	postinc2,postinc1
  6564                           
  6565                           ;stkvar	_rn @ sp[(-14)+-2]
  6566  001808  0EF0               	movlw	-16
  6567  00180A  CFE3 F051          	movff	plusw1,btemp+1
  6568  00180E  0EF1               	movlw	-15
  6569  001810  CFE3 F052          	movff	plusw1,btemp+2
  6570  001814  0E2F               	movlw	47
  6571  001816  2451               	addwf	btemp+1,w,c
  6572  001818  6ED9               	movwf	fsr2l,c
  6573  00181A  0E00               	movlw	0
  6574  00181C  2052               	addwfc	btemp+2,w,c
  6575  00181E  6EDA               	movwf	fsr2h,c
  6576  001820  CFDE F051          	movff	postinc2,btemp+1
  6577  001824  CFDD F052          	movff	postdec2,btemp+2
  6578  001828  C051  FFE6         	movff	btemp+1,postinc1
  6579  00182C  C052  FFE6         	movff	btemp+2,postinc1
  6580  001830  EC2E  F01C         	call	_RF24_txStandBy_t	;wreg free
  6581                           
  6582                           ;stkvar	_ok @ sp[(-9)+5]
  6583  001834  0EFC               	movlw	-4
  6584  001836  C050  FFE3         	movff	btemp,plusw1
  6585                           
  6586                           ;RF24Network_c.c: 885: RF24_startListening(rn->radio);
  6587                           ;stkvar	_rn @ sp[(-9)+-2]
  6588  00183A  0EF5               	movlw	-11
  6589  00183C  CFE3 F051          	movff	plusw1,btemp+1
  6590  001840  0EF6               	movlw	-10
  6591  001842  CFE3 F052          	movff	plusw1,btemp+2
  6592  001846  0E2F               	movlw	47
  6593  001848  2451               	addwf	btemp+1,w,c
  6594  00184A  6ED9               	movwf	fsr2l,c
  6595  00184C  0E00               	movlw	0
  6596  00184E  2052               	addwfc	btemp+2,w,c
  6597  001850  6EDA               	movwf	fsr2h,c
  6598  001852  CFDE F051          	movff	postinc2,btemp+1
  6599  001856  CFDD F052          	movff	postdec2,btemp+2
  6600  00185A  C051  FFE6         	movff	btemp+1,postinc1
  6601  00185E  C052  FFE6         	movff	btemp+2,postinc1
  6602  001862  ECC8  F01C         	call	_RF24_startListening	;wreg free
  6603                           
  6604                           ;RF24Network_c.c: 886: RF24_setAutoAck_p(rn->radio,0,0);
  6605  001866  0E00               	movlw	0
  6606  001868  6EE6               	movwf	postinc1,c
  6607  00186A  0E00               	movlw	0
  6608  00186C  6EE6               	movwf	postinc1,c
  6609                           
  6610                           ;stkvar	_rn @ sp[(-11)+-2]
  6611  00186E  0EF3               	movlw	-13
  6612  001870  CFE3 F051          	movff	plusw1,btemp+1
  6613  001874  0EF4               	movlw	-12
  6614  001876  CFE3 F052          	movff	plusw1,btemp+2
  6615  00187A  0E2F               	movlw	47
  6616  00187C  2451               	addwf	btemp+1,w,c
  6617  00187E  6ED9               	movwf	fsr2l,c
  6618  001880  0E00               	movlw	0
  6619  001882  2052               	addwfc	btemp+2,w,c
  6620  001884  6EDA               	movwf	fsr2h,c
  6621  001886  CFDE F051          	movff	postinc2,btemp+1
  6622  00188A  CFDD F052          	movff	postdec2,btemp+2
  6623  00188E  C051  FFE6         	movff	btemp+1,postinc1
  6624  001892  C052  FFE6         	movff	btemp+2,postinc1
  6625  001896  ECDC  F021         	call	_RF24_setAutoAck_p	;wreg free
  6626  00189A                     l3118:
  6627                           
  6628                           ;RF24Network_c.c: 887: }
  6629                           ;RF24Network_c.c: 888: rn->networkFlags &= ~4;
  6630                           ;stkvar	_rn @ sp[(-9)+-2]
  6631  00189A  0EF5               	movlw	-11
  6632  00189C  CFE3 F051          	movff	plusw1,btemp+1
  6633  0018A0  0EF6               	movlw	-10
  6634  0018A2  CFE3 F052          	movff	plusw1,btemp+2
  6635  0018A6  0E2A               	movlw	42
  6636  0018A8  2451               	addwf	btemp+1,w,c
  6637  0018AA  6ED9               	movwf	fsr2l,c
  6638  0018AC  0E00               	movlw	0
  6639  0018AE  2052               	addwfc	btemp+2,w,c
  6640  0018B0  6EDA               	movwf	fsr2h,c
  6641  0018B2  0EFB               	movlw	251
  6642  0018B4  16DF               	andwf	indf2,f,c
  6643                           
  6644                           ;RF24Network_c.c: 890: if(!ok){
  6645                           ;stkvar	_ok @ sp[(-9)+5]
  6646  0018B6  0EFC               	movlw	-4
  6647  0018B8  50E3               	movf	plusw1,w,c
  6648  0018BA  B4D8               	btfsc	status,2,c
  6649  0018BC  D5BF               	goto	l3042
  6650                           
  6651                           ;RF24Network_c.c: 892: }
  6652                           ;RF24Network_c.c: 899: ;
  6653                           ;RF24Network_c.c: 900: if(fragment_id > 0){
  6654                           ;stkvar	_fragment_id @ sp[(-9)+4]
  6655  0018BE  0EFB               	movlw	-5
  6656  0018C0  50E3               	movf	plusw1,w,c
  6657  0018C2  B4D8               	btfsc	status,2,c
  6658  0018C4  D5A3               	goto	l3036
  6659                           
  6660                           ;RF24Network_c.c: 901: rn->txTime = millis();
  6661  0018C6  EC4A  F028         	call	_millis	;wreg free
  6662  0018CA  D5A4               	goto	L8
  6663  0018CC                     l310:
  6664                           
  6665                           ; _RF24N_write_: autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10,
      +                           argsize = 10, vargsize = 0
  6666  0018CC  0EED               	movlw	237
  6667  0018CE  26E1               	addwf	fsr1l,f,c
  6668  0018D0  0EFF               	movlw	255
  6669  0018D2  22E2               	addwfc	fsr1h,f,c
  6670  0018D4  0012               	return		;funcret
  6671  0018D6                     __end_of_RF24N_write_:
  6672                           	opt stack 0
  6673                           tblptru	equ	0xFF8
  6674                           tblptrh	equ	0xFF7
  6675                           tblptrl	equ	0xFF6
  6676                           tablat	equ	0xFF5
  6677                           prodl	equ	0xFF3
  6678                           intcon	equ	0xFF2
  6679                           postinc0	equ	0xFEE
  6680                           postdec0	equ	0xFED
  6681                           fsr0h	equ	0xFEA
  6682                           fsr0l	equ	0xFE9
  6683                           wreg	equ	0xFE8
  6684                           postinc1	equ	0xFE6
  6685                           postdec1	equ	0xFE5
  6686                           plusw1	equ	0xFE3
  6687                           fsr1h	equ	0xFE2
  6688                           fsr1l	equ	0xFE1
  6689                           indf2	equ	0xFDF
  6690                           postinc2	equ	0xFDE
  6691                           postdec2	equ	0xFDD
  6692                           plusw2	equ	0xFDB
  6693                           fsr2h	equ	0xFDA
  6694                           fsr2l	equ	0xFD9
  6695                           status	equ	0xFD8
  6696                           
  6697 ;; *************** function ___wmul *****************
  6698 ;; Defined at:
  6699 ;;		line 15 in file "/opt/microchip/xc8/v1.38/sources/common/Umul16.c"
  6700 ;; Parameters:    Size  Location     Type
  6701 ;;  multiplier      2  [STACK] unsigned int 
  6702 ;;  multiplicand    2  [STACK] unsigned int 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;  product         2  [STACK] unsigned int 
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  2  [STACK] unsigned int 
  6707 ;; Registers used:
  6708 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+11, prodl, prodh
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;Total ram usage:        0 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    1
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_RF24N_begin_d
  6725 ;;		_RF24N_write_
  6726 ;; This function uses a reentrant model
  6727 ;;
  6728                           
  6729                           	psect	text23
  6730  004460                     __ptext23:
  6731                           	opt stack 0
  6732  004460                     ___wmul:
  6733                           	opt stack 0
  6734                           
  6735                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  6736  004460  52E6               	movf	postinc1,f,c
  6737  004462  52E6               	movf	postinc1,f,c
  6738                           
  6739                           ;stkvar	_multiplicand @ sp[(-2)+-4]
  6740                           
  6741                           ;incstack = 0
  6742  004464  0EFA               	movlw	-6
  6743  004466  CFE3 F05B          	movff	plusw1,btemp+11
  6744                           
  6745                           ;stkvar	_multiplier @ sp[(-2)+-2]
  6746  00446A  0EFC               	movlw	-4
  6747  00446C  50E3               	movf	plusw1,w,c
  6748  00446E  025B               	mulwf	btemp+11,c
  6749                           
  6750                           ;stkvar	_product @ sp[(-2)+0]
  6751  004470  0EFE               	movlw	-2
  6752  004472  CFF3 FFE3          	movff	prodl,plusw1
  6753  004476  0EFF               	movlw	-1
  6754  004478  CFF4 FFE3          	movff	prodh,plusw1
  6755                           
  6756                           ;stkvar	_multiplicand @ sp[(-2)+-4]
  6757  00447C  0EFB               	movlw	251
  6758  00447E  24E1               	addwf	fsr1l,w,c
  6759  004480  6ED9               	movwf	fsr2l,c
  6760  004482  0EFF               	movlw	255
  6761  004484  20E2               	addwfc	fsr1h,w,c
  6762  004486  6EDA               	movwf	fsr2h,c
  6763  004488  50DF               	movf	indf2,w,c
  6764  00448A  6E5B               	movwf	btemp+11,c
  6765                           
  6766                           ;stkvar	_multiplier @ sp[(-2)+-2]
  6767  00448C  0EFC               	movlw	-4
  6768  00448E  50E3               	movf	plusw1,w,c
  6769  004490  025B               	mulwf	btemp+11,c
  6770  004492  CFF3 FFF4          	movff	prodl,prodh
  6771  004496  6AF3               	clrf	prodl,c
  6772                           
  6773                           ;stkvar	_product @ sp[(-2)+0]
  6774  004498  50E1               	movf	fsr1l,w,c
  6775  00449A  0FFE               	addlw	-2
  6776  00449C  6ED9               	movwf	fsr2l,c
  6777  00449E  50E2               	movf	fsr1h,w,c
  6778  0044A0  6EDA               	movwf	fsr2h,c
  6779  0044A2  0EFF               	movlw	255
  6780  0044A4  22DA               	addwfc	fsr2h,f,c
  6781  0044A6  50F3               	movf	prodl,w,c
  6782  0044A8  26DE               	addwf	postinc2,f,c
  6783  0044AA  50F4               	movf	prodh,w,c
  6784  0044AC  22DD               	addwfc	postdec2,f,c
  6785                           
  6786                           ;stkvar	_multiplicand @ sp[(-2)+-4]
  6787  0044AE  0EFA               	movlw	-6
  6788  0044B0  CFE3 F05B          	movff	plusw1,btemp+11
  6789                           
  6790                           ;stkvar	_multiplier @ sp[(-2)+-2]
  6791  0044B4  0EFD               	movlw	253
  6792  0044B6  24E1               	addwf	fsr1l,w,c
  6793  0044B8  6ED9               	movwf	fsr2l,c
  6794  0044BA  0EFF               	movlw	255
  6795  0044BC  20E2               	addwfc	fsr1h,w,c
  6796  0044BE  6EDA               	movwf	fsr2h,c
  6797  0044C0  50DF               	movf	indf2,w,c
  6798  0044C2  025B               	mulwf	btemp+11,c
  6799  0044C4  CFF3 FFF4          	movff	prodl,prodh
  6800  0044C8  6AF3               	clrf	prodl,c
  6801                           
  6802                           ;stkvar	_product @ sp[(-2)+0]
  6803  0044CA  50E1               	movf	fsr1l,w,c
  6804  0044CC  0FFE               	addlw	-2
  6805  0044CE  6ED9               	movwf	fsr2l,c
  6806  0044D0  50E2               	movf	fsr1h,w,c
  6807  0044D2  6EDA               	movwf	fsr2h,c
  6808  0044D4  0EFF               	movlw	255
  6809  0044D6  22DA               	addwfc	fsr2h,f,c
  6810  0044D8  50F3               	movf	prodl,w,c
  6811  0044DA  26DE               	addwf	postinc2,f,c
  6812  0044DC  50F4               	movf	prodh,w,c
  6813  0044DE  22DD               	addwfc	postdec2,f,c
  6814                           
  6815                           ;stkvar	_product @ sp[(-2)+0]
  6816  0044E0  0EFE               	movlw	-2
  6817  0044E2  CFE3 F050          	movff	plusw1,btemp
  6818  0044E6  0EFF               	movlw	-1
  6819  0044E8  CFE3 F051          	movff	plusw1,btemp+1
  6820                           
  6821                           ; ___wmul: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsiz
      +                          e = 4, vargsize = 0
  6822  0044EC  0EFA               	movlw	250
  6823  0044EE  26E1               	addwf	fsr1l,f,c
  6824  0044F0  0EFF               	movlw	255
  6825  0044F2  22E2               	addwfc	fsr1h,f,c
  6826  0044F4  0012               	return		;funcret
  6827  0044F6                     __end_of___wmul:
  6828                           	opt stack 0
  6829                           tblptru	equ	0xFF8
  6830                           tblptrh	equ	0xFF7
  6831                           tblptrl	equ	0xFF6
  6832                           tablat	equ	0xFF5
  6833                           prodh	equ	0xFF4
  6834                           prodl	equ	0xFF3
  6835                           intcon	equ	0xFF2
  6836                           postinc0	equ	0xFEE
  6837                           postdec0	equ	0xFED
  6838                           fsr0h	equ	0xFEA
  6839                           fsr0l	equ	0xFE9
  6840                           wreg	equ	0xFE8
  6841                           postinc1	equ	0xFE6
  6842                           postdec1	equ	0xFE5
  6843                           plusw1	equ	0xFE3
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           postinc2	equ	0xFDE
  6848                           postdec2	equ	0xFDD
  6849                           plusw2	equ	0xFDB
  6850                           fsr2h	equ	0xFDA
  6851                           fsr2l	equ	0xFD9
  6852                           status	equ	0xFD8
  6853                           
  6854 ;; *************** function ___lwmod *****************
  6855 ;; Defined at:
  6856 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lwmod.c"
  6857 ;; Parameters:    Size  Location     Type
  6858 ;;  dividend        2  [STACK] unsigned int 
  6859 ;;  divisor         2  [STACK] unsigned int 
  6860 ;; Auto vars:     Size  Location     Type
  6861 ;;  counter         1  [STACK] unsigned char 
  6862 ;; Return value:  Size  Location     Type
  6863 ;;                  2  [STACK] unsigned int 
  6864 ;; Registers used:
  6865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  6866 ;; Tracked objects:
  6867 ;;		On entry : 0/0
  6868 ;;		On exit  : 0/0
  6869 ;;		Unchanged: 0/0
  6870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6875 ;;Total ram usage:        0 bytes
  6876 ;; Hardware stack levels used:    1
  6877 ;; Hardware stack levels required when called:    1
  6878 ;; This function calls:
  6879 ;;		Nothing
  6880 ;; This function is called by:
  6881 ;;		_RF24N_begin_d
  6882 ;;		_RF24N_write_
  6883 ;; This function uses a reentrant model
  6884 ;;
  6885                           
  6886                           	psect	text24
  6887  0040F4                     __ptext24:
  6888                           	opt stack 0
  6889  0040F4                     ___lwmod:
  6890                           	opt stack 0
  6891                           
  6892                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  6893  0040F4  52E6               	movf	postinc1,f,c
  6894                           
  6895                           ;stkvar	_divisor @ sp[(-1)+-4]
  6896                           
  6897                           ;incstack = 0
  6898  0040F6  0EFB               	movlw	-5
  6899  0040F8  CFE3 F050          	movff	plusw1,btemp
  6900  0040FC  0EFC               	movlw	-4
  6901  0040FE  50E3               	movf	plusw1,w,c
  6902  004100  1050               	iorwf	btemp,w,c
  6903  004102  B4D8               	btfsc	status,2,c
  6904  004104  D04A               	goto	l2952
  6905                           
  6906                           ;stkvar	_counter @ sp[(-1)+0]
  6907  004106  0EFF               	movlw	-1
  6908  004108  6AE3               	clrf	plusw1,c
  6909  00410A  D010               	goto	L9
  6910  00410C                     l2938:
  6911                           
  6912                           ;stkvar	_divisor @ sp[(-1)+-4]
  6913  00410C  0EFB               	movlw	-5
  6914  00410E  50E3               	movf	plusw1,w,c
  6915  004110  90D8               	bcf	status,0,c
  6916  004112  34E8               	rlcf	wreg,w,c
  6917  004114  6E50               	movwf	btemp,c
  6918  004116  0EFB               	movlw	-5
  6919  004118  C050  FFE3         	movff	btemp,plusw1
  6920  00411C  0EFC               	movlw	-4
  6921  00411E  50E3               	movf	plusw1,w,c
  6922  004120  34E8               	rlcf	wreg,w,c
  6923  004122  6E50               	movwf	btemp,c
  6924  004124  0EFC               	movlw	-4
  6925  004126  C050  FFE3         	movff	btemp,plusw1
  6926                           
  6927                           ;stkvar	_counter @ sp[(-1)+0]
  6928  00412A  0EFF               	movlw	-1
  6929  00412C                     L9:
  6930  00412C  2AE3               	incf	plusw1,f,c
  6931                           
  6932                           ;stkvar	_divisor @ sp[(-1)+-4]
  6933  00412E  0EFC               	movlw	-4
  6934  004130  AEE3               	btfss	plusw1,7,c
  6935  004132  D7EC               	goto	l2938
  6936  004134                     l2944:
  6937                           
  6938                           ;stkvar	_divisor @ sp[(-1)+-4]
  6939  004134  0EFB               	movlw	-5
  6940  004136  CFE3 F051          	movff	plusw1,btemp+1
  6941  00413A  0EFC               	movlw	-4
  6942  00413C  CFE3 F052          	movff	plusw1,btemp+2
  6943                           
  6944                           ;stkvar	_dividend @ sp[(-1)+-2]
  6945  004140  0EFD               	movlw	-3
  6946  004142  CFE3 F05A          	movff	plusw1,btemp+10
  6947  004146  0EFE               	movlw	-2
  6948  004148  CFE3 F05B          	movff	plusw1,btemp+11
  6949  00414C  5051               	movf	btemp+1,w,c
  6950  00414E  5C5A               	subwf	btemp+10,w,c
  6951  004150  5052               	movf	btemp+2,w,c
  6952  004152  585B               	subwfb	btemp+11,w,c
  6953  004154  A0D8               	btfss	status,0,c
  6954  004156  D012               	goto	l2948
  6955                           
  6956                           ;stkvar	_divisor @ sp[(-1)+-4]
  6957                           ;stkvar	_dividend @ sp[(-1)+-2]
  6958  004158  0EFD               	movlw	-3
  6959  00415A  50E3               	movf	plusw1,w,c
  6960  00415C  6E50               	movwf	btemp,c
  6961  00415E  0EFB               	movlw	-5
  6962  004160  50E3               	movf	plusw1,w,c
  6963  004162  5E50               	subwf	btemp,f,c
  6964  004164  0EFD               	movlw	-3
  6965  004166  C050  FFE3         	movff	btemp,plusw1
  6966  00416A  0EFE               	movlw	-2
  6967  00416C  50E3               	movf	plusw1,w,c
  6968  00416E  6E50               	movwf	btemp,c
  6969  004170  0EFC               	movlw	-4
  6970  004172  50E3               	movf	plusw1,w,c
  6971  004174  5A50               	subwfb	btemp,f,c
  6972  004176  0EFE               	movlw	-2
  6973  004178  C050  FFE3         	movff	btemp,plusw1
  6974  00417C                     l2948:
  6975                           
  6976                           ;stkvar	_divisor @ sp[(-1)+-4]
  6977  00417C  90D8               	bcf	status,0,c
  6978  00417E  0EFC               	movlw	-4
  6979  004180  32E3               	rrcf	plusw1,f,c
  6980  004182  0EFB               	movlw	-5
  6981  004184  32E3               	rrcf	plusw1,f,c
  6982                           
  6983                           ;stkvar	_counter @ sp[(-1)+0]
  6984  004186  0EFF               	movlw	-1
  6985  004188  50E3               	movf	plusw1,w,c
  6986  00418A  6E50               	movwf	btemp,c
  6987  00418C  0E01               	movlw	1
  6988  00418E  5E50               	subwf	btemp,f,c
  6989  004190  0EFF               	movlw	-1
  6990  004192  C050  FFE3         	movff	btemp,plusw1
  6991  004196  A4D8               	btfss	status,2,c
  6992  004198  D7CD               	goto	l2944
  6993  00419A                     l2952:
  6994                           
  6995                           ;stkvar	_dividend @ sp[(-1)+-2]
  6996  00419A  0EFD               	movlw	-3
  6997  00419C  CFE3 F050          	movff	plusw1,btemp
  6998  0041A0  0EFE               	movlw	-2
  6999  0041A2  CFE3 F051          	movff	plusw1,btemp+1
  7000                           
  7001                           ; ___lwmod: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
  7002  0041A6  0EFB               	movlw	251
  7003  0041A8  26E1               	addwf	fsr1l,f,c
  7004  0041AA  0EFF               	movlw	255
  7005  0041AC  22E2               	addwfc	fsr1h,f,c
  7006  0041AE  0012               	return		;funcret
  7007  0041B0                     __end_of___lwmod:
  7008                           	opt stack 0
  7009                           tblptru	equ	0xFF8
  7010                           tblptrh	equ	0xFF7
  7011                           tblptrl	equ	0xFF6
  7012                           tablat	equ	0xFF5
  7013                           prodh	equ	0xFF4
  7014                           prodl	equ	0xFF3
  7015                           intcon	equ	0xFF2
  7016                           postinc0	equ	0xFEE
  7017                           postdec0	equ	0xFED
  7018                           fsr0h	equ	0xFEA
  7019                           fsr0l	equ	0xFE9
  7020                           wreg	equ	0xFE8
  7021                           postinc1	equ	0xFE6
  7022                           postdec1	equ	0xFE5
  7023                           plusw1	equ	0xFE3
  7024                           fsr1h	equ	0xFE2
  7025                           fsr1l	equ	0xFE1
  7026                           indf2	equ	0xFDF
  7027                           postinc2	equ	0xFDE
  7028                           postdec2	equ	0xFDD
  7029                           plusw2	equ	0xFDB
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _RF24N__write *****************
  7035 ;; Defined at:
  7036 ;;		line 910 in file "../../RF24Network_c.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  rn              2  [STACK] PTR struct .
  7039 ;;		 -> network(372), 
  7040 ;;  header          2  [STACK] PTR struct .
  7041 ;;		 -> header(8), 
  7042 ;;  message         2  [STACK] PTR const void 
  7043 ;;		 -> payload(8), 
  7044 ;;  len             2  [STACK] unsigned int 
  7045 ;;  writeDirect     2  [STACK] unsigned int 
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;  sendType        1  [STACK] unsigned char 
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1  [STACK] unsigned char 
  7050 ;; Registers used:
  7051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;Total ram usage:        0 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:   10
  7064 ;; This function calls:
  7065 ;;		_RF24N_write
  7066 ;;		_memcpy
  7067 ;; This function is called by:
  7068 ;;		_RF24N_write_
  7069 ;; This function uses a reentrant model
  7070 ;;
  7071                           
  7072                           	psect	text25
  7073  003174                     __ptext25:
  7074                           	opt stack 0
  7075  003174                     _RF24N__write:
  7076                           	opt stack 0
  7077                           
  7078                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10, argsize = 10 v
      +                          argsize = 0, retsize = 0
  7079  003174  52E6               	movf	postinc1,f,c
  7080                           
  7081                           ;RF24Network_c.c: 913: header->from_node = rn->node_address;
  7082                           ;stkvar	_rn @ sp[(-1)+-2]
  7083                           
  7084                           ;incstack = 0
  7085  003176  0EFD               	movlw	-3
  7086  003178  CFE3 F051          	movff	plusw1,btemp+1
  7087  00317C  0EFE               	movlw	-2
  7088  00317E  CFE3 F052          	movff	plusw1,btemp+2
  7089  003182  0E32               	movlw	50
  7090  003184  2451               	addwf	btemp+1,w,c
  7091  003186  6ED9               	movwf	fsr2l,c
  7092  003188  0E00               	movlw	0
  7093  00318A  2052               	addwfc	btemp+2,w,c
  7094  00318C  6EDA               	movwf	fsr2h,c
  7095                           
  7096                           ;stkvar	_header @ sp[(-1)+-4]
  7097  00318E  0EFB               	movlw	-5
  7098  003190  CFE3 FFE9          	movff	plusw1,fsr0l
  7099  003194  0EFC               	movlw	-4
  7100  003196  CFE3 FFEA          	movff	plusw1,fsr0h
  7101  00319A  CFDE FFEE          	movff	postinc2,postinc0
  7102  00319E  CFDD FFED          	movff	postdec2,postdec0
  7103                           
  7104                           ;RF24Network_c.c: 916: memcpy(rn->frame_buffer,header,sizeof(RF24NetworkHeader));
  7105  0031A2  0E08               	movlw	8
  7106  0031A4  6EE6               	movwf	postinc1,c
  7107  0031A6  0E00               	movlw	0
  7108  0031A8  6EE6               	movwf	postinc1,c
  7109                           
  7110                           ;stkvar	_header @ sp[(-3)+-4]
  7111  0031AA  0EF9               	movlw	-7
  7112  0031AC  CFE3 FFE6          	movff	plusw1,postinc1
  7113  0031B0  CFE3 FFE6          	movff	plusw1,postinc1
  7114                           
  7115                           ;stkvar	_rn @ sp[(-5)+-2]
  7116  0031B4  0EF9               	movlw	-7
  7117  0031B6  50E3               	movf	plusw1,w,c
  7118  0031B8  0F07               	addlw	7
  7119  0031BA  6E51               	movwf	btemp+1,c
  7120  0031BC  0EFA               	movlw	-6
  7121  0031BE  CFE3 F052          	movff	plusw1,btemp+2
  7122  0031C2  0E00               	movlw	0
  7123  0031C4  2252               	addwfc	btemp+2,f,c
  7124  0031C6  C051  FFE6         	movff	btemp+1,postinc1
  7125  0031CA  C052  FFE6         	movff	btemp+2,postinc1
  7126  0031CE  ECB5  F01F         	call	_memcpy	;wreg free
  7127                           
  7128                           ;RF24Network_c.c: 921: ;
  7129                           ;RF24Network_c.c: 923: if (len){
  7130                           ;stkvar	_len @ sp[(-1)+-8]
  7131  0031D2  0EF7               	movlw	-9
  7132  0031D4  CFE3 F050          	movff	plusw1,btemp
  7133  0031D8  0EF8               	movlw	-8
  7134  0031DA  50E3               	movf	plusw1,w,c
  7135  0031DC  1050               	iorwf	btemp,w,c
  7136  0031DE  B4D8               	btfsc	status,2,c
  7137  0031E0  D019               	goto	l2904
  7138                           
  7139                           ;RF24Network_c.c: 930: memcpy(rn->frame_buffer + sizeof(RF24NetworkHeader),message,len);
  7140                           ;stkvar	_len @ sp[(-1)+-8]
  7141  0031E2  0EF7               	movlw	-9
  7142  0031E4  CFE3 FFE6          	movff	plusw1,postinc1
  7143  0031E8  CFE3 FFE6          	movff	plusw1,postinc1
  7144                           
  7145                           ;stkvar	_message @ sp[(-3)+-6]
  7146  0031EC  0EF7               	movlw	-9
  7147  0031EE  CFE3 FFE6          	movff	plusw1,postinc1
  7148  0031F2  CFE3 FFE6          	movff	plusw1,postinc1
  7149                           
  7150                           ;stkvar	_rn @ sp[(-5)+-2]
  7151  0031F6  0EF9               	movlw	-7
  7152  0031F8  50E3               	movf	plusw1,w,c
  7153  0031FA  0F0F               	addlw	15
  7154  0031FC  6E51               	movwf	btemp+1,c
  7155  0031FE  0EFA               	movlw	-6
  7156  003200  CFE3 F052          	movff	plusw1,btemp+2
  7157  003204  0E00               	movlw	0
  7158  003206  2252               	addwfc	btemp+2,f,c
  7159  003208  C051  FFE6         	movff	btemp+1,postinc1
  7160  00320C  C052  FFE6         	movff	btemp+2,postinc1
  7161  003210  ECB5  F01F         	call	_memcpy	;wreg free
  7162  003214                     l2904:
  7163                           
  7164                           ;RF24Network_c.c: 934: }
  7165                           ;RF24Network_c.c: 949: if(writeDirect != 070){
  7166                           ;stkvar	_writeDirect @ sp[(-1)+-10]
  7167  003214  0EF5               	movlw	-11
  7168  003216  CFE3 F050          	movff	plusw1,btemp
  7169  00321A  0E38               	movlw	56
  7170  00321C  1850               	xorwf	btemp,w,c
  7171  00321E  E104               	bnz	u1750
  7172  003220  0EF6               	movlw	-10
  7173  003222  50E3               	movf	plusw1,w,c
  7174  003224  B4D8               	btfsc	status,2,c
  7175  003226  D040               	goto	l2920
  7176  003228                     u1750:
  7177                           
  7178                           ;RF24Network_c.c: 950: uint8_t sendType = 3;
  7179                           ;stkvar	_sendType @ sp[(-1)+0]
  7180  003228  0EFF               	movlw	-1
  7181  00322A  6AE3               	clrf	plusw1,c
  7182  00322C  80E3               	bsf	plusw1,0,c
  7183  00322E  82E3               	bsf	plusw1,1,c	;indir
  7184                           
  7185                           ;RF24Network_c.c: 952: if(header->to_node == 0100){
  7186                           ;stkvar	_header @ sp[(-1)+-4]
  7187  003230  0EFB               	movlw	-5
  7188  003232  CFE3 F051          	movff	plusw1,btemp+1
  7189  003236  0EFC               	movlw	-4
  7190  003238  CFE3 F052          	movff	plusw1,btemp+2
  7191  00323C  0E02               	movlw	2
  7192  00323E  2451               	addwf	btemp+1,w,c
  7193  003240  6ED9               	movwf	fsr2l,c
  7194  003242  0E00               	movlw	0
  7195  003244  2052               	addwfc	btemp+2,w,c
  7196  003246  6EDA               	movwf	fsr2h,c
  7197  003248  0E40               	movlw	64
  7198  00324A  18DE               	xorwf	postinc2,w,c
  7199  00324C  10DE               	iorwf	postinc2,w,c
  7200  00324E  A4D8               	btfss	status,2,c
  7201  003250  D003               	goto	l2912
  7202                           
  7203                           ;RF24Network_c.c: 953: sendType = 4;
  7204                           ;stkvar	_sendType @ sp[(-1)+0]
  7205  003252  0EFF               	movlw	-1
  7206  003254  6AE3               	clrf	plusw1,c
  7207  003256  84E3               	bsf	plusw1,2,c
  7208  003258                     l2912:
  7209                           
  7210                           ;RF24Network_c.c: 954: }
  7211                           ;RF24Network_c.c: 955: if(header->to_node == writeDirect){
  7212                           ;stkvar	_writeDirect @ sp[(-1)+-10]
  7213                           ;stkvar	_header @ sp[(-1)+-4]
  7214  003258  0EFB               	movlw	-5
  7215  00325A  CFE3 F051          	movff	plusw1,btemp+1
  7216  00325E  0EFC               	movlw	-4
  7217  003260  CFE3 F052          	movff	plusw1,btemp+2
  7218  003264  0E02               	movlw	2
  7219  003266  2451               	addwf	btemp+1,w,c
  7220  003268  6ED9               	movwf	fsr2l,c
  7221  00326A  0E00               	movlw	0
  7222  00326C  2052               	addwfc	btemp+2,w,c
  7223  00326E  6EDA               	movwf	fsr2h,c
  7224  003270  0EF5               	movlw	-11
  7225  003272  50E3               	movf	plusw1,w,c
  7226  003274  18DE               	xorwf	postinc2,w,c
  7227  003276  E108               	bnz	l2916
  7228  003278  0EF6               	movlw	-10
  7229  00327A  50E3               	movf	plusw1,w,c
  7230  00327C  18DE               	xorwf	postinc2,w,c
  7231  00327E  A4D8               	btfss	status,2,c
  7232  003280  D003               	goto	l2916
  7233                           
  7234                           ;RF24Network_c.c: 956: sendType = 2;
  7235                           ;stkvar	_sendType @ sp[(-1)+0]
  7236  003282  0EFF               	movlw	-1
  7237  003284  6AE3               	clrf	plusw1,c
  7238  003286  82E3               	bsf	plusw1,1,c
  7239  003288                     l2916:
  7240                           
  7241                           ;RF24Network_c.c: 957: }
  7242                           ;RF24Network_c.c: 958: return RF24N_write(rn,writeDirect,sendType);
  7243                           ;stkvar	_sendType @ sp[(-1)+0]
  7244  003288  0EFF               	movlw	-1
  7245  00328A  50E3               	movf	plusw1,w,c
  7246  00328C  6EE6               	movwf	postinc1,c
  7247                           
  7248                           ;stkvar	_writeDirect @ sp[(-2)+-10]
  7249  00328E  0EF4               	movlw	-12
  7250  003290  CFE3 FFE6          	movff	plusw1,postinc1
  7251  003294  CFE3 FFE6          	movff	plusw1,postinc1
  7252                           
  7253                           ;stkvar	_rn @ sp[(-4)+-2]
  7254  003298  0EFA               	movlw	-6
  7255  00329A  CFE3 FFE6          	movff	plusw1,postinc1
  7256  00329E  CFE3 FFE6          	movff	plusw1,postinc1
  7257  0032A2  EC6B  F00C         	call	_RF24N_write	;wreg free
  7258  0032A6  D01D               	goto	l336
  7259  0032A8                     l2920:
  7260                           
  7261                           ;RF24Network_c.c: 959: }
  7262                           ;RF24Network_c.c: 960: return RF24N_write(rn,header->to_node,0);
  7263  0032A8  0E00               	movlw	0
  7264  0032AA  6EE6               	movwf	postinc1,c
  7265                           
  7266                           ;stkvar	_header @ sp[(-2)+-4]
  7267  0032AC  0EFA               	movlw	-6
  7268  0032AE  CFE3 F051          	movff	plusw1,btemp+1
  7269  0032B2  0EFB               	movlw	-5
  7270  0032B4  CFE3 F052          	movff	plusw1,btemp+2
  7271  0032B8  0E02               	movlw	2
  7272  0032BA  2451               	addwf	btemp+1,w,c
  7273  0032BC  6ED9               	movwf	fsr2l,c
  7274  0032BE  0E00               	movlw	0
  7275  0032C0  2052               	addwfc	btemp+2,w,c
  7276  0032C2  6EDA               	movwf	fsr2h,c
  7277  0032C4  CFDE F051          	movff	postinc2,btemp+1
  7278  0032C8  CFDD F052          	movff	postdec2,btemp+2
  7279  0032CC  C051  FFE6         	movff	btemp+1,postinc1
  7280  0032D0  C052  FFE6         	movff	btemp+2,postinc1
  7281                           
  7282                           ;stkvar	_rn @ sp[(-4)+-2]
  7283  0032D4  0EFA               	movlw	-6
  7284  0032D6  CFE3 FFE6          	movff	plusw1,postinc1
  7285  0032DA  CFE3 FFE6          	movff	plusw1,postinc1
  7286  0032DE  EC6B  F00C         	call	_RF24N_write	;wreg free
  7287  0032E2                     l336:
  7288                           
  7289                           ; _RF24N__write: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 10,
      +                           argsize = 10, vargsize = 0
  7290  0032E2  0EF5               	movlw	245
  7291  0032E4  26E1               	addwf	fsr1l,f,c
  7292  0032E6  0EFF               	movlw	255
  7293  0032E8  22E2               	addwfc	fsr1h,f,c
  7294  0032EA  0012               	return		;funcret
  7295  0032EC                     __end_of_RF24N__write:
  7296                           	opt stack 0
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           intcon	equ	0xFF2
  7304                           postinc0	equ	0xFEE
  7305                           postdec0	equ	0xFED
  7306                           fsr0h	equ	0xFEA
  7307                           fsr0l	equ	0xFE9
  7308                           wreg	equ	0xFE8
  7309                           postinc1	equ	0xFE6
  7310                           postdec1	equ	0xFE5
  7311                           plusw1	equ	0xFE3
  7312                           fsr1h	equ	0xFE2
  7313                           fsr1l	equ	0xFE1
  7314                           indf2	equ	0xFDF
  7315                           postinc2	equ	0xFDE
  7316                           postdec2	equ	0xFDD
  7317                           plusw2	equ	0xFDB
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _RF24NH_init *****************
  7323 ;; Defined at:
  7324 ;;		line 45 in file "../../RF24Network_c.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  rnh             2  [STACK] PTR struct .
  7327 ;;		 -> header(8), 
  7328 ;;  _to             2  [STACK] unsigned int 
  7329 ;;  _type           1  [STACK] unsigned char 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;		None
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  1  [STACK] void 
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp+1, btemp+2
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;Total ram usage:        0 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:    1
  7348 ;; This function calls:
  7349 ;;		Nothing
  7350 ;; This function is called by:
  7351 ;;		_loop
  7352 ;; This function uses a reentrant model
  7353 ;;
  7354                           
  7355                           	psect	text26
  7356  00461A                     __ptext26:
  7357                           	opt stack 0
  7358  00461A                     _RF24NH_init:
  7359                           	opt stack 28
  7360                           
  7361                           ;RF24Network_c.c: 47: rnh->to_node=_to;
  7362                           ;stkvar	__to @ sp[(0)+-4]
  7363                           
  7364                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
  7365                           ;incstack = 0
  7366  00461A  50E1               	movf	fsr1l,w,c
  7367  00461C  0FFC               	addlw	-4
  7368  00461E  6ED9               	movwf	fsr2l,c
  7369  004620  50E2               	movf	fsr1h,w,c
  7370  004622  6EDA               	movwf	fsr2h,c
  7371  004624  0EFF               	movlw	255
  7372  004626  22DA               	addwfc	fsr2h,f,c
  7373                           
  7374                           ;stkvar	_rnh @ sp[(0)+-2]
  7375  004628  0EFE               	movlw	-2
  7376  00462A  CFE3 F051          	movff	plusw1,btemp+1
  7377  00462E  0EFF               	movlw	-1
  7378  004630  CFE3 F052          	movff	plusw1,btemp+2
  7379  004634  0E02               	movlw	2
  7380  004636  2451               	addwf	btemp+1,w,c
  7381  004638  6EE9               	movwf	fsr0l,c
  7382  00463A  0E00               	movlw	0
  7383  00463C  2052               	addwfc	btemp+2,w,c
  7384  00463E  6EEA               	movwf	fsr0h,c
  7385  004640  CFDE FFEE          	movff	postinc2,postinc0
  7386  004644  CFDD FFED          	movff	postdec2,postdec0
  7387                           
  7388                           ;RF24Network_c.c: 48: rnh->id=next_id++;
  7389                           ;stkvar	_rnh @ sp[(0)+-2]
  7390  004648  0EFE               	movlw	-2
  7391  00464A  CFE3 F051          	movff	plusw1,btemp+1
  7392  00464E  0EFF               	movlw	-1
  7393  004650  CFE3 F052          	movff	plusw1,btemp+2
  7394  004654  0E04               	movlw	4
  7395  004656  2451               	addwf	btemp+1,w,c
  7396  004658  6ED9               	movwf	fsr2l,c
  7397  00465A  0E00               	movlw	0
  7398  00465C  2052               	addwfc	btemp+2,w,c
  7399  00465E  6EDA               	movwf	fsr2h,c
  7400  004660  C063  FFDE         	movff	_next_id,postinc2
  7401  004664  C064  FFDD         	movff	_next_id+1,postdec2
  7402  004668  4A63               	infsnz	_next_id,f,c
  7403  00466A  2A64               	incf	_next_id+1,f,c
  7404                           
  7405                           ;RF24Network_c.c: 49: rnh->type=_type;
  7406                           ;stkvar	__type @ sp[(0)+-5]
  7407                           ;stkvar	_rnh @ sp[(0)+-2]
  7408  00466C  0EFE               	movlw	-2
  7409  00466E  CFE3 F051          	movff	plusw1,btemp+1
  7410  004672  0EFF               	movlw	-1
  7411  004674  CFE3 F052          	movff	plusw1,btemp+2
  7412  004678  0E06               	movlw	6
  7413  00467A  2451               	addwf	btemp+1,w,c
  7414  00467C  6ED9               	movwf	fsr2l,c
  7415  00467E  0E00               	movlw	0
  7416  004680  2052               	addwfc	btemp+2,w,c
  7417  004682  6EDA               	movwf	fsr2h,c
  7418  004684  0EFB               	movlw	-5
  7419  004686  CFE3 FFDF          	movff	plusw1,indf2
  7420                           
  7421                           ; _RF24NH_init: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, a
      +                          rgsize = 5, vargsize = 0
  7422  00468A  0EFB               	movlw	251
  7423  00468C  26E1               	addwf	fsr1l,f,c
  7424  00468E  0EFF               	movlw	255
  7425  004690  22E2               	addwfc	fsr1h,f,c
  7426  004692  0012               	return		;funcret
  7427  004694                     __end_of_RF24NH_init:
  7428                           	opt stack 0
  7429                           tblptru	equ	0xFF8
  7430                           tblptrh	equ	0xFF7
  7431                           tblptrl	equ	0xFF6
  7432                           tablat	equ	0xFF5
  7433                           prodh	equ	0xFF4
  7434                           prodl	equ	0xFF3
  7435                           intcon	equ	0xFF2
  7436                           postinc0	equ	0xFEE
  7437                           postdec0	equ	0xFED
  7438                           fsr0h	equ	0xFEA
  7439                           fsr0l	equ	0xFE9
  7440                           wreg	equ	0xFE8
  7441                           postinc1	equ	0xFE6
  7442                           postdec1	equ	0xFE5
  7443                           plusw1	equ	0xFE3
  7444                           fsr1h	equ	0xFE2
  7445                           fsr1l	equ	0xFE1
  7446                           indf2	equ	0xFDF
  7447                           postinc2	equ	0xFDE
  7448                           postdec2	equ	0xFDD
  7449                           plusw2	equ	0xFDB
  7450                           fsr2h	equ	0xFDA
  7451                           fsr2l	equ	0xFD9
  7452                           status	equ	0xFD8
  7453                           
  7454 ;; *************** function _RF24N_available *****************
  7455 ;; Defined at:
  7456 ;;		line 673 in file "../../RF24Network_c.c"
  7457 ;; Parameters:    Size  Location     Type
  7458 ;;  rn              2  [STACK] PTR struct .
  7459 ;;		 -> network(372), 
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;		None
  7462 ;; Return value:  Size  Location     Type
  7463 ;;                  1  [STACK] unsigned char 
  7464 ;; Registers used:
  7465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
  7466 ;; Tracked objects:
  7467 ;;		On entry : 0/0
  7468 ;;		On exit  : 0/0
  7469 ;;		Unchanged: 0/0
  7470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7475 ;;Total ram usage:        0 bytes
  7476 ;; Hardware stack levels used:    1
  7477 ;; Hardware stack levels required when called:    1
  7478 ;; This function calls:
  7479 ;;		Nothing
  7480 ;; This function is called by:
  7481 ;;		_RF24N_update
  7482 ;; This function uses a reentrant model
  7483 ;;
  7484                           
  7485                           	psect	text27
  7486  004E16                     __ptext27:
  7487                           	opt stack 0
  7488  004E16                     _RF24N_available:
  7489                           	opt stack 25
  7490                           
  7491                           ;RF24Network_c.c: 679: return (rn->next_frame > rn->frame_queue);
  7492                           ;stkvar	_rn @ sp[(0)+-2]
  7493                           
  7494                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  7495                           ;incstack = 0
  7496  004E16  0EFE               	movlw	-2
  7497  004E18  CFE3 F051          	movff	plusw1,btemp+1
  7498  004E1C  0EFF               	movlw	-1
  7499  004E1E  CFE3 F052          	movff	plusw1,btemp+2
  7500  004E22  0ED6               	movlw	214
  7501  004E24  2451               	addwf	btemp+1,w,c
  7502  004E26  6ED9               	movwf	fsr2l,c
  7503  004E28  0E00               	movlw	0
  7504  004E2A  2052               	addwfc	btemp+2,w,c
  7505  004E2C  6EDA               	movwf	fsr2h,c
  7506                           
  7507                           ;stkvar	_rn @ sp[(0)+-2]
  7508  004E2E  0EFE               	movlw	-2
  7509  004E30  50E3               	movf	plusw1,w,c
  7510  004E32  0F3C               	addlw	60
  7511  004E34  6E51               	movwf	btemp+1,c
  7512  004E36  0EFF               	movlw	-1
  7513  004E38  CFE3 F052          	movff	plusw1,btemp+2
  7514  004E3C  0E00               	movlw	0
  7515  004E3E  2252               	addwfc	btemp+2,f,c
  7516  004E40  50DE               	movf	postinc2,w,c
  7517  004E42  5C51               	subwf	btemp+1,w,c
  7518  004E44  50DE               	movf	postinc2,w,c
  7519  004E46  5852               	subwfb	btemp+2,w,c
  7520  004E48  B0D8               	btfsc	status,0,c
  7521  004E4A  D003               	goto	u900
  7522  004E4C  6A50               	clrf	btemp,c
  7523  004E4E  2A50               	incf	btemp,f,c
  7524  004E50  D001               	goto	l276
  7525  004E52                     u900:
  7526  004E52  6A50               	clrf	btemp,c
  7527  004E54                     l276:
  7528                           
  7529                           ; _RF24N_available: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          2, argsize = 2, vargsize = 0
  7530  004E54  52E5               	movf	postdec1,f,c
  7531  004E56  52E5               	movf	postdec1,f,c
  7532  004E58  0012               	return		;funcret
  7533  004E5A                     __end_of_RF24N_available:
  7534                           	opt stack 0
  7535                           tblptru	equ	0xFF8
  7536                           tblptrh	equ	0xFF7
  7537                           tblptrl	equ	0xFF6
  7538                           tablat	equ	0xFF5
  7539                           prodh	equ	0xFF4
  7540                           prodl	equ	0xFF3
  7541                           intcon	equ	0xFF2
  7542                           postinc0	equ	0xFEE
  7543                           postdec0	equ	0xFED
  7544                           fsr0h	equ	0xFEA
  7545                           fsr0l	equ	0xFE9
  7546                           wreg	equ	0xFE8
  7547                           postinc1	equ	0xFE6
  7548                           postdec1	equ	0xFE5
  7549                           plusw1	equ	0xFE3
  7550                           fsr1h	equ	0xFE2
  7551                           fsr1l	equ	0xFE1
  7552                           indf2	equ	0xFDF
  7553                           postinc2	equ	0xFDE
  7554                           postdec2	equ	0xFDD
  7555                           plusw2	equ	0xFDB
  7556                           fsr2h	equ	0xFDA
  7557                           fsr2l	equ	0xFD9
  7558                           status	equ	0xFD8
  7559                           
  7560 ;; *************** function _RF24_getDynamicPayloadSize *****************
  7561 ;; Defined at:
  7562 ;;		line 1064 in file "../../../RF24_c/RF24_c.c"
  7563 ;; Parameters:    Size  Location     Type
  7564 ;;  rf              2  [STACK] PTR struct RF24
  7565 ;;		 -> radio(22), 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  result          1  [STACK] unsigned char 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;                  1  [STACK] unsigned char 
  7570 ;; Registers used:
  7571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7581 ;;Total ram usage:        0 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    6
  7584 ;; This function calls:
  7585 ;;		_RF24_beginTransaction
  7586 ;;		_RF24_endTransaction
  7587 ;;		_RF24_flush_rx
  7588 ;;		_SPI_transfer
  7589 ;;		_delay
  7590 ;; This function is called by:
  7591 ;;		_RF24N_update
  7592 ;; This function uses a reentrant model
  7593 ;;
  7594                           
  7595                           	psect	text28
  7596  0048CE                     __ptext28:
  7597                           	opt stack 0
  7598  0048CE                     _RF24_getDynamicPayloadSize:
  7599                           	opt stack 0
  7600                           
  7601                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  7602  0048CE  52E6               	movf	postinc1,f,c
  7603                           
  7604                           ;RF24_c.c: 1076: RF24_beginTransaction(rf);
  7605                           ;stkvar	_rf @ sp[(-1)+-2]
  7606                           
  7607                           ;incstack = 0
  7608  0048D0  0EFD               	movlw	-3
  7609  0048D2  CFE3 FFE6          	movff	plusw1,postinc1
  7610  0048D6  CFE3 FFE6          	movff	plusw1,postinc1
  7611  0048DA  EC28  F028         	call	_RF24_beginTransaction	;wreg free
  7612                           
  7613                           ;RF24_c.c: 1077: SPI_transfer( 0x60 );
  7614  0048DE  0E60               	movlw	96
  7615  0048E0  6EE6               	movwf	postinc1,c
  7616  0048E2  EC40  F028         	call	_SPI_transfer	;wreg free
  7617                           
  7618                           ;RF24_c.c: 1078: result = SPI_transfer(0xff);
  7619  0048E6  0EFF               	movlw	255
  7620  0048E8  6EE6               	movwf	postinc1,c
  7621  0048EA  EC40  F028         	call	_SPI_transfer	;wreg free
  7622                           
  7623                           ;stkvar	_result @ sp[(-1)+0]
  7624  0048EE  0EFF               	movlw	-1
  7625  0048F0  C050  FFE3         	movff	btemp,plusw1
  7626                           
  7627                           ;RF24_c.c: 1079: RF24_endTransaction(rf);
  7628                           ;stkvar	_rf @ sp[(-1)+-2]
  7629  0048F4  0EFD               	movlw	-3
  7630  0048F6  CFE3 FFE6          	movff	plusw1,postinc1
  7631  0048FA  CFE3 FFE6          	movff	plusw1,postinc1
  7632  0048FE  EC1C  F028         	call	_RF24_endTransaction	;wreg free
  7633                           
  7634                           ;RF24_c.c: 1082: if(result > 32) { RF24_flush_rx(rf);; delay(2); return 0; }
  7635                           ;stkvar	_result @ sp[(-1)+0]
  7636  004902  0EFF               	movlw	-1
  7637  004904  CFE3 F050          	movff	plusw1,btemp
  7638  004908  0E20               	movlw	32
  7639  00490A  6450               	cpfsgt	btemp,c
  7640  00490C  D010               	goto	l2428
  7641                           
  7642                           ;stkvar	_rf @ sp[(-1)+-2]
  7643  00490E  0EFD               	movlw	-3
  7644  004910  CFE3 FFE6          	movff	plusw1,postinc1
  7645  004914  CFE3 FFE6          	movff	plusw1,postinc1
  7646  004918  EC04  F028         	call	_RF24_flush_rx	;wreg free
  7647  00491C  0E02               	movlw	2
  7648  00491E  6EE6               	movwf	postinc1,c
  7649  004920  0E00               	movlw	0
  7650  004922  6EE6               	movwf	postinc1,c
  7651  004924  ECD8  F020         	call	_delay	;wreg free
  7652  004928  0E00               	movlw	0
  7653  00492A  6E50               	movwf	btemp,c
  7654  00492C  D003               	goto	l724
  7655  00492E                     l2428:
  7656                           
  7657                           ;RF24_c.c: 1083: return result;
  7658                           ;stkvar	_result @ sp[(-1)+0]
  7659  00492E  0EFF               	movlw	-1
  7660  004930  CFE3 F050          	movff	plusw1,btemp
  7661  004934                     l724:
  7662                           
  7663                           ; _RF24_getDynamicPayloadSize: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0
      +                           parsize = 2, argsize = 2, vargsize = 0
  7664  004934  52E5               	movf	postdec1,f,c
  7665  004936  52E5               	movf	postdec1,f,c
  7666  004938  52E5               	movf	postdec1,f,c
  7667  00493A  0012               	return		;funcret
  7668  00493C                     __end_of_RF24_getDynamicPayloadSize:
  7669                           	opt stack 0
  7670                           tblptru	equ	0xFF8
  7671                           tblptrh	equ	0xFF7
  7672                           tblptrl	equ	0xFF6
  7673                           tablat	equ	0xFF5
  7674                           prodh	equ	0xFF4
  7675                           prodl	equ	0xFF3
  7676                           intcon	equ	0xFF2
  7677                           postinc0	equ	0xFEE
  7678                           postdec0	equ	0xFED
  7679                           fsr0h	equ	0xFEA
  7680                           fsr0l	equ	0xFE9
  7681                           wreg	equ	0xFE8
  7682                           postinc1	equ	0xFE6
  7683                           postdec1	equ	0xFE5
  7684                           plusw1	equ	0xFE3
  7685                           fsr1h	equ	0xFE2
  7686                           fsr1l	equ	0xFE1
  7687                           indf2	equ	0xFDF
  7688                           postinc2	equ	0xFDE
  7689                           postdec2	equ	0xFDD
  7690                           plusw2	equ	0xFDB
  7691                           fsr2h	equ	0xFDA
  7692                           fsr2l	equ	0xFD9
  7693                           status	equ	0xFD8
  7694                           
  7695 ;; *************** function _RF24_flush_rx *****************
  7696 ;; Defined at:
  7697 ;;		line 338 in file "../../../RF24_c/RF24_c.c"
  7698 ;; Parameters:    Size  Location     Type
  7699 ;;  rf              2  [STACK] PTR struct RF24
  7700 ;;		 -> radio(22), 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;		None
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1  [STACK] unsigned char 
  7705 ;; Registers used:
  7706 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
  7707 ;; Tracked objects:
  7708 ;;		On entry : 0/0
  7709 ;;		On exit  : 0/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;Total ram usage:        0 bytes
  7717 ;; Hardware stack levels used:    1
  7718 ;; Hardware stack levels required when called:    5
  7719 ;; This function calls:
  7720 ;;		_RF24_spiTrans
  7721 ;; This function is called by:
  7722 ;;		_RF24_begin
  7723 ;;		_RF24_getDynamicPayloadSize
  7724 ;; This function uses a reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text29
  7728  005008                     __ptext29:
  7729                           	opt stack 0
  7730  005008                     _RF24_flush_rx:
  7731                           	opt stack 23
  7732                           
  7733                           ;RF24_c.c: 340: return RF24_spiTrans(rf, 0xE2 );
  7734                           ;	Return value of _RF24_flush_rx is never used
  7735                           
  7736                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
  7737                           ;incstack = 0
  7738  005008  0EE2               	movlw	226
  7739  00500A  6EE6               	movwf	postinc1,c
  7740                           
  7741                           ;stkvar	_rf @ sp[(-1)+-2]
  7742  00500C  0EFD               	movlw	-3
  7743  00500E  CFE3 FFE6          	movff	plusw1,postinc1
  7744  005012  CFE3 FFE6          	movff	plusw1,postinc1
  7745  005016  EC6B  F027         	call	_RF24_spiTrans	;wreg free
  7746                           
  7747                           ; _RF24_flush_rx: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2,
      +                           argsize = 2, vargsize = 0
  7748  00501A  52E5               	movf	postdec1,f,c
  7749  00501C  52E5               	movf	postdec1,f,c
  7750  00501E  0012               	return		;funcret
  7751  005020                     __end_of_RF24_flush_rx:
  7752                           	opt stack 0
  7753                           tblptru	equ	0xFF8
  7754                           tblptrh	equ	0xFF7
  7755                           tblptrl	equ	0xFF6
  7756                           tablat	equ	0xFF5
  7757                           prodh	equ	0xFF4
  7758                           prodl	equ	0xFF3
  7759                           intcon	equ	0xFF2
  7760                           postinc0	equ	0xFEE
  7761                           postdec0	equ	0xFED
  7762                           fsr0h	equ	0xFEA
  7763                           fsr0l	equ	0xFE9
  7764                           wreg	equ	0xFE8
  7765                           postinc1	equ	0xFE6
  7766                           postdec1	equ	0xFE5
  7767                           plusw1	equ	0xFE3
  7768                           fsr1h	equ	0xFE2
  7769                           fsr1l	equ	0xFE1
  7770                           indf2	equ	0xFDF
  7771                           postinc2	equ	0xFDE
  7772                           postdec2	equ	0xFDD
  7773                           plusw2	equ	0xFDB
  7774                           fsr2h	equ	0xFDA
  7775                           fsr2l	equ	0xFD9
  7776                           status	equ	0xFD8
  7777                           
  7778 ;; *************** function _RF24_read *****************
  7779 ;; Defined at:
  7780 ;;		line 1115 in file "../../../RF24_c/RF24_c.c"
  7781 ;; Parameters:    Size  Location     Type
  7782 ;;  rf              2  [STACK] PTR struct RF24
  7783 ;;		 -> radio(22), 
  7784 ;;  buf             2  [STACK] PTR void 
  7785 ;;		 -> network(372), 
  7786 ;;  len             1  [STACK] unsigned char 
  7787 ;; Auto vars:     Size  Location     Type
  7788 ;;		None
  7789 ;; Return value:  Size  Location     Type
  7790 ;;                  1  [STACK] void 
  7791 ;; Registers used:
  7792 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
  7793 ;; Tracked objects:
  7794 ;;		On entry : 0/0
  7795 ;;		On exit  : 0/0
  7796 ;;		Unchanged: 0/0
  7797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7802 ;;Total ram usage:        0 bytes
  7803 ;; Hardware stack levels used:    1
  7804 ;; Hardware stack levels required when called:    5
  7805 ;; This function calls:
  7806 ;;		_RF24_read_payload
  7807 ;;		_RF24_write_register_d
  7808 ;; This function is called by:
  7809 ;;		_RF24N_update
  7810 ;; This function uses a reentrant model
  7811 ;;
  7812                           
  7813                           	psect	text30
  7814  004E98                     __ptext30:
  7815                           	opt stack 0
  7816  004E98                     _RF24_read:
  7817                           	opt stack 21
  7818                           
  7819                           ;RF24_c.c: 1118: RF24_read_payload(rf, buf, len );
  7820                           ;stkvar	_len @ sp[(0)+-5]
  7821                           
  7822                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
  7823                           ;incstack = 0
  7824  004E98  0EFB               	movlw	-5
  7825  004E9A  50E3               	movf	plusw1,w,c
  7826  004E9C  6EE6               	movwf	postinc1,c
  7827                           
  7828                           ;stkvar	_buf @ sp[(-1)+-4]
  7829  004E9E  0EFB               	movlw	-5
  7830  004EA0  CFE3 FFE6          	movff	plusw1,postinc1
  7831  004EA4  CFE3 FFE6          	movff	plusw1,postinc1
  7832                           
  7833                           ;stkvar	_rf @ sp[(-3)+-2]
  7834  004EA8  0EFB               	movlw	-5
  7835  004EAA  CFE3 FFE6          	movff	plusw1,postinc1
  7836  004EAE  CFE3 FFE6          	movff	plusw1,postinc1
  7837  004EB2  EC84  F01B         	call	_RF24_read_payload	;wreg free
  7838                           
  7839                           ;RF24_c.c: 1121: RF24_write_register_d(rf,0x07,(1<<(6)) | (1<<(4)) | (1<<(5)) );
  7840  004EB6  0E70               	movlw	112
  7841  004EB8  6EE6               	movwf	postinc1,c
  7842  004EBA  0E07               	movlw	7
  7843  004EBC  6EE6               	movwf	postinc1,c
  7844                           
  7845                           ;stkvar	_rf @ sp[(-2)+-2]
  7846  004EBE  0EFC               	movlw	-4
  7847  004EC0  CFE3 FFE6          	movff	plusw1,postinc1
  7848  004EC4  CFE3 FFE6          	movff	plusw1,postinc1
  7849  004EC8  EC9E  F026         	call	_RF24_write_register_d	;wreg free
  7850                           
  7851                           ; _RF24_read: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, arg
      +                          size = 5, vargsize = 0
  7852  004ECC  0EFB               	movlw	251
  7853  004ECE  26E1               	addwf	fsr1l,f,c
  7854  004ED0  0EFF               	movlw	255
  7855  004ED2  22E2               	addwfc	fsr1h,f,c
  7856  004ED4  0012               	return		;funcret
  7857  004ED6                     __end_of_RF24_read:
  7858                           	opt stack 0
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           postinc0	equ	0xFEE
  7867                           postdec0	equ	0xFED
  7868                           fsr0h	equ	0xFEA
  7869                           fsr0l	equ	0xFE9
  7870                           wreg	equ	0xFE8
  7871                           postinc1	equ	0xFE6
  7872                           postdec1	equ	0xFE5
  7873                           plusw1	equ	0xFE3
  7874                           fsr1h	equ	0xFE2
  7875                           fsr1l	equ	0xFE1
  7876                           indf2	equ	0xFDF
  7877                           postinc2	equ	0xFDE
  7878                           postdec2	equ	0xFDD
  7879                           plusw2	equ	0xFDB
  7880                           fsr2h	equ	0xFDA
  7881                           fsr2l	equ	0xFD9
  7882                           status	equ	0xFD8
  7883                           
  7884 ;; *************** function _RF24_read_payload *****************
  7885 ;; Defined at:
  7886 ;;		line 269 in file "../../../RF24_c/RF24_c.c"
  7887 ;; Parameters:    Size  Location     Type
  7888 ;;  rf              2  [STACK] PTR struct RF24
  7889 ;;		 -> radio(22), 
  7890 ;;  buf             2  [STACK] PTR void 
  7891 ;;		 -> network(372), 
  7892 ;;  data_len        1  [STACK] unsigned char 
  7893 ;; Auto vars:     Size  Location     Type
  7894 ;;  current         2  [STACK] PTR unsigned char 
  7895 ;;		 -> network(372), 
  7896 ;;  blank_len       1  [STACK] unsigned char 
  7897 ;;  status          1    0        unsigned char 
  7898 ;; Return value:  Size  Location     Type
  7899 ;;                  1  [STACK] unsigned char 
  7900 ;; Registers used:
  7901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
  7902 ;; Tracked objects:
  7903 ;;		On entry : 0/0
  7904 ;;		On exit  : 0/0
  7905 ;;		Unchanged: 0/0
  7906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;Total ram usage:        0 bytes
  7912 ;; Hardware stack levels used:    1
  7913 ;; Hardware stack levels required when called:    4
  7914 ;; This function calls:
  7915 ;;		_RF24_beginTransaction
  7916 ;;		_RF24_endTransaction
  7917 ;;		_SPI_transfer
  7918 ;; This function is called by:
  7919 ;;		_RF24_read
  7920 ;; This function uses a reentrant model
  7921 ;;
  7922                           
  7923                           	psect	text31
  7924  003708                     __ptext31:
  7925                           	opt stack 0
  7926  003708                     _RF24_read_payload:
  7927                           	opt stack 0
  7928                           
  7929                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
  7930  003708  0E05               	movlw	5
  7931  00370A  26E1               	addwf	fsr1l,f,c
  7932  00370C  0E00               	movlw	0
  7933  00370E  22E2               	addwfc	fsr1h,f,c
  7934                           
  7935                           ;RF24_c.c: 271: uint8_t status;
  7936                           ;RF24_c.c: 272: uint8_t* current = (uint8_t*)(buf);
  7937                           ;stkvar	_buf @ sp[(-5)+-4]
  7938                           
  7939                           ;incstack = 0
  7940  003710  0EF7               	movlw	-9
  7941  003712  CFE3 F051          	movff	plusw1,btemp+1
  7942  003716  0EF8               	movlw	-8
  7943  003718  CFE3 F052          	movff	plusw1,btemp+2
  7944                           
  7945                           ;stkvar	_current @ sp[(-5)+2]
  7946  00371C  0EFE               	movlw	-2
  7947  00371E  C052  FFE3         	movff	btemp+2,plusw1
  7948  003722  0EFD               	movlw	-3
  7949  003724  C051  FFE3         	movff	btemp+1,plusw1
  7950                           
  7951                           ;RF24_c.c: 273: uint8_t blank_len;
  7952                           ;RF24_c.c: 275: if(data_len > rf->payload_size) data_len = rf->payload_size;
  7953                           ;stkvar	_data_len @ sp[(-5)+-5]
  7954                           ;stkvar	_rf @ sp[(-5)+-2]
  7955  003728  0EF9               	movlw	-7
  7956  00372A  CFE3 F051          	movff	plusw1,btemp+1
  7957  00372E  0EFA               	movlw	-6
  7958  003730  CFE3 F052          	movff	plusw1,btemp+2
  7959  003734  0E05               	movlw	5
  7960  003736  2451               	addwf	btemp+1,w,c
  7961  003738  6ED9               	movwf	fsr2l,c
  7962  00373A  0E00               	movlw	0
  7963  00373C  2052               	addwfc	btemp+2,w,c
  7964  00373E  6EDA               	movwf	fsr2h,c
  7965  003740  0EF6               	movlw	-10
  7966  003742  50E3               	movf	plusw1,w,c
  7967  003744  5CDE               	subwf	postinc2,w,c
  7968  003746  B0D8               	btfsc	status,0,c
  7969  003748  D011               	goto	l2318
  7970                           
  7971                           ;stkvar	_rf @ sp[(-5)+-2]
  7972  00374A  0EF9               	movlw	-7
  7973  00374C  CFE3 F051          	movff	plusw1,btemp+1
  7974  003750  0EFA               	movlw	-6
  7975  003752  CFE3 F052          	movff	plusw1,btemp+2
  7976  003756  0E05               	movlw	5
  7977  003758  2451               	addwf	btemp+1,w,c
  7978  00375A  6ED9               	movwf	fsr2l,c
  7979  00375C  0E00               	movlw	0
  7980  00375E  2052               	addwfc	btemp+2,w,c
  7981  003760  6EDA               	movwf	fsr2h,c
  7982  003762  50DF               	movf	indf2,w,c
  7983  003764  6E5B               	movwf	btemp+11,c
  7984                           
  7985                           ;stkvar	_data_len @ sp[(-5)+-5]
  7986  003766  0EF6               	movlw	-10
  7987  003768  C05B  FFE3         	movff	btemp+11,plusw1
  7988  00376C                     l2318:
  7989                           
  7990                           ;RF24_c.c: 276: blank_len = rf->dynamic_payloads_enabled ? 0 : rf->payload_size - data_l
      +                          en;
  7991                           ;stkvar	_rf @ sp[(-5)+-2]
  7992  00376C  0EF9               	movlw	-7
  7993  00376E  CFE3 F051          	movff	plusw1,btemp+1
  7994  003772  0EFA               	movlw	-6
  7995  003774  CFE3 F052          	movff	plusw1,btemp+2
  7996  003778  0E06               	movlw	6
  7997  00377A  2451               	addwf	btemp+1,w,c
  7998  00377C  6ED9               	movwf	fsr2l,c
  7999  00377E  0E00               	movlw	0
  8000  003780  2052               	addwfc	btemp+2,w,c
  8001  003782  6EDA               	movwf	fsr2h,c
  8002  003784  50DF               	movf	indf2,w,c
  8003  003786  A4D8               	btfss	status,2,c
  8004  003788  D01B               	goto	l2322
  8005                           
  8006                           ;stkvar	_rf @ sp[(-5)+-2]
  8007  00378A  0EF9               	movlw	-7
  8008  00378C  CFE3 F051          	movff	plusw1,btemp+1
  8009  003790  0EFA               	movlw	-6
  8010  003792  CFE3 F052          	movff	plusw1,btemp+2
  8011  003796  0E05               	movlw	5
  8012  003798  2451               	addwf	btemp+1,w,c
  8013  00379A  6ED9               	movwf	fsr2l,c
  8014  00379C  0E00               	movlw	0
  8015  00379E  2052               	addwfc	btemp+2,w,c
  8016  0037A0  6EDA               	movwf	fsr2h,c
  8017  0037A2  50DF               	movf	indf2,w,c
  8018  0037A4  6E51               	movwf	btemp+1,c
  8019  0037A6  6A52               	clrf	btemp+2,c
  8020                           
  8021                           ;stkvar	_data_len @ sp[(-5)+-5]
  8022  0037A8  0EF6               	movlw	-10
  8023  0037AA  50E3               	movf	plusw1,w,c
  8024  0037AC  5E51               	subwf	btemp+1,f,c
  8025  0037AE  0E00               	movlw	0
  8026  0037B0  5A52               	subwfb	btemp+2,f,c
  8027                           
  8028                           ;stkvar	_RF24_read_payload$1877 @ sp[(-5)+0]
  8029  0037B2  0EFB               	movlw	-5
  8030  0037B4  C051  FFE3         	movff	btemp+1,plusw1
  8031  0037B8  0EFC               	movlw	-4
  8032  0037BA  C052  FFE3         	movff	btemp+2,plusw1
  8033  0037BE  D004               	goto	l2324
  8034  0037C0                     l2322:
  8035                           
  8036                           ;stkvar	_RF24_read_payload$1877 @ sp[(-5)+0]
  8037  0037C0  0EFB               	movlw	-5
  8038  0037C2  6AE3               	clrf	plusw1,c
  8039  0037C4  0EFC               	movlw	-4
  8040  0037C6  6AE3               	clrf	plusw1,c
  8041  0037C8                     l2324:
  8042                           
  8043                           ;stkvar	_RF24_read_payload$1877 @ sp[(-5)+0]
  8044                           ;stkvar	_blank_len @ sp[(-5)+4]
  8045  0037C8  0EFB               	movlw	-5
  8046  0037CA  CFE3 F050          	movff	plusw1,btemp
  8047  0037CE  0EFF               	movlw	-1
  8048  0037D0  C050  FFE3         	movff	btemp,plusw1
  8049                           
  8050                           ;RF24_c.c: 280: ;
  8051                           ;RF24_c.c: 308: RF24_beginTransaction(rf);
  8052                           ;stkvar	_rf @ sp[(-5)+-2]
  8053  0037D4  0EF9               	movlw	-7
  8054  0037D6  CFE3 FFE6          	movff	plusw1,postinc1
  8055  0037DA  CFE3 FFE6          	movff	plusw1,postinc1
  8056  0037DE  EC28  F028         	call	_RF24_beginTransaction	;wreg free
  8057  0037E2  0E61               	movlw	97
  8058  0037E4  6EE6               	movwf	postinc1,c
  8059  0037E6  EC40  F028         	call	_SPI_transfer	;wreg free
  8060                           
  8061                           ;RF24_c.c: 310: while ( data_len-- ) {
  8062  0037EA  D01B               	goto	l2334
  8063  0037EC                     l2330:
  8064                           
  8065                           ;RF24_c.c: 311: *current++ = SPI_transfer(0xFF);
  8066                           ;stkvar	_current @ sp[(-5)+2]
  8067  0037EC  0EFD               	movlw	-3
  8068  0037EE  CFE3 FFD9          	movff	plusw1,fsr2l
  8069  0037F2  0EFE               	movlw	-2
  8070  0037F4  CFE3 FFDA          	movff	plusw1,fsr2h
  8071  0037F8  0EFF               	movlw	255
  8072  0037FA  6EE6               	movwf	postinc1,c
  8073  0037FC  EC40  F028         	call	_SPI_transfer	;wreg free
  8074  003800  5050               	movf	btemp,w,c
  8075  003802  6EDF               	movwf	indf2,c
  8076                           
  8077                           ;stkvar	_current @ sp[(-5)+2]
  8078  003804  0EFD               	movlw	-3
  8079  003806  50E3               	movf	plusw1,w,c
  8080  003808  0F01               	addlw	1
  8081  00380A  6E50               	movwf	btemp,c
  8082  00380C  0EFD               	movlw	-3
  8083  00380E  C050  FFE3         	movff	btemp,plusw1
  8084  003812  6A50               	clrf	btemp,c
  8085  003814  0EFE               	movlw	-2
  8086  003816  50E3               	movf	plusw1,w,c
  8087  003818  2050               	addwfc	btemp,w,c
  8088  00381A  6E50               	movwf	btemp,c
  8089  00381C  0EFE               	movlw	-2
  8090  00381E  C050  FFE3         	movff	btemp,plusw1
  8091  003822                     l2334:
  8092                           
  8093                           ;stkvar	_data_len @ sp[(-5)+-5]
  8094  003822  0EF6               	movlw	-10
  8095  003824  06E3               	decf	plusw1,f,c
  8096  003826  0EF6               	movlw	-10
  8097  003828  28E3               	incf	plusw1,w,c
  8098  00382A  B4D8               	btfsc	status,2,c
  8099  00382C  D005               	goto	l2338
  8100  00382E  D7DE               	goto	l2330
  8101  003830                     l2336:
  8102                           
  8103                           ;RF24_c.c: 314: SPI_transfer(0xff);
  8104  003830  0EFF               	movlw	255
  8105  003832  6EE6               	movwf	postinc1,c
  8106  003834  EC40  F028         	call	_SPI_transfer	;wreg free
  8107  003838                     l2338:
  8108                           
  8109                           ;stkvar	_blank_len @ sp[(-5)+4]
  8110  003838  0EFF               	movlw	-1
  8111  00383A  06E3               	decf	plusw1,f,c
  8112  00383C  0EFF               	movlw	-1
  8113  00383E  28E3               	incf	plusw1,w,c
  8114  003840  A4D8               	btfss	status,2,c
  8115  003842  D7F6               	goto	l2336
  8116                           
  8117                           ;RF24_c.c: 315: }
  8118                           ;RF24_c.c: 316: RF24_endTransaction(rf);
  8119                           ;stkvar	_rf @ sp[(-5)+-2]
  8120  003844  0EF9               	movlw	-7
  8121  003846  CFE3 FFE6          	movff	plusw1,postinc1
  8122  00384A  CFE3 FFE6          	movff	plusw1,postinc1
  8123  00384E  EC1C  F028         	call	_RF24_endTransaction	;wreg free
  8124                           
  8125                           ; _RF24_read_payload: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 5, argsize = 5, vargsize = 0
  8126  003852  0EF6               	movlw	246
  8127  003854  26E1               	addwf	fsr1l,f,c
  8128  003856  0EFF               	movlw	255
  8129  003858  22E2               	addwfc	fsr1h,f,c
  8130  00385A  0012               	return		;funcret
  8131  00385C                     __end_of_RF24_read_payload:
  8132                           	opt stack 0
  8133                           tblptru	equ	0xFF8
  8134                           tblptrh	equ	0xFF7
  8135                           tblptrl	equ	0xFF6
  8136                           tablat	equ	0xFF5
  8137                           prodh	equ	0xFF4
  8138                           prodl	equ	0xFF3
  8139                           intcon	equ	0xFF2
  8140                           postinc0	equ	0xFEE
  8141                           postdec0	equ	0xFED
  8142                           fsr0h	equ	0xFEA
  8143                           fsr0l	equ	0xFE9
  8144                           wreg	equ	0xFE8
  8145                           postinc1	equ	0xFE6
  8146                           postdec1	equ	0xFE5
  8147                           plusw1	equ	0xFE3
  8148                           fsr1h	equ	0xFE2
  8149                           fsr1l	equ	0xFE1
  8150                           indf2	equ	0xFDF
  8151                           postinc2	equ	0xFDE
  8152                           postdec2	equ	0xFDD
  8153                           plusw2	equ	0xFDB
  8154                           fsr2h	equ	0xFDA
  8155                           fsr2l	equ	0xFD9
  8156                           status	equ	0xFD8
  8157                           
  8158 ;; *************** function _RF24N_enqueue *****************
  8159 ;; Defined at:
  8160 ;;		line 522 in file "../../RF24Network_c.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;  rn              2  [STACK] PTR struct .
  8163 ;;		 -> network(372), 
  8164 ;;  header          2  [STACK] PTR struct .
  8165 ;;		 -> network.frame_buffer(32), network(372), 
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  padding         1  [STACK] unsigned char 
  8168 ;;  padding         1  [STACK] unsigned char 
  8169 ;;  message_size    2  [STACK] unsigned int 
  8170 ;;  result          1  [STACK] unsigned char 
  8171 ;;  isFragment      1  [STACK] unsigned char 
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1  [STACK] unsigned char 
  8174 ;; Registers used:
  8175 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+8, btemp+9, btemp
      ++10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;Total ram usage:        0 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    7
  8188 ;; This function calls:
  8189 ;;		_RF24_stopListening
  8190 ;;		___lwdiv
  8191 ;;		_memcpy
  8192 ;; This function is called by:
  8193 ;;		_RF24N_update
  8194 ;; This function uses a reentrant model
  8195 ;;
  8196                           
  8197                           	psect	text32
  8198  00001C                     __ptext32:
  8199                           	opt stack 0
  8200  00001C                     _RF24N_enqueue:
  8201                           	opt stack 0
  8202                           
  8203                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  8204  00001C  0E07               	movlw	7
  8205  00001E  26E1               	addwf	fsr1l,f,c
  8206  000020  0E00               	movlw	0
  8207  000022  22E2               	addwfc	fsr1h,f,c
  8208                           
  8209                           ;RF24Network_c.c: 525: uint16_t message_size = rn->frame_size - sizeof(RF24NetworkHeader
      +                          );
  8210                           
  8211                           ;incstack = 0
  8212  000024  0EF8               	movlw	248
  8213  000026  6E51               	movwf	btemp+1,c
  8214  000028  0EFF               	movlw	255
  8215  00002A  6E52               	movwf	btemp+2,c
  8216                           
  8217                           ;stkvar	_rn @ sp[(-7)+-2]
  8218  00002C  0EF7               	movlw	-9
  8219  00002E  CFE3 F05A          	movff	plusw1,btemp+10
  8220  000032  0EF8               	movlw	-8
  8221  000034  CFE3 F05B          	movff	plusw1,btemp+11
  8222  000038  0E34               	movlw	52
  8223  00003A  245A               	addwf	btemp+10,w,c
  8224  00003C  6ED9               	movwf	fsr2l,c
  8225  00003E  0E00               	movlw	0
  8226  000040  205B               	addwfc	btemp+11,w,c
  8227  000042  6EDA               	movwf	fsr2h,c
  8228  000044  50DF               	movf	indf2,w,c
  8229  000046  6E5A               	movwf	btemp+10,c
  8230  000048  6A5B               	clrf	btemp+11,c
  8231  00004A  5051               	movf	btemp+1,w,c
  8232  00004C  265A               	addwf	btemp+10,f,c
  8233  00004E  5052               	movf	btemp+2,w,c
  8234  000050  225B               	addwfc	btemp+11,f,c
  8235                           
  8236                           ;stkvar	_message_size @ sp[(-7)+3]
  8237  000052  0EFC               	movlw	-4
  8238  000054  C05A  FFE3         	movff	btemp+10,plusw1
  8239  000058  0EFD               	movlw	-3
  8240  00005A  C05B  FFE3         	movff	btemp+11,plusw1
  8241                           
  8242                           ;RF24Network_c.c: 527: ;
  8243                           ;RF24Network_c.c: 531: uint8_t isFragment = header->type == 148 || header->type == 149 |
      +                          | header->type == 150 || header->type == 200 ;
  8244                           ;stkvar	_RF24N_enqueue$1053 @ sp[(-7)+2]
  8245  00005E  0EFB               	movlw	-5
  8246  000060  6AE3               	clrf	plusw1,c
  8247  000062  2AE3               	incf	plusw1,f,c
  8248                           
  8249                           ;stkvar	_header @ sp[(-7)+-4]
  8250  000064  0EF5               	movlw	-11
  8251  000066  CFE3 F051          	movff	plusw1,btemp+1
  8252  00006A  0EF6               	movlw	-10
  8253  00006C  CFE3 F052          	movff	plusw1,btemp+2
  8254  000070  0E06               	movlw	6
  8255  000072  2451               	addwf	btemp+1,w,c
  8256  000074  6ED9               	movwf	fsr2l,c
  8257  000076  0E00               	movlw	0
  8258  000078  2052               	addwfc	btemp+2,w,c
  8259  00007A  6EDA               	movwf	fsr2h,c
  8260  00007C  0E94               	movlw	148
  8261  00007E  18DE               	xorwf	postinc2,w,c
  8262  000080  B4D8               	btfsc	status,2,c
  8263  000082  D032               	goto	l2540
  8264                           
  8265                           ;stkvar	_header @ sp[(-7)+-4]
  8266  000084  0EF5               	movlw	-11
  8267  000086  CFE3 F051          	movff	plusw1,btemp+1
  8268  00008A  0EF6               	movlw	-10
  8269  00008C  CFE3 F052          	movff	plusw1,btemp+2
  8270  000090  0E06               	movlw	6
  8271  000092  2451               	addwf	btemp+1,w,c
  8272  000094  6ED9               	movwf	fsr2l,c
  8273  000096  0E00               	movlw	0
  8274  000098  2052               	addwfc	btemp+2,w,c
  8275  00009A  6EDA               	movwf	fsr2h,c
  8276  00009C  0E95               	movlw	149
  8277  00009E  18DE               	xorwf	postinc2,w,c
  8278  0000A0  B4D8               	btfsc	status,2,c
  8279  0000A2  D022               	goto	l2540
  8280                           
  8281                           ;stkvar	_header @ sp[(-7)+-4]
  8282  0000A4  0EF5               	movlw	-11
  8283  0000A6  CFE3 F051          	movff	plusw1,btemp+1
  8284  0000AA  0EF6               	movlw	-10
  8285  0000AC  CFE3 F052          	movff	plusw1,btemp+2
  8286  0000B0  0E06               	movlw	6
  8287  0000B2  2451               	addwf	btemp+1,w,c
  8288  0000B4  6ED9               	movwf	fsr2l,c
  8289  0000B6  0E00               	movlw	0
  8290  0000B8  2052               	addwfc	btemp+2,w,c
  8291  0000BA  6EDA               	movwf	fsr2h,c
  8292  0000BC  0E96               	movlw	150
  8293  0000BE  18DE               	xorwf	postinc2,w,c
  8294  0000C0  B4D8               	btfsc	status,2,c
  8295  0000C2  D012               	goto	l2540
  8296                           
  8297                           ;stkvar	_header @ sp[(-7)+-4]
  8298  0000C4  0EF5               	movlw	-11
  8299  0000C6  CFE3 F051          	movff	plusw1,btemp+1
  8300  0000CA  0EF6               	movlw	-10
  8301  0000CC  CFE3 F052          	movff	plusw1,btemp+2
  8302  0000D0  0E06               	movlw	6
  8303  0000D2  2451               	addwf	btemp+1,w,c
  8304  0000D4  6ED9               	movwf	fsr2l,c
  8305  0000D6  0E00               	movlw	0
  8306  0000D8  2052               	addwfc	btemp+2,w,c
  8307  0000DA  6EDA               	movwf	fsr2h,c
  8308  0000DC  0EC8               	movlw	200
  8309  0000DE  18DE               	xorwf	postinc2,w,c
  8310  0000E0  B4D8               	btfsc	status,2,c
  8311  0000E2  D002               	goto	l2540
  8312                           
  8313                           ;stkvar	_RF24N_enqueue$1053 @ sp[(-7)+2]
  8314  0000E4  0EFB               	movlw	-5
  8315  0000E6  6AE3               	clrf	plusw1,c
  8316  0000E8                     l2540:
  8317                           
  8318                           ;stkvar	_RF24N_enqueue$1053 @ sp[(-7)+2]
  8319                           ;stkvar	_isFragment @ sp[(-7)+6]
  8320  0000E8  0EFB               	movlw	-5
  8321  0000EA  CFE3 F050          	movff	plusw1,btemp
  8322  0000EE  0EFF               	movlw	-1
  8323  0000F0  C050  FFE3         	movff	btemp,plusw1
  8324                           
  8325                           ;RF24Network_c.c: 533: if(isFragment){
  8326                           ;stkvar	_isFragment @ sp[(-7)+6]
  8327  0000F4  0EFF               	movlw	-1
  8328  0000F6  50E3               	movf	plusw1,w,c
  8329  0000F8  B4D8               	btfsc	status,2,c
  8330  0000FA  D3C6               	goto	l2658
  8331                           
  8332                           ;RF24Network_c.c: 535: if(header->type == 148){
  8333                           ;stkvar	_header @ sp[(-7)+-4]
  8334  0000FC  0EF5               	movlw	-11
  8335  0000FE  CFE3 F051          	movff	plusw1,btemp+1
  8336  000102  0EF6               	movlw	-10
  8337  000104  CFE3 F052          	movff	plusw1,btemp+2
  8338  000108  0E06               	movlw	6
  8339  00010A  2451               	addwf	btemp+1,w,c
  8340  00010C  6ED9               	movwf	fsr2l,c
  8341  00010E  0E00               	movlw	0
  8342  000110  2052               	addwfc	btemp+2,w,c
  8343  000112  6EDA               	movwf	fsr2h,c
  8344  000114  0E94               	movlw	148
  8345  000116  18DE               	xorwf	postinc2,w,c
  8346  000118  A4D8               	btfss	status,2,c
  8347  00011A  D140               	goto	l2584
  8348                           
  8349                           ;RF24Network_c.c: 537: if(header->reserved > (144 + 10-10 / rn->max_frame_payload_size) 
      +                          ){
  8350                           ;stkvar	_rn @ sp[(-7)+-2]
  8351  00011C  0EF7               	movlw	-9
  8352  00011E  CFE3 F051          	movff	plusw1,btemp+1
  8353  000122  0EF8               	movlw	-8
  8354  000124  CFE3 F052          	movff	plusw1,btemp+2
  8355  000128  0E35               	movlw	53
  8356  00012A  2451               	addwf	btemp+1,w,c
  8357  00012C  6ED9               	movwf	fsr2l,c
  8358  00012E  0E00               	movlw	0
  8359  000130  2052               	addwfc	btemp+2,w,c
  8360  000132  6EDA               	movwf	fsr2h,c
  8361  000134  CFDE F051          	movff	postinc2,btemp+1
  8362  000138  CFDD F052          	movff	postdec2,btemp+2
  8363  00013C  C051  FFE6         	movff	btemp+1,postinc1
  8364  000140  C052  FFE6         	movff	btemp+2,postinc1
  8365  000144  0E0A               	movlw	10
  8366  000146  6EE6               	movwf	postinc1,c
  8367  000148  0E00               	movlw	0
  8368  00014A  6EE6               	movwf	postinc1,c
  8369  00014C  EC40  F01F         	call	___lwdiv	;wreg free
  8370  000150  0E9A               	movlw	154
  8371  000152  6E58               	movwf	btemp+8,c
  8372  000154  0E00               	movlw	0
  8373  000156  6E59               	movwf	btemp+9,c
  8374  000158  5050               	movf	btemp,w,c
  8375  00015A  5E58               	subwf	btemp+8,f,c
  8376  00015C  5051               	movf	btemp+1,w,c
  8377  00015E  5A59               	subwfb	btemp+9,f,c
  8378                           
  8379                           ;stkvar	_header @ sp[(-7)+-4]
  8380  000160  0EF5               	movlw	-11
  8381  000162  CFE3 F051          	movff	plusw1,btemp+1
  8382  000166  0EF6               	movlw	-10
  8383  000168  CFE3 F052          	movff	plusw1,btemp+2
  8384  00016C  0E07               	movlw	7
  8385  00016E  2451               	addwf	btemp+1,w,c
  8386  000170  6ED9               	movwf	fsr2l,c
  8387  000172  0E00               	movlw	0
  8388  000174  2052               	addwfc	btemp+2,w,c
  8389  000176  6EDA               	movwf	fsr2h,c
  8390  000178  50DF               	movf	indf2,w,c
  8391  00017A  6E5B               	movwf	btemp+11,c
  8392  00017C  505B               	movf	btemp+11,w,c
  8393  00017E  5C58               	subwf	btemp+8,w,c
  8394  000180  0E00               	movlw	0
  8395  000182  5859               	subwfb	btemp+9,w,c
  8396  000184  B0D8               	btfsc	status,0,c
  8397  000186  D010               	goto	l2556
  8398  000188                     l2548:
  8399                           
  8400                           ;RF24Network_c.c: 542: rn->frag_queue.header.reserved = 0;
  8401                           ;stkvar	_rn @ sp[(-7)+-2]
  8402  000188  0EF7               	movlw	-9
  8403  00018A  CFE3 F051          	movff	plusw1,btemp+1
  8404  00018E  0EF8               	movlw	-8
  8405  000190  CFE3 F052          	movff	plusw1,btemp+2
  8406  000194  0EDF               	movlw	223
  8407  000196  2451               	addwf	btemp+1,w,c
  8408  000198  6ED9               	movwf	fsr2l,c
  8409  00019A  0E00               	movlw	0
  8410  00019C  2052               	addwfc	btemp+2,w,c
  8411  00019E  6EDA               	movwf	fsr2h,c
  8412  0001A0  0E00               	movlw	0
  8413  0001A2  6EDF               	movwf	indf2,c
  8414  0001A4                     l2550:
  8415                           
  8416                           ;RF24Network_c.c: 543: return 0;
  8417  0001A4  0E00               	movlw	0
  8418  0001A6  D252               	goto	L11
  8419  0001A8                     l2556:
  8420                           
  8421                           ;RF24Network_c.c: 545: if(rn->frag_queue.header.id == header->id && rn->frag_queue.heade
      +                          r.from_node == header->from_node){
  8422                           ;stkvar	_header @ sp[(-7)+-4]
  8423  0001A8  0EF5               	movlw	-11
  8424  0001AA  CFE3 F051          	movff	plusw1,btemp+1
  8425  0001AE  0EF6               	movlw	-10
  8426  0001B0  CFE3 F052          	movff	plusw1,btemp+2
  8427  0001B4  0E04               	movlw	4
  8428  0001B6  2451               	addwf	btemp+1,w,c
  8429  0001B8  6ED9               	movwf	fsr2l,c
  8430  0001BA  0E00               	movlw	0
  8431  0001BC  2052               	addwfc	btemp+2,w,c
  8432  0001BE  6EDA               	movwf	fsr2h,c
  8433                           
  8434                           ;stkvar	_rn @ sp[(-7)+-2]
  8435  0001C0  0EF7               	movlw	-9
  8436  0001C2  CFE3 F051          	movff	plusw1,btemp+1
  8437  0001C6  0EF8               	movlw	-8
  8438  0001C8  CFE3 F052          	movff	plusw1,btemp+2
  8439  0001CC  0EDC               	movlw	220
  8440  0001CE  2451               	addwf	btemp+1,w,c
  8441  0001D0  6EE9               	movwf	fsr0l,c
  8442  0001D2  0E00               	movlw	0
  8443  0001D4  2052               	addwfc	btemp+2,w,c
  8444  0001D6  6EEA               	movwf	fsr0h,c
  8445  0001D8  50DE               	movf	postinc2,w,c
  8446  0001DA  18EE               	xorwf	postinc0,w,c
  8447  0001DC  E11F               	bnz	l2564
  8448  0001DE  50DE               	movf	postinc2,w,c
  8449  0001E0  18EE               	xorwf	postinc0,w,c
  8450  0001E2  A4D8               	btfss	status,2,c
  8451  0001E4  D01B               	goto	l2564
  8452                           
  8453                           ;stkvar	_header @ sp[(-7)+-4]
  8454  0001E6  0EF5               	movlw	-11
  8455  0001E8  CFE3 FFD9          	movff	plusw1,fsr2l
  8456  0001EC  0EF6               	movlw	-10
  8457  0001EE  CFE3 FFDA          	movff	plusw1,fsr2h
  8458                           
  8459                           ;stkvar	_rn @ sp[(-7)+-2]
  8460  0001F2  0EF7               	movlw	-9
  8461  0001F4  CFE3 F051          	movff	plusw1,btemp+1
  8462  0001F8  0EF8               	movlw	-8
  8463  0001FA  CFE3 F052          	movff	plusw1,btemp+2
  8464  0001FE  0ED8               	movlw	216
  8465  000200  2451               	addwf	btemp+1,w,c
  8466  000202  6EE9               	movwf	fsr0l,c
  8467  000204  0E00               	movlw	0
  8468  000206  2052               	addwfc	btemp+2,w,c
  8469  000208  6EEA               	movwf	fsr0h,c
  8470  00020A  50DE               	movf	postinc2,w,c
  8471  00020C  18EE               	xorwf	postinc0,w,c
  8472  00020E  E106               	bnz	l2564
  8473  000210  50DE               	movf	postinc2,w,c
  8474  000212  18EE               	xorwf	postinc0,w,c
  8475  000214  A4D8               	btfss	status,2,c
  8476  000216  D002               	goto	l2564
  8477  000218                     l2560:
  8478                           
  8479                           ;RF24Network_c.c: 546: return 1;
  8480  000218  0E01               	movlw	1
  8481  00021A  D218               	goto	L11
  8482  00021C                     l2564:
  8483                           
  8484                           ;RF24Network_c.c: 547: }
  8485                           ;RF24Network_c.c: 549: if( (header->reserved * 24) > (144 + 10-10 - (rn->next_frame-rn->
      +                          frame_queue)) ){
  8486                           ;stkvar	_header @ sp[(-7)+-4]
  8487  00021C  0EF5               	movlw	-11
  8488  00021E  CFE3 F051          	movff	plusw1,btemp+1
  8489  000222  0EF6               	movlw	-10
  8490  000224  CFE3 F052          	movff	plusw1,btemp+2
  8491  000228  0E07               	movlw	7
  8492  00022A  2451               	addwf	btemp+1,w,c
  8493  00022C  6ED9               	movwf	fsr2l,c
  8494  00022E  0E00               	movlw	0
  8495  000230  2052               	addwfc	btemp+2,w,c
  8496  000232  6EDA               	movwf	fsr2h,c
  8497  000234  50DF               	movf	indf2,w,c
  8498  000236  0D18               	mullw	24
  8499                           
  8500                           ;stkvar	_rn @ sp[(-7)+-2]
  8501  000238  0EF7               	movlw	-9
  8502  00023A  CFE3 F051          	movff	plusw1,btemp+1
  8503  00023E  0EF8               	movlw	-8
  8504  000240  CFE3 F052          	movff	plusw1,btemp+2
  8505  000244  0ED6               	movlw	214
  8506  000246  2451               	addwf	btemp+1,w,c
  8507  000248  6ED9               	movwf	fsr2l,c
  8508  00024A  0E00               	movlw	0
  8509  00024C  2052               	addwfc	btemp+2,w,c
  8510  00024E  6EDA               	movwf	fsr2h,c
  8511  000250  CFDE F051          	movff	postinc2,btemp+1
  8512  000254  CFDD F052          	movff	postdec2,btemp+2
  8513                           
  8514                           ;stkvar	_rn @ sp[(-7)+-2]
  8515  000258  0EF7               	movlw	-9
  8516  00025A  CFE3 F05A          	movff	plusw1,btemp+10
  8517  00025E  0EF8               	movlw	-8
  8518  000260  CFE3 F05B          	movff	plusw1,btemp+11
  8519  000264  5051               	movf	btemp+1,w,c
  8520  000266  5E5A               	subwf	btemp+10,f,c
  8521  000268  5052               	movf	btemp+2,w,c
  8522  00026A  5A5B               	subwfb	btemp+11,f,c
  8523  00026C  0ECC               	movlw	204
  8524  00026E  265A               	addwf	btemp+10,f,c
  8525  000270  0E00               	movlw	0
  8526  000272  225B               	addwfc	btemp+11,f,c
  8527  000274  50F3               	movf	prodl,w,c
  8528  000276  5C5A               	subwf	btemp+10,w,c
  8529  000278  505B               	movf	btemp+11,w,c
  8530  00027A  0A80               	xorlw	128
  8531  00027C  6E50               	movwf	btemp,c
  8532  00027E  50F4               	movf	prodh,w,c
  8533  000280  0A80               	xorlw	128
  8534  000282  5850               	subwfb	btemp,w,c
  8535  000284  B0D8               	btfsc	status,0,c
  8536  000286  D024               	goto	l2570
  8537                           
  8538                           ;RF24Network_c.c: 550: rn->networkFlags |= 1;
  8539                           ;stkvar	_rn @ sp[(-7)+-2]
  8540  000288  0EF7               	movlw	-9
  8541  00028A  CFE3 F051          	movff	plusw1,btemp+1
  8542  00028E  0EF8               	movlw	-8
  8543  000290  CFE3 F052          	movff	plusw1,btemp+2
  8544  000294  0E2A               	movlw	42
  8545  000296  2451               	addwf	btemp+1,w,c
  8546  000298  6ED9               	movwf	fsr2l,c
  8547  00029A  0E00               	movlw	0
  8548  00029C  2052               	addwfc	btemp+2,w,c
  8549  00029E  6EDA               	movwf	fsr2h,c
  8550  0002A0  0E00               	movlw	0
  8551  0002A2  80DB               	bsf	plusw2,0,c
  8552                           
  8553                           ;RF24Network_c.c: 551: RF24_stopListening(rn->radio);
  8554                           ;stkvar	_rn @ sp[(-7)+-2]
  8555  0002A4  0EF7               	movlw	-9
  8556  0002A6  CFE3 F051          	movff	plusw1,btemp+1
  8557  0002AA  0EF8               	movlw	-8
  8558  0002AC  CFE3 F052          	movff	plusw1,btemp+2
  8559  0002B0  0E2F               	movlw	47
  8560  0002B2  2451               	addwf	btemp+1,w,c
  8561  0002B4  6ED9               	movwf	fsr2l,c
  8562  0002B6  0E00               	movlw	0
  8563  0002B8  2052               	addwfc	btemp+2,w,c
  8564  0002BA  6EDA               	movwf	fsr2h,c
  8565  0002BC  CFDE F051          	movff	postinc2,btemp+1
  8566  0002C0  CFDD F052          	movff	postdec2,btemp+2
  8567  0002C4  C051  FFE6         	movff	btemp+1,postinc1
  8568  0002C8  C052  FFE6         	movff	btemp+2,postinc1
  8569  0002CC  EC50  F01E         	call	_RF24_stopListening	;wreg free
  8570  0002D0                     l2570:
  8571                           
  8572                           ;RF24Network_c.c: 552: }
  8573                           ;RF24Network_c.c: 554: memcpy(&rn->frag_queue,rn->frame_buffer,8);
  8574  0002D0  0E08               	movlw	8
  8575  0002D2  6EE6               	movwf	postinc1,c
  8576  0002D4  0E00               	movlw	0
  8577  0002D6  6EE6               	movwf	postinc1,c
  8578                           
  8579                           ;stkvar	_rn @ sp[(-9)+-2]
  8580  0002D8  0EF5               	movlw	-11
  8581  0002DA  CFE3 F05A          	movff	plusw1,btemp+10
  8582  0002DE  0EF6               	movlw	-10
  8583  0002E0  CFE3 F05B          	movff	plusw1,btemp+11
  8584  0002E4  0E07               	movlw	7
  8585  0002E6  245A               	addwf	btemp+10,w,c
  8586  0002E8  6E51               	movwf	btemp+1,c
  8587  0002EA  0E00               	movlw	0
  8588  0002EC  205B               	addwfc	btemp+11,w,c
  8589  0002EE  6E52               	movwf	btemp+2,c
  8590  0002F0  C051  FFE6         	movff	btemp+1,postinc1
  8591  0002F4  C052  FFE6         	movff	btemp+2,postinc1
  8592                           
  8593                           ;stkvar	_rn @ sp[(-11)+-2]
  8594  0002F8  0EF3               	movlw	-13
  8595  0002FA  50E3               	movf	plusw1,w,c
  8596  0002FC  0FD8               	addlw	216
  8597  0002FE  6E51               	movwf	btemp+1,c
  8598  000300  0EF4               	movlw	-12
  8599  000302  CFE3 F052          	movff	plusw1,btemp+2
  8600  000306  0E00               	movlw	0
  8601  000308  2252               	addwfc	btemp+2,f,c
  8602  00030A  C051  FFE6         	movff	btemp+1,postinc1
  8603  00030E  C052  FFE6         	movff	btemp+2,postinc1
  8604  000312  ECB5  F01F         	call	_memcpy	;wreg free
  8605                           
  8606                           ;RF24Network_c.c: 555: memcpy(rn->frag_queue.message_buffer,rn->frame_buffer+sizeof(RF24
      +                          NetworkHeader),message_size);
  8607                           ;stkvar	_message_size @ sp[(-7)+3]
  8608  000316  0EFC               	movlw	-4
  8609  000318  CFE3 FFE6          	movff	plusw1,postinc1
  8610  00031C  CFE3 FFE6          	movff	plusw1,postinc1
  8611                           
  8612                           ;stkvar	_rn @ sp[(-9)+-2]
  8613  000320  0EF5               	movlw	-11
  8614  000322  CFE3 F05A          	movff	plusw1,btemp+10
  8615  000326  0EF6               	movlw	-10
  8616  000328  CFE3 F05B          	movff	plusw1,btemp+11
  8617  00032C  0E0F               	movlw	15
  8618  00032E  245A               	addwf	btemp+10,w,c
  8619  000330  6E51               	movwf	btemp+1,c
  8620  000332  0E00               	movlw	0
  8621  000334  205B               	addwfc	btemp+11,w,c
  8622  000336  6E52               	movwf	btemp+2,c
  8623  000338  C051  FFE6         	movff	btemp+1,postinc1
  8624  00033C  C052  FFE6         	movff	btemp+2,postinc1
  8625                           
  8626                           ;stkvar	_rn @ sp[(-11)+-2]
  8627  000340  0EF3               	movlw	-13
  8628  000342  CFE3 F051          	movff	plusw1,btemp+1
  8629  000346  0EF4               	movlw	-12
  8630  000348  CFE3 F052          	movff	plusw1,btemp+2
  8631  00034C  0EE2               	movlw	226
  8632  00034E  2451               	addwf	btemp+1,w,c
  8633  000350  6ED9               	movwf	fsr2l,c
  8634  000352  0E00               	movlw	0
  8635  000354  2052               	addwfc	btemp+2,w,c
  8636  000356  6EDA               	movwf	fsr2h,c
  8637  000358  CFDE F051          	movff	postinc2,btemp+1
  8638  00035C  CFDD F052          	movff	postdec2,btemp+2
  8639  000360  C051  FFE6         	movff	btemp+1,postinc1
  8640  000364  C052  FFE6         	movff	btemp+2,postinc1
  8641  000368  ECB5  F01F         	call	_memcpy	;wreg free
  8642                           
  8643                           ;RF24Network_c.c: 559: rn->frag_queue.message_size = message_size;
  8644                           ;stkvar	_message_size @ sp[(-7)+3]
  8645  00036C  50E1               	movf	fsr1l,w,c
  8646  00036E  0FFC               	addlw	-4
  8647  000370  6ED9               	movwf	fsr2l,c
  8648  000372  50E2               	movf	fsr1h,w,c
  8649  000374  6EDA               	movwf	fsr2h,c
  8650  000376  0EFF               	movlw	255
  8651  000378  22DA               	addwfc	fsr2h,f,c
  8652                           
  8653                           ;stkvar	_rn @ sp[(-7)+-2]
  8654  00037A  0EF7               	movlw	-9
  8655  00037C  CFE3 F051          	movff	plusw1,btemp+1
  8656  000380  0EF8               	movlw	-8
  8657  000382  CFE3 F052          	movff	plusw1,btemp+2
  8658  000386  0EE0               	movlw	224
  8659  000388  2451               	addwf	btemp+1,w,c
  8660  00038A  6EE9               	movwf	fsr0l,c
  8661  00038C  0E00               	movlw	0
  8662  00038E  2052               	addwfc	btemp+2,w,c
  8663  000390  6EEA               	movwf	fsr0h,c
  8664  000392  CFDE FFEE          	movff	postinc2,postinc0
  8665  000396  CFDD FFED          	movff	postdec2,postdec0
  8666  00039A  D111               	goto	l2616
  8667  00039C                     l2584:
  8668                           
  8669                           ;RF24Network_c.c: 567: if(header->type == 150 || header->type == 149 || header->type == 
      +                          200){
  8670                           ;stkvar	_header @ sp[(-7)+-4]
  8671  00039C  0EF5               	movlw	-11
  8672  00039E  CFE3 F051          	movff	plusw1,btemp+1
  8673  0003A2  0EF6               	movlw	-10
  8674  0003A4  CFE3 F052          	movff	plusw1,btemp+2
  8675  0003A8  0E06               	movlw	6
  8676  0003AA  2451               	addwf	btemp+1,w,c
  8677  0003AC  6ED9               	movwf	fsr2l,c
  8678  0003AE  0E00               	movlw	0
  8679  0003B0  2052               	addwfc	btemp+2,w,c
  8680  0003B2  6EDA               	movwf	fsr2h,c
  8681  0003B4  0E96               	movlw	150
  8682  0003B6  18DE               	xorwf	postinc2,w,c
  8683  0003B8  B4D8               	btfsc	status,2,c
  8684  0003BA  D020               	goto	l2590
  8685                           
  8686                           ;stkvar	_header @ sp[(-7)+-4]
  8687  0003BC  0EF5               	movlw	-11
  8688  0003BE  CFE3 F051          	movff	plusw1,btemp+1
  8689  0003C2  0EF6               	movlw	-10
  8690  0003C4  CFE3 F052          	movff	plusw1,btemp+2
  8691  0003C8  0E06               	movlw	6
  8692  0003CA  2451               	addwf	btemp+1,w,c
  8693  0003CC  6ED9               	movwf	fsr2l,c
  8694  0003CE  0E00               	movlw	0
  8695  0003D0  2052               	addwfc	btemp+2,w,c
  8696  0003D2  6EDA               	movwf	fsr2h,c
  8697  0003D4  0E95               	movlw	149
  8698  0003D6  18DE               	xorwf	postinc2,w,c
  8699  0003D8  B4D8               	btfsc	status,2,c
  8700  0003DA  D010               	goto	l2590
  8701                           
  8702                           ;stkvar	_header @ sp[(-7)+-4]
  8703  0003DC  0EF5               	movlw	-11
  8704  0003DE  CFE3 F051          	movff	plusw1,btemp+1
  8705  0003E2  0EF6               	movlw	-10
  8706  0003E4  CFE3 F052          	movff	plusw1,btemp+2
  8707  0003E8  0E06               	movlw	6
  8708  0003EA  2451               	addwf	btemp+1,w,c
  8709  0003EC  6ED9               	movwf	fsr2l,c
  8710  0003EE  0E00               	movlw	0
  8711  0003F0  2052               	addwfc	btemp+2,w,c
  8712  0003F2  6EDA               	movwf	fsr2h,c
  8713  0003F4  0EC8               	movlw	200
  8714  0003F6  18DE               	xorwf	postinc2,w,c
  8715  0003F8  A4D8               	btfss	status,2,c
  8716  0003FA  D2AA               	goto	l2670
  8717  0003FC                     l2590:
  8718                           
  8719                           ;RF24Network_c.c: 569: if(rn->frag_queue.message_size + message_size > 144 + 10-10){
  8720                           ;stkvar	_message_size @ sp[(-7)+3]
  8721  0003FC  0EFC               	movlw	-4
  8722  0003FE  CFE3 F051          	movff	plusw1,btemp+1
  8723  000402  0EFD               	movlw	-3
  8724  000404  CFE3 F052          	movff	plusw1,btemp+2
  8725                           
  8726                           ;stkvar	_rn @ sp[(-7)+-2]
  8727  000408  0EF7               	movlw	-9
  8728  00040A  CFE3 F05A          	movff	plusw1,btemp+10
  8729  00040E  0EF8               	movlw	-8
  8730  000410  CFE3 F05B          	movff	plusw1,btemp+11
  8731  000414  0EE0               	movlw	224
  8732  000416  245A               	addwf	btemp+10,w,c
  8733  000418  6ED9               	movwf	fsr2l,c
  8734  00041A  0E00               	movlw	0
  8735  00041C  205B               	addwfc	btemp+11,w,c
  8736  00041E  6EDA               	movwf	fsr2h,c
  8737  000420  CFDE F05A          	movff	postinc2,btemp+10
  8738  000424  CFDD F05B          	movff	postdec2,btemp+11
  8739  000428  5051               	movf	btemp+1,w,c
  8740  00042A  265A               	addwf	btemp+10,f,c
  8741  00042C  5052               	movf	btemp+2,w,c
  8742  00042E  225B               	addwfc	btemp+11,f,c
  8743  000430  505B               	movf	btemp+11,w,c
  8744  000432  E103               	bnz	u1220
  8745  000434  0E91               	movlw	145
  8746  000436  5C5A               	subwf	btemp+10,w,c
  8747  000438  B0D8               	btfsc	status,0,c
  8748  00043A                     u1220:
  8749  00043A  D6A6               	goto	l2548
  8750                           
  8751                           ;RF24Network_c.c: 576: }
  8752                           ;RF24Network_c.c: 577: if( rn->frag_queue.header.reserved == 0 || (header->type != 150 &
      +                          & header->reserved != rn->frag_queue.header.reserved ) || rn->frag_queue.header.id != he
      +                          ader->id ){
  8753                           ;stkvar	_rn @ sp[(-7)+-2]
  8754                           
  8755                           ;RF24Network_c.c: 574: rn->frag_queue.header.reserved=0;
  8756                           ;stkvar	_rn @ sp[(-7)+-2]
  8757  00043C  0EF7               	movlw	-9
  8758  00043E  CFE3 F051          	movff	plusw1,btemp+1
  8759  000442  0EF8               	movlw	-8
  8760  000444  CFE3 F052          	movff	plusw1,btemp+2
  8761  000448  0EDF               	movlw	223
  8762  00044A  2451               	addwf	btemp+1,w,c
  8763  00044C  6ED9               	movwf	fsr2l,c
  8764  00044E  0E00               	movlw	0
  8765  000450  2052               	addwfc	btemp+2,w,c
  8766  000452  6EDA               	movwf	fsr2h,c
  8767  000454  50DF               	movf	indf2,w,c
  8768  000456  B4D8               	btfsc	status,2,c
  8769  000458  D6A5               	goto	l2550
  8770                           
  8771                           ;stkvar	_header @ sp[(-7)+-4]
  8772  00045A  0EF5               	movlw	-11
  8773  00045C  CFE3 F051          	movff	plusw1,btemp+1
  8774  000460  0EF6               	movlw	-10
  8775  000462  CFE3 F052          	movff	plusw1,btemp+2
  8776  000466  0E06               	movlw	6
  8777  000468  2451               	addwf	btemp+1,w,c
  8778  00046A  6ED9               	movwf	fsr2l,c
  8779  00046C  0E00               	movlw	0
  8780  00046E  2052               	addwfc	btemp+2,w,c
  8781  000470  6EDA               	movwf	fsr2h,c
  8782  000472  0E96               	movlw	150
  8783  000474  18DE               	xorwf	postinc2,w,c
  8784  000476  B4D8               	btfsc	status,2,c
  8785  000478  D01C               	goto	l2604
  8786                           
  8787                           ;stkvar	_rn @ sp[(-7)+-2]
  8788  00047A  0EF7               	movlw	-9
  8789  00047C  CFE3 F051          	movff	plusw1,btemp+1
  8790  000480  0EF8               	movlw	-8
  8791  000482  CFE3 F052          	movff	plusw1,btemp+2
  8792  000486  0EDF               	movlw	223
  8793  000488  2451               	addwf	btemp+1,w,c
  8794  00048A  6ED9               	movwf	fsr2l,c
  8795  00048C  0E00               	movlw	0
  8796  00048E  2052               	addwfc	btemp+2,w,c
  8797  000490  6EDA               	movwf	fsr2h,c
  8798                           
  8799                           ;stkvar	_header @ sp[(-7)+-4]
  8800  000492  0EF5               	movlw	-11
  8801  000494  CFE3 F051          	movff	plusw1,btemp+1
  8802  000498  0EF6               	movlw	-10
  8803  00049A  CFE3 F052          	movff	plusw1,btemp+2
  8804  00049E  0E07               	movlw	7
  8805  0004A0  2451               	addwf	btemp+1,w,c
  8806  0004A2  6EE9               	movwf	fsr0l,c
  8807  0004A4  0E00               	movlw	0
  8808  0004A6  2052               	addwfc	btemp+2,w,c
  8809  0004A8  6EEA               	movwf	fsr0h,c
  8810  0004AA  50DE               	movf	postinc2,w,c
  8811  0004AC  18EE               	xorwf	postinc0,w,c
  8812  0004AE  A4D8               	btfss	status,2,c
  8813  0004B0  D679               	goto	l2550
  8814  0004B2                     l2604:
  8815                           
  8816                           ;stkvar	_header @ sp[(-7)+-4]
  8817  0004B2  0EF5               	movlw	-11
  8818  0004B4  CFE3 F051          	movff	plusw1,btemp+1
  8819  0004B8  0EF6               	movlw	-10
  8820  0004BA  CFE3 F052          	movff	plusw1,btemp+2
  8821  0004BE  0E04               	movlw	4
  8822  0004C0  2451               	addwf	btemp+1,w,c
  8823  0004C2  6ED9               	movwf	fsr2l,c
  8824  0004C4  0E00               	movlw	0
  8825  0004C6  2052               	addwfc	btemp+2,w,c
  8826  0004C8  6EDA               	movwf	fsr2h,c
  8827                           
  8828                           ;stkvar	_rn @ sp[(-7)+-2]
  8829  0004CA  0EF7               	movlw	-9
  8830  0004CC  CFE3 F051          	movff	plusw1,btemp+1
  8831  0004D0  0EF8               	movlw	-8
  8832  0004D2  CFE3 F052          	movff	plusw1,btemp+2
  8833  0004D6  0EDC               	movlw	220
  8834  0004D8  2451               	addwf	btemp+1,w,c
  8835  0004DA  6EE9               	movwf	fsr0l,c
  8836  0004DC  0E00               	movlw	0
  8837  0004DE  2052               	addwfc	btemp+2,w,c
  8838  0004E0  6EEA               	movwf	fsr0h,c
  8839  0004E2  50DE               	movf	postinc2,w,c
  8840  0004E4  18EE               	xorwf	postinc0,w,c
  8841  0004E6  E105               	bnz	u1260
  8842  0004E8  50DE               	movf	postinc2,w,c
  8843  0004EA  18EE               	xorwf	postinc0,w,c
  8844  0004EC  A4D8               	btfss	status,2,c
  8845  0004EE  D65A               	goto	l2550
  8846  0004F0  D001               	goto	l2610
  8847  0004F2                     u1260:
  8848  0004F2  D658               	goto	l2550
  8849  0004F4                     l2610:
  8850                           
  8851                           ;RF24Network_c.c: 584: }
  8852                           ;RF24Network_c.c: 586: memcpy(rn->frag_queue.message_buffer+rn->frag_queue.message_size,
      +                          rn->frame_buffer+sizeof(RF24NetworkHeader),message_size);
  8853                           ;stkvar	_message_size @ sp[(-7)+3]
  8854  0004F4  0EFC               	movlw	-4
  8855  0004F6  CFE3 FFE6          	movff	plusw1,postinc1
  8856  0004FA  CFE3 FFE6          	movff	plusw1,postinc1
  8857                           
  8858                           ;stkvar	_rn @ sp[(-9)+-2]
  8859  0004FE  0EF5               	movlw	-11
  8860  000500  CFE3 F05A          	movff	plusw1,btemp+10
  8861  000504  0EF6               	movlw	-10
  8862  000506  CFE3 F05B          	movff	plusw1,btemp+11
  8863  00050A  0E0F               	movlw	15
  8864  00050C  245A               	addwf	btemp+10,w,c
  8865  00050E  6E51               	movwf	btemp+1,c
  8866  000510  0E00               	movlw	0
  8867  000512  205B               	addwfc	btemp+11,w,c
  8868  000514  6E52               	movwf	btemp+2,c
  8869  000516  C051  FFE6         	movff	btemp+1,postinc1
  8870  00051A  C052  FFE6         	movff	btemp+2,postinc1
  8871                           
  8872                           ;stkvar	_rn @ sp[(-11)+-2]
  8873  00051E  0EF3               	movlw	-13
  8874  000520  CFE3 F051          	movff	plusw1,btemp+1
  8875  000524  0EF4               	movlw	-12
  8876  000526  CFE3 F052          	movff	plusw1,btemp+2
  8877  00052A  0EE0               	movlw	224
  8878  00052C  2451               	addwf	btemp+1,w,c
  8879  00052E  6ED9               	movwf	fsr2l,c
  8880  000530  0E00               	movlw	0
  8881  000532  2052               	addwfc	btemp+2,w,c
  8882  000534  6EDA               	movwf	fsr2h,c
  8883  000536  CFDE F051          	movff	postinc2,btemp+1
  8884  00053A  CFDD F052          	movff	postdec2,btemp+2
  8885                           
  8886                           ;stkvar	_rn @ sp[(-11)+-2]
  8887  00053E  0EF3               	movlw	-13
  8888  000540  CFE3 F05A          	movff	plusw1,btemp+10
  8889  000544  0EF4               	movlw	-12
  8890  000546  CFE3 F05B          	movff	plusw1,btemp+11
  8891  00054A  0EE2               	movlw	226
  8892  00054C  245A               	addwf	btemp+10,w,c
  8893  00054E  6ED9               	movwf	fsr2l,c
  8894  000550  0E00               	movlw	0
  8895  000552  205B               	addwfc	btemp+11,w,c
  8896  000554  6EDA               	movwf	fsr2h,c
  8897  000556  CFDE F05A          	movff	postinc2,btemp+10
  8898  00055A  CFDD F05B          	movff	postdec2,btemp+11
  8899  00055E  5051               	movf	btemp+1,w,c
  8900  000560  265A               	addwf	btemp+10,f,c
  8901  000562  5052               	movf	btemp+2,w,c
  8902  000564  225B               	addwfc	btemp+11,f,c
  8903  000566  C05A  FFE6         	movff	btemp+10,postinc1
  8904  00056A  C05B  FFE6         	movff	btemp+11,postinc1
  8905  00056E  ECB5  F01F         	call	_memcpy	;wreg free
  8906                           
  8907                           ;RF24Network_c.c: 587: rn->frag_queue.message_size += message_size;
  8908                           ;stkvar	_message_size @ sp[(-7)+3]
  8909  000572  0EFC               	movlw	-4
  8910  000574  CFE3 F051          	movff	plusw1,btemp+1
  8911  000578  0EFD               	movlw	-3
  8912  00057A  CFE3 F052          	movff	plusw1,btemp+2
  8913                           
  8914                           ;stkvar	_rn @ sp[(-7)+-2]
  8915  00057E  0EF7               	movlw	-9
  8916  000580  CFE3 F05A          	movff	plusw1,btemp+10
  8917  000584  0EF8               	movlw	-8
  8918  000586  CFE3 F05B          	movff	plusw1,btemp+11
  8919  00058A  0EE0               	movlw	224
  8920  00058C  245A               	addwf	btemp+10,w,c
  8921  00058E  6ED9               	movwf	fsr2l,c
  8922  000590  0E00               	movlw	0
  8923  000592  205B               	addwfc	btemp+11,w,c
  8924  000594  6EDA               	movwf	fsr2h,c
  8925  000596  5051               	movf	btemp+1,w,c
  8926  000598  26DE               	addwf	postinc2,f,c
  8927  00059A  5052               	movf	btemp+2,w,c
  8928  00059C  22DD               	addwfc	postdec2,f,c
  8929                           
  8930                           ;RF24Network_c.c: 589: if(header->type != 150){
  8931                           ;stkvar	_header @ sp[(-7)+-4]
  8932  00059E  0EF5               	movlw	-11
  8933  0005A0  CFE3 F051          	movff	plusw1,btemp+1
  8934  0005A4  0EF6               	movlw	-10
  8935  0005A6  CFE3 F052          	movff	plusw1,btemp+2
  8936  0005AA  0E06               	movlw	6
  8937  0005AC  2451               	addwf	btemp+1,w,c
  8938  0005AE  6ED9               	movwf	fsr2l,c
  8939  0005B0  0E00               	movlw	0
  8940  0005B2  2052               	addwfc	btemp+2,w,c
  8941  0005B4  6EDA               	movwf	fsr2h,c
  8942  0005B6  0E96               	movlw	150
  8943  0005B8  18DE               	xorwf	postinc2,w,c
  8944  0005BA  B4D8               	btfsc	status,2,c
  8945  0005BC  D00E               	goto	l2622
  8946  0005BE                     l2616:
  8947                           
  8948                           ;RF24Network_c.c: 590: --rn->frag_queue.header.reserved;
  8949                           ;stkvar	_rn @ sp[(-7)+-2]
  8950  0005BE  0EF7               	movlw	-9
  8951  0005C0  CFE3 F051          	movff	plusw1,btemp+1
  8952  0005C4  0EF8               	movlw	-8
  8953  0005C6  CFE3 F052          	movff	plusw1,btemp+2
  8954  0005CA  0EDF               	movlw	223
  8955  0005CC  2451               	addwf	btemp+1,w,c
  8956  0005CE  6ED9               	movwf	fsr2l,c
  8957  0005D0  0E00               	movlw	0
  8958  0005D2  2052               	addwfc	btemp+2,w,c
  8959  0005D4  6EDA               	movwf	fsr2h,c
  8960  0005D6  06DF               	decf	indf2,f,c
  8961  0005D8  D61F               	goto	l2560
  8962  0005DA                     l2622:
  8963                           
  8964                           ;RF24Network_c.c: 592: }
  8965                           ;RF24Network_c.c: 593: rn->frag_queue.header.reserved = 0;
  8966                           ;stkvar	_rn @ sp[(-7)+-2]
  8967  0005DA  0EF7               	movlw	-9
  8968  0005DC  CFE3 F051          	movff	plusw1,btemp+1
  8969  0005E0  0EF8               	movlw	-8
  8970  0005E2  CFE3 F052          	movff	plusw1,btemp+2
  8971  0005E6  0EDF               	movlw	223
  8972  0005E8  2451               	addwf	btemp+1,w,c
  8973  0005EA  6ED9               	movwf	fsr2l,c
  8974  0005EC  0E00               	movlw	0
  8975  0005EE  2052               	addwfc	btemp+2,w,c
  8976  0005F0  6EDA               	movwf	fsr2h,c
  8977  0005F2  0E00               	movlw	0
  8978  0005F4  6EDF               	movwf	indf2,c
  8979                           
  8980                           ;RF24Network_c.c: 594: rn->frag_queue.header.type = header->reserved;
  8981                           ;stkvar	_header @ sp[(-7)+-4]
  8982  0005F6  0EF5               	movlw	-11
  8983  0005F8  CFE3 F051          	movff	plusw1,btemp+1
  8984  0005FC  0EF6               	movlw	-10
  8985  0005FE  CFE3 F052          	movff	plusw1,btemp+2
  8986  000602  0E07               	movlw	7
  8987  000604  2451               	addwf	btemp+1,w,c
  8988  000606  6ED9               	movwf	fsr2l,c
  8989  000608  0E00               	movlw	0
  8990  00060A  2052               	addwfc	btemp+2,w,c
  8991  00060C  6EDA               	movwf	fsr2h,c
  8992                           
  8993                           ;stkvar	_rn @ sp[(-7)+-2]
  8994  00060E  0EF7               	movlw	-9
  8995  000610  CFE3 F051          	movff	plusw1,btemp+1
  8996  000614  0EF8               	movlw	-8
  8997  000616  CFE3 F052          	movff	plusw1,btemp+2
  8998  00061A  0EDE               	movlw	222
  8999  00061C  2451               	addwf	btemp+1,w,c
  9000  00061E  6EE9               	movwf	fsr0l,c
  9001  000620  0E00               	movlw	0
  9002  000622  2052               	addwfc	btemp+2,w,c
  9003  000624  6EEA               	movwf	fsr0h,c
  9004  000626  CFDF FFEF          	movff	indf2,indf0
  9005                           
  9006                           ;RF24Network_c.c: 596: ;
  9007                           ;RF24Network_c.c: 597: ;
  9008                           ;RF24Network_c.c: 600: if(rn->frag_queue.header.type == 131){
  9009                           ;stkvar	_rn @ sp[(-7)+-2]
  9010  00062A  0EF7               	movlw	-9
  9011  00062C  CFE3 F051          	movff	plusw1,btemp+1
  9012  000630  0EF8               	movlw	-8
  9013  000632  CFE3 F052          	movff	plusw1,btemp+2
  9014  000636  0EDE               	movlw	222
  9015  000638  2451               	addwf	btemp+1,w,c
  9016  00063A  6ED9               	movwf	fsr2l,c
  9017  00063C  0E00               	movlw	0
  9018  00063E  2052               	addwfc	btemp+2,w,c
  9019  000640  6EDA               	movwf	fsr2h,c
  9020  000642  0E83               	movlw	131
  9021  000644  18DE               	xorwf	postinc2,w,c
  9022  000646  A4D8               	btfss	status,2,c
  9023  000648  D003               	goto	l2632
  9024  00064A                     l2628:
  9025                           
  9026                           ;RF24Network_c.c: 601: return 2;
  9027  00064A  0E02               	movlw	2
  9028  00064C                     L11:
  9029  00064C  6E50               	movwf	btemp,c
  9030  00064E  D277               	goto	l250
  9031  000650                     l2632:
  9032                           
  9033                           ;RF24Network_c.c: 602: }
  9034                           ;RF24Network_c.c: 607: if(144 + 10-10 - (rn->next_frame-rn->frame_queue) >= rn->frag_que
      +                          ue.message_size){
  9035                           ;stkvar	_rn @ sp[(-7)+-2]
  9036  000650  0EF7               	movlw	-9
  9037  000652  CFE3 F051          	movff	plusw1,btemp+1
  9038  000656  0EF8               	movlw	-8
  9039  000658  CFE3 F052          	movff	plusw1,btemp+2
  9040  00065C  0EE0               	movlw	224
  9041  00065E  2451               	addwf	btemp+1,w,c
  9042  000660  6ED9               	movwf	fsr2l,c
  9043  000662  0E00               	movlw	0
  9044  000664  2052               	addwfc	btemp+2,w,c
  9045  000666  6EDA               	movwf	fsr2h,c
  9046                           
  9047                           ;stkvar	_rn @ sp[(-7)+-2]
  9048  000668  0EF7               	movlw	-9
  9049  00066A  CFE3 F051          	movff	plusw1,btemp+1
  9050  00066E  0EF8               	movlw	-8
  9051  000670  CFE3 F052          	movff	plusw1,btemp+2
  9052  000674  0ED6               	movlw	214
  9053  000676  2451               	addwf	btemp+1,w,c
  9054  000678  6EE9               	movwf	fsr0l,c
  9055  00067A  0E00               	movlw	0
  9056  00067C  2052               	addwfc	btemp+2,w,c
  9057  00067E  6EEA               	movwf	fsr0h,c
  9058  000680  CFEE F051          	movff	postinc0,btemp+1
  9059  000684  CFED F052          	movff	postdec0,btemp+2
  9060                           
  9061                           ;stkvar	_rn @ sp[(-7)+-2]
  9062  000688  0EF7               	movlw	-9
  9063  00068A  CFE3 F05A          	movff	plusw1,btemp+10
  9064  00068E  0EF8               	movlw	-8
  9065  000690  CFE3 F05B          	movff	plusw1,btemp+11
  9066  000694  5051               	movf	btemp+1,w,c
  9067  000696  5E5A               	subwf	btemp+10,f,c
  9068  000698  5052               	movf	btemp+2,w,c
  9069  00069A  5A5B               	subwfb	btemp+11,f,c
  9070  00069C  0ECC               	movlw	204
  9071  00069E  265A               	addwf	btemp+10,f,c
  9072  0006A0  0E00               	movlw	0
  9073  0006A2  225B               	addwfc	btemp+11,f,c
  9074  0006A4  50DE               	movf	postinc2,w,c
  9075  0006A6  5C5A               	subwf	btemp+10,w,c
  9076  0006A8  505B               	movf	btemp+11,w,c
  9077  0006AA  0A80               	xorlw	128
  9078  0006AC  6E50               	movwf	btemp,c
  9079  0006AE  50DE               	movf	postinc2,w,c
  9080  0006B0  0A80               	xorlw	128
  9081  0006B2  5850               	subwfb	btemp,w,c
  9082  0006B4  A0D8               	btfss	status,0,c
  9083  0006B6  D0C3               	goto	l2650
  9084                           
  9085                           ;RF24Network_c.c: 608: uint8_t padding;
  9086                           ;RF24Network_c.c: 609: memcpy(rn->next_frame,&rn->frag_queue,10);
  9087  0006B8  0E0A               	movlw	10
  9088  0006BA  6EE6               	movwf	postinc1,c
  9089  0006BC  0E00               	movlw	0
  9090  0006BE  6EE6               	movwf	postinc1,c
  9091                           
  9092                           ;stkvar	_rn @ sp[(-9)+-2]
  9093  0006C0  0EF5               	movlw	-11
  9094  0006C2  CFE3 F05A          	movff	plusw1,btemp+10
  9095  0006C6  0EF6               	movlw	-10
  9096  0006C8  CFE3 F05B          	movff	plusw1,btemp+11
  9097  0006CC  0ED8               	movlw	216
  9098  0006CE  245A               	addwf	btemp+10,w,c
  9099  0006D0  6E51               	movwf	btemp+1,c
  9100  0006D2  0E00               	movlw	0
  9101  0006D4  205B               	addwfc	btemp+11,w,c
  9102  0006D6  6E52               	movwf	btemp+2,c
  9103  0006D8  C051  FFE6         	movff	btemp+1,postinc1
  9104  0006DC  C052  FFE6         	movff	btemp+2,postinc1
  9105                           
  9106                           ;stkvar	_rn @ sp[(-11)+-2]
  9107  0006E0  0EF3               	movlw	-13
  9108  0006E2  CFE3 F051          	movff	plusw1,btemp+1
  9109  0006E6  0EF4               	movlw	-12
  9110  0006E8  CFE3 F052          	movff	plusw1,btemp+2
  9111  0006EC  0ED6               	movlw	214
  9112  0006EE  2451               	addwf	btemp+1,w,c
  9113  0006F0  6ED9               	movwf	fsr2l,c
  9114  0006F2  0E00               	movlw	0
  9115  0006F4  2052               	addwfc	btemp+2,w,c
  9116  0006F6  6EDA               	movwf	fsr2h,c
  9117  0006F8  CFDE F051          	movff	postinc2,btemp+1
  9118  0006FC  CFDD F052          	movff	postdec2,btemp+2
  9119  000700  C051  FFE6         	movff	btemp+1,postinc1
  9120  000704  C052  FFE6         	movff	btemp+2,postinc1
  9121  000708  ECB5  F01F         	call	_memcpy	;wreg free
  9122                           
  9123                           ;RF24Network_c.c: 610: memcpy(rn->next_frame+10,rn->frag_queue.message_buffer,rn->frag_q
      +                          ueue.message_size);
  9124                           ;stkvar	_rn @ sp[(-7)+-2]
  9125  00070C  0EF7               	movlw	-9
  9126  00070E  CFE3 F051          	movff	plusw1,btemp+1
  9127  000712  0EF8               	movlw	-8
  9128  000714  CFE3 F052          	movff	plusw1,btemp+2
  9129  000718  0EE0               	movlw	224
  9130  00071A  2451               	addwf	btemp+1,w,c
  9131  00071C  6ED9               	movwf	fsr2l,c
  9132  00071E  0E00               	movlw	0
  9133  000720  2052               	addwfc	btemp+2,w,c
  9134  000722  6EDA               	movwf	fsr2h,c
  9135  000724  CFDE F051          	movff	postinc2,btemp+1
  9136  000728  CFDD F052          	movff	postdec2,btemp+2
  9137  00072C  C051  FFE6         	movff	btemp+1,postinc1
  9138  000730  C052  FFE6         	movff	btemp+2,postinc1
  9139                           
  9140                           ;stkvar	_rn @ sp[(-9)+-2]
  9141  000734  0EF5               	movlw	-11
  9142  000736  CFE3 F051          	movff	plusw1,btemp+1
  9143  00073A  0EF6               	movlw	-10
  9144  00073C  CFE3 F052          	movff	plusw1,btemp+2
  9145  000740  0EE2               	movlw	226
  9146  000742  2451               	addwf	btemp+1,w,c
  9147  000744  6ED9               	movwf	fsr2l,c
  9148  000746  0E00               	movlw	0
  9149  000748  2052               	addwfc	btemp+2,w,c
  9150  00074A  6EDA               	movwf	fsr2h,c
  9151  00074C  CFDE F051          	movff	postinc2,btemp+1
  9152  000750  CFDD F052          	movff	postdec2,btemp+2
  9153  000754  C051  FFE6         	movff	btemp+1,postinc1
  9154  000758  C052  FFE6         	movff	btemp+2,postinc1
  9155                           
  9156                           ;stkvar	_rn @ sp[(-11)+-2]
  9157  00075C  0EF3               	movlw	-13
  9158  00075E  CFE3 F051          	movff	plusw1,btemp+1
  9159  000762  0EF4               	movlw	-12
  9160  000764  CFE3 F052          	movff	plusw1,btemp+2
  9161  000768  0ED6               	movlw	214
  9162  00076A  2451               	addwf	btemp+1,w,c
  9163  00076C  6ED9               	movwf	fsr2l,c
  9164  00076E  0E00               	movlw	0
  9165  000770  2052               	addwfc	btemp+2,w,c
  9166  000772  6EDA               	movwf	fsr2h,c
  9167  000774  CFDE F051          	movff	postinc2,btemp+1
  9168  000778  CFDD F052          	movff	postdec2,btemp+2
  9169  00077C  0E0A               	movlw	10
  9170  00077E  2651               	addwf	btemp+1,f,c
  9171  000780  0E00               	movlw	0
  9172  000782  2252               	addwfc	btemp+2,f,c
  9173  000784  C051  FFE6         	movff	btemp+1,postinc1
  9174  000788  C052  FFE6         	movff	btemp+2,postinc1
  9175  00078C  ECB5  F01F         	call	_memcpy	;wreg free
  9176                           
  9177                           ;RF24Network_c.c: 611: rn->next_frame += (10+rn->frag_queue.message_size);
  9178                           ;stkvar	_rn @ sp[(-7)+-2]
  9179  000790  0EF7               	movlw	-9
  9180  000792  CFE3 F051          	movff	plusw1,btemp+1
  9181  000796  0EF8               	movlw	-8
  9182  000798  CFE3 F052          	movff	plusw1,btemp+2
  9183  00079C  0EE0               	movlw	224
  9184  00079E  2451               	addwf	btemp+1,w,c
  9185  0007A0  6ED9               	movwf	fsr2l,c
  9186  0007A2  0E00               	movlw	0
  9187  0007A4  2052               	addwfc	btemp+2,w,c
  9188  0007A6  6EDA               	movwf	fsr2h,c
  9189  0007A8  CFDE F051          	movff	postinc2,btemp+1
  9190  0007AC  CFDD F052          	movff	postdec2,btemp+2
  9191  0007B0  0E0A               	movlw	10
  9192  0007B2  2651               	addwf	btemp+1,f,c
  9193  0007B4  0E00               	movlw	0
  9194  0007B6  2252               	addwfc	btemp+2,f,c
  9195                           
  9196                           ;stkvar	_rn @ sp[(-7)+-2]
  9197  0007B8  0EF7               	movlw	-9
  9198  0007BA  CFE3 F05A          	movff	plusw1,btemp+10
  9199  0007BE  0EF8               	movlw	-8
  9200  0007C0  CFE3 F05B          	movff	plusw1,btemp+11
  9201  0007C4  0ED6               	movlw	214
  9202  0007C6  245A               	addwf	btemp+10,w,c
  9203  0007C8  6ED9               	movwf	fsr2l,c
  9204  0007CA  0E00               	movlw	0
  9205  0007CC  205B               	addwfc	btemp+11,w,c
  9206  0007CE  6EDA               	movwf	fsr2h,c
  9207  0007D0  5051               	movf	btemp+1,w,c
  9208  0007D2  26DE               	addwf	postinc2,f,c
  9209  0007D4  5052               	movf	btemp+2,w,c
  9210  0007D6  22DD               	addwfc	postdec2,f,c
  9211                           
  9212                           ;RF24Network_c.c: 613: if((padding = (rn->frag_queue.message_size+10)%4)){
  9213                           ;stkvar	_rn @ sp[(-7)+-2]
  9214  0007D8  0EF7               	movlw	-9
  9215  0007DA  CFE3 F051          	movff	plusw1,btemp+1
  9216  0007DE  0EF8               	movlw	-8
  9217  0007E0  CFE3 F052          	movff	plusw1,btemp+2
  9218  0007E4  0EE0               	movlw	224
  9219  0007E6  2451               	addwf	btemp+1,w,c
  9220  0007E8  6ED9               	movwf	fsr2l,c
  9221  0007EA  0E00               	movlw	0
  9222  0007EC  2052               	addwfc	btemp+2,w,c
  9223  0007EE  6EDA               	movwf	fsr2h,c
  9224  0007F0  50DF               	movf	indf2,w,c
  9225  0007F2  6E5B               	movwf	btemp+11,c
  9226  0007F4  0E0A               	movlw	10
  9227  0007F6  265B               	addwf	btemp+11,f,c
  9228  0007F8  0E03               	movlw	3
  9229  0007FA  165B               	andwf	btemp+11,f,c
  9230                           
  9231                           ;stkvar	_padding @ sp[(-7)+0]
  9232  0007FC  0EF9               	movlw	-7
  9233  0007FE  C05B  FFE3         	movff	btemp+11,plusw1
  9234  000802  0EF9               	movlw	-7
  9235  000804  50E3               	movf	plusw1,w,c
  9236  000806  B4D8               	btfsc	status,2,c
  9237  000808  D507               	goto	l2560
  9238                           
  9239                           ;RF24Network_c.c: 614: rn->next_frame += 4 - padding;
  9240  00080A  0E04               	movlw	4
  9241  00080C  6E51               	movwf	btemp+1,c
  9242  00080E  0E00               	movlw	0
  9243  000810  6E52               	movwf	btemp+2,c
  9244                           
  9245                           ;stkvar	_padding @ sp[(-7)+0]
  9246  000812  0EF9               	movlw	-7
  9247  000814  50E3               	movf	plusw1,w,c
  9248  000816  5E51               	subwf	btemp+1,f,c
  9249  000818  0E00               	movlw	0
  9250  00081A  5A52               	subwfb	btemp+2,f,c
  9251                           
  9252                           ;stkvar	_rn @ sp[(-7)+-2]
  9253  00081C  0EF7               	movlw	-9
  9254  00081E  CFE3 F05A          	movff	plusw1,btemp+10
  9255  000822  0EF8               	movlw	-8
  9256  000824  CFE3 F05B          	movff	plusw1,btemp+11
  9257  000828  0ED6               	movlw	214
  9258  00082A  245A               	addwf	btemp+10,w,c
  9259  00082C  6ED9               	movwf	fsr2l,c
  9260  00082E  0E00               	movlw	0
  9261  000830  205B               	addwfc	btemp+11,w,c
  9262  000832  6EDA               	movwf	fsr2h,c
  9263  000834  5051               	movf	btemp+1,w,c
  9264  000836  26DE               	addwf	postinc2,f,c
  9265  000838  5052               	movf	btemp+2,w,c
  9266  00083A  22DD               	addwfc	postdec2,f,c
  9267  00083C  D4ED               	goto	l2560
  9268  00083E                     l2650:
  9269                           
  9270                           ;RF24Network_c.c: 620: RF24_stopListening(rn->radio);
  9271                           ;stkvar	_rn @ sp[(-7)+-2]
  9272  00083E  0EF7               	movlw	-9
  9273  000840  CFE3 F051          	movff	plusw1,btemp+1
  9274  000844  0EF8               	movlw	-8
  9275  000846  CFE3 F052          	movff	plusw1,btemp+2
  9276  00084A  0E2F               	movlw	47
  9277  00084C  2451               	addwf	btemp+1,w,c
  9278  00084E  6ED9               	movwf	fsr2l,c
  9279  000850  0E00               	movlw	0
  9280  000852  2052               	addwfc	btemp+2,w,c
  9281  000854  6EDA               	movwf	fsr2h,c
  9282  000856  CFDE F051          	movff	postinc2,btemp+1
  9283  00085A  CFDD F052          	movff	postdec2,btemp+2
  9284  00085E  C051  FFE6         	movff	btemp+1,postinc1
  9285  000862  C052  FFE6         	movff	btemp+2,postinc1
  9286  000866  EC50  F01E         	call	_RF24_stopListening	;wreg free
  9287                           
  9288                           ;RF24Network_c.c: 621: rn->networkFlags |= 1;
  9289                           ;stkvar	_rn @ sp[(-7)+-2]
  9290  00086A  0EF7               	movlw	-9
  9291  00086C  CFE3 F051          	movff	plusw1,btemp+1
  9292  000870  0EF8               	movlw	-8
  9293  000872  CFE3 F052          	movff	plusw1,btemp+2
  9294  000876  0E2A               	movlw	42
  9295  000878  2451               	addwf	btemp+1,w,c
  9296  00087A  6ED9               	movwf	fsr2l,c
  9297  00087C  0E00               	movlw	0
  9298  00087E  2052               	addwfc	btemp+2,w,c
  9299  000880  6EDA               	movwf	fsr2h,c
  9300  000882  0E00               	movlw	0
  9301  000884  80DB               	bsf	plusw2,0,c
  9302  000886  D48E               	goto	l2550
  9303  000888                     l2658:
  9304                           
  9305                           ;RF24Network_c.c: 634: if(header->type == 131){
  9306                           ;stkvar	_header @ sp[(-7)+-4]
  9307  000888  0EF5               	movlw	-11
  9308  00088A  CFE3 F051          	movff	plusw1,btemp+1
  9309  00088E  0EF6               	movlw	-10
  9310  000890  CFE3 F052          	movff	plusw1,btemp+2
  9311  000894  0E06               	movlw	6
  9312  000896  2451               	addwf	btemp+1,w,c
  9313  000898  6ED9               	movwf	fsr2l,c
  9314  00089A  0E00               	movlw	0
  9315  00089C  2052               	addwfc	btemp+2,w,c
  9316  00089E  6EDA               	movwf	fsr2h,c
  9317  0008A0  0E83               	movlw	131
  9318  0008A2  18DE               	xorwf	postinc2,w,c
  9319  0008A4  A4D8               	btfss	status,2,c
  9320  0008A6  D054               	goto	l2670
  9321                           
  9322                           ;RF24Network_c.c: 635: memcpy(&rn->frag_queue,rn->frame_buffer,8);
  9323  0008A8  0E08               	movlw	8
  9324  0008AA  6EE6               	movwf	postinc1,c
  9325  0008AC  0E00               	movlw	0
  9326  0008AE  6EE6               	movwf	postinc1,c
  9327                           
  9328                           ;stkvar	_rn @ sp[(-9)+-2]
  9329  0008B0  0EF5               	movlw	-11
  9330  0008B2  CFE3 F05A          	movff	plusw1,btemp+10
  9331  0008B6  0EF6               	movlw	-10
  9332  0008B8  CFE3 F05B          	movff	plusw1,btemp+11
  9333  0008BC  0E07               	movlw	7
  9334  0008BE  245A               	addwf	btemp+10,w,c
  9335  0008C0  6E51               	movwf	btemp+1,c
  9336  0008C2  0E00               	movlw	0
  9337  0008C4  205B               	addwfc	btemp+11,w,c
  9338  0008C6  6E52               	movwf	btemp+2,c
  9339  0008C8  C051  FFE6         	movff	btemp+1,postinc1
  9340  0008CC  C052  FFE6         	movff	btemp+2,postinc1
  9341                           
  9342                           ;stkvar	_rn @ sp[(-11)+-2]
  9343  0008D0  0EF3               	movlw	-13
  9344  0008D2  50E3               	movf	plusw1,w,c
  9345  0008D4  0FD8               	addlw	216
  9346  0008D6  6E51               	movwf	btemp+1,c
  9347  0008D8  0EF4               	movlw	-12
  9348  0008DA  CFE3 F052          	movff	plusw1,btemp+2
  9349  0008DE  0E00               	movlw	0
  9350  0008E0  2252               	addwfc	btemp+2,f,c
  9351  0008E2  C051  FFE6         	movff	btemp+1,postinc1
  9352  0008E6  C052  FFE6         	movff	btemp+2,postinc1
  9353  0008EA  ECB5  F01F         	call	_memcpy	;wreg free
  9354                           
  9355                           ;RF24Network_c.c: 636: rn->frag_queue.message_buffer = rn->frame_buffer+sizeof(RF24Netwo
      +                          rkHeader);
  9356                           ;stkvar	_rn @ sp[(-7)+-2]
  9357  0008EE  0EF7               	movlw	-9
  9358  0008F0  50E3               	movf	plusw1,w,c
  9359  0008F2  0F0F               	addlw	15
  9360  0008F4  6E51               	movwf	btemp+1,c
  9361  0008F6  0EF8               	movlw	-8
  9362  0008F8  CFE3 F052          	movff	plusw1,btemp+2
  9363  0008FC  0E00               	movlw	0
  9364  0008FE  2252               	addwfc	btemp+2,f,c
  9365                           
  9366                           ;stkvar	_rn @ sp[(-7)+-2]
  9367  000900  0EF7               	movlw	-9
  9368  000902  CFE3 F05A          	movff	plusw1,btemp+10
  9369  000906  0EF8               	movlw	-8
  9370  000908  CFE3 F05B          	movff	plusw1,btemp+11
  9371  00090C  0EE2               	movlw	226
  9372  00090E  245A               	addwf	btemp+10,w,c
  9373  000910  6ED9               	movwf	fsr2l,c
  9374  000912  0E00               	movlw	0
  9375  000914  205B               	addwfc	btemp+11,w,c
  9376  000916  6EDA               	movwf	fsr2h,c
  9377  000918  C051  FFDE         	movff	btemp+1,postinc2
  9378  00091C  C052  FFDD         	movff	btemp+2,postdec2
  9379                           
  9380                           ;RF24Network_c.c: 637: rn->frag_queue.message_size = message_size;
  9381                           ;stkvar	_message_size @ sp[(-7)+3]
  9382  000920  50E1               	movf	fsr1l,w,c
  9383  000922  0FFC               	addlw	-4
  9384  000924  6ED9               	movwf	fsr2l,c
  9385  000926  50E2               	movf	fsr1h,w,c
  9386  000928  6EDA               	movwf	fsr2h,c
  9387  00092A  0EFF               	movlw	255
  9388  00092C  22DA               	addwfc	fsr2h,f,c
  9389                           
  9390                           ;stkvar	_rn @ sp[(-7)+-2]
  9391  00092E  0EF7               	movlw	-9
  9392  000930  CFE3 F051          	movff	plusw1,btemp+1
  9393  000934  0EF8               	movlw	-8
  9394  000936  CFE3 F052          	movff	plusw1,btemp+2
  9395  00093A  0EE0               	movlw	224
  9396  00093C  2451               	addwf	btemp+1,w,c
  9397  00093E  6EE9               	movwf	fsr0l,c
  9398  000940  0E00               	movlw	0
  9399  000942  2052               	addwfc	btemp+2,w,c
  9400  000944  6EEA               	movwf	fsr0h,c
  9401  000946  CFDE FFEE          	movff	postinc2,postinc0
  9402  00094A  CFDD FFED          	movff	postdec2,postdec0
  9403  00094E  D67D               	goto	l2628
  9404  000950                     l2670:
  9405                           
  9406                           ;RF24Network_c.c: 639: }
  9407                           ;RF24Network_c.c: 645: if(message_size + (rn->next_frame-rn->frame_queue) <= 144 + 10){
  9408  000950  0EC4               	movlw	196
  9409  000952  6E51               	movwf	btemp+1,c
  9410  000954  0EFF               	movlw	255
  9411  000956  6E52               	movwf	btemp+2,c
  9412                           
  9413                           ;stkvar	_message_size @ sp[(-7)+3]
  9414                           ;stkvar	_rn @ sp[(-7)+-2]
  9415  000958  0EF7               	movlw	-9
  9416  00095A  CFE3 F05A          	movff	plusw1,btemp+10
  9417  00095E  0EF8               	movlw	-8
  9418  000960  CFE3 F05B          	movff	plusw1,btemp+11
  9419                           
  9420                           ;stkvar	_rn @ sp[(-7)+-2]
  9421  000964  0EF7               	movlw	-9
  9422  000966  CFE3 F058          	movff	plusw1,btemp+8
  9423  00096A  0EF8               	movlw	-8
  9424  00096C  CFE3 F059          	movff	plusw1,btemp+9
  9425  000970  0ED6               	movlw	214
  9426  000972  2458               	addwf	btemp+8,w,c
  9427  000974  6ED9               	movwf	fsr2l,c
  9428  000976  0E00               	movlw	0
  9429  000978  2059               	addwfc	btemp+9,w,c
  9430  00097A  6EDA               	movwf	fsr2h,c
  9431  00097C  CFDE F058          	movff	postinc2,btemp+8
  9432  000980  CFDD F059          	movff	postdec2,btemp+9
  9433  000984  505A               	movf	btemp+10,w,c
  9434  000986  5E58               	subwf	btemp+8,f,c
  9435  000988  505B               	movf	btemp+11,w,c
  9436  00098A  5A59               	subwfb	btemp+9,f,c
  9437  00098C  0EFC               	movlw	-4
  9438  00098E  50E3               	movf	plusw1,w,c
  9439  000990  2658               	addwf	btemp+8,f,c
  9440  000992  0EFD               	movlw	-3
  9441  000994  50E3               	movf	plusw1,w,c
  9442  000996  2259               	addwfc	btemp+9,f,c
  9443  000998  5051               	movf	btemp+1,w,c
  9444  00099A  2658               	addwf	btemp+8,f,c
  9445  00099C  5052               	movf	btemp+2,w,c
  9446  00099E  2259               	addwfc	btemp+9,f,c
  9447  0009A0  BE59               	btfsc	btemp+9,7,c
  9448  0009A2  D006               	goto	l2672
  9449  0009A4  5059               	movf	btemp+9,w,c
  9450  0009A6  E103               	bnz	u1321
  9451  0009A8  0E9B               	movlw	155
  9452  0009AA  5C58               	subwf	btemp+8,w,c
  9453  0009AC  B0D8               	btfsc	status,0,c
  9454  0009AE                     u1321:
  9455  0009AE  D0C2               	goto	l2686
  9456  0009B0                     l2672:
  9457                           
  9458                           ;RF24Network_c.c: 646: uint8_t padding;
  9459                           ;RF24Network_c.c: 647: memcpy(rn->next_frame,rn->frame_buffer,8);
  9460  0009B0  0E08               	movlw	8
  9461  0009B2  6EE6               	movwf	postinc1,c
  9462  0009B4  0E00               	movlw	0
  9463  0009B6  6EE6               	movwf	postinc1,c
  9464                           
  9465                           ;stkvar	_rn @ sp[(-9)+-2]
  9466  0009B8  0EF5               	movlw	-11
  9467  0009BA  CFE3 F05A          	movff	plusw1,btemp+10
  9468  0009BE  0EF6               	movlw	-10
  9469  0009C0  CFE3 F05B          	movff	plusw1,btemp+11
  9470  0009C4  0E07               	movlw	7
  9471  0009C6  245A               	addwf	btemp+10,w,c
  9472  0009C8  6E51               	movwf	btemp+1,c
  9473  0009CA  0E00               	movlw	0
  9474  0009CC  205B               	addwfc	btemp+11,w,c
  9475  0009CE  6E52               	movwf	btemp+2,c
  9476  0009D0  C051  FFE6         	movff	btemp+1,postinc1
  9477  0009D4  C052  FFE6         	movff	btemp+2,postinc1
  9478                           
  9479                           ;stkvar	_rn @ sp[(-11)+-2]
  9480  0009D8  0EF3               	movlw	-13
  9481  0009DA  CFE3 F051          	movff	plusw1,btemp+1
  9482  0009DE  0EF4               	movlw	-12
  9483  0009E0  CFE3 F052          	movff	plusw1,btemp+2
  9484  0009E4  0ED6               	movlw	214
  9485  0009E6  2451               	addwf	btemp+1,w,c
  9486  0009E8  6ED9               	movwf	fsr2l,c
  9487  0009EA  0E00               	movlw	0
  9488  0009EC  2052               	addwfc	btemp+2,w,c
  9489  0009EE  6EDA               	movwf	fsr2h,c
  9490  0009F0  CFDE F051          	movff	postinc2,btemp+1
  9491  0009F4  CFDD F052          	movff	postdec2,btemp+2
  9492  0009F8  C051  FFE6         	movff	btemp+1,postinc1
  9493  0009FC  C052  FFE6         	movff	btemp+2,postinc1
  9494  000A00  ECB5  F01F         	call	_memcpy	;wreg free
  9495                           
  9496                           ;RF24Network_c.c: 648: memcpy(rn->next_frame+8,&message_size,2);
  9497  000A04  0E02               	movlw	2
  9498  000A06  6EE6               	movwf	postinc1,c
  9499  000A08  0E00               	movlw	0
  9500  000A0A  6EE6               	movwf	postinc1,c
  9501                           
  9502                           ;stkvar	_message_size @ sp[(-9)+3]
  9503  000A0C  0EFA               	movlw	250
  9504  000A0E  24E1               	addwf	fsr1l,w,c
  9505  000A10  6EE6               	movwf	postinc1,c
  9506  000A12  0EFF               	movlw	255
  9507  000A14  20E2               	addwfc	fsr1h,w,c
  9508  000A16  6EE6               	movwf	postinc1,c
  9509                           
  9510                           ;stkvar	_rn @ sp[(-11)+-2]
  9511  000A18  0EF3               	movlw	-13
  9512  000A1A  CFE3 F051          	movff	plusw1,btemp+1
  9513  000A1E  0EF4               	movlw	-12
  9514  000A20  CFE3 F052          	movff	plusw1,btemp+2
  9515  000A24  0ED6               	movlw	214
  9516  000A26  2451               	addwf	btemp+1,w,c
  9517  000A28  6ED9               	movwf	fsr2l,c
  9518  000A2A  0E00               	movlw	0
  9519  000A2C  2052               	addwfc	btemp+2,w,c
  9520  000A2E  6EDA               	movwf	fsr2h,c
  9521  000A30  CFDE F051          	movff	postinc2,btemp+1
  9522  000A34  CFDD F052          	movff	postdec2,btemp+2
  9523  000A38  0E08               	movlw	8
  9524  000A3A  2651               	addwf	btemp+1,f,c
  9525  000A3C  0E00               	movlw	0
  9526  000A3E  2252               	addwfc	btemp+2,f,c
  9527  000A40  C051  FFE6         	movff	btemp+1,postinc1
  9528  000A44  C052  FFE6         	movff	btemp+2,postinc1
  9529  000A48  ECB5  F01F         	call	_memcpy	;wreg free
  9530                           
  9531                           ;RF24Network_c.c: 649: memcpy(rn->next_frame+10,rn->frame_buffer+8,message_size);
  9532                           ;stkvar	_message_size @ sp[(-7)+3]
  9533  000A4C  0EFC               	movlw	-4
  9534  000A4E  CFE3 FFE6          	movff	plusw1,postinc1
  9535  000A52  CFE3 FFE6          	movff	plusw1,postinc1
  9536                           
  9537                           ;stkvar	_rn @ sp[(-9)+-2]
  9538  000A56  0EF5               	movlw	-11
  9539  000A58  CFE3 F05A          	movff	plusw1,btemp+10
  9540  000A5C  0EF6               	movlw	-10
  9541  000A5E  CFE3 F05B          	movff	plusw1,btemp+11
  9542  000A62  0E0F               	movlw	15
  9543  000A64  245A               	addwf	btemp+10,w,c
  9544  000A66  6E51               	movwf	btemp+1,c
  9545  000A68  0E00               	movlw	0
  9546  000A6A  205B               	addwfc	btemp+11,w,c
  9547  000A6C  6E52               	movwf	btemp+2,c
  9548  000A6E  C051  FFE6         	movff	btemp+1,postinc1
  9549  000A72  C052  FFE6         	movff	btemp+2,postinc1
  9550                           
  9551                           ;stkvar	_rn @ sp[(-11)+-2]
  9552  000A76  0EF3               	movlw	-13
  9553  000A78  CFE3 F051          	movff	plusw1,btemp+1
  9554  000A7C  0EF4               	movlw	-12
  9555  000A7E  CFE3 F052          	movff	plusw1,btemp+2
  9556  000A82  0ED6               	movlw	214
  9557  000A84  2451               	addwf	btemp+1,w,c
  9558  000A86  6ED9               	movwf	fsr2l,c
  9559  000A88  0E00               	movlw	0
  9560  000A8A  2052               	addwfc	btemp+2,w,c
  9561  000A8C  6EDA               	movwf	fsr2h,c
  9562  000A8E  CFDE F051          	movff	postinc2,btemp+1
  9563  000A92  CFDD F052          	movff	postdec2,btemp+2
  9564  000A96  0E0A               	movlw	10
  9565  000A98  2651               	addwf	btemp+1,f,c
  9566  000A9A  0E00               	movlw	0
  9567  000A9C  2252               	addwfc	btemp+2,f,c
  9568  000A9E  C051  FFE6         	movff	btemp+1,postinc1
  9569  000AA2  C052  FFE6         	movff	btemp+2,postinc1
  9570  000AA6  ECB5  F01F         	call	_memcpy	;wreg free
  9571                           
  9572                           ;RF24Network_c.c: 653: rn->next_frame += (message_size + 10);
  9573                           ;stkvar	_message_size @ sp[(-7)+3]
  9574  000AAA  0EFC               	movlw	-4
  9575  000AAC  50E3               	movf	plusw1,w,c
  9576  000AAE  0F0A               	addlw	10
  9577  000AB0  6E51               	movwf	btemp+1,c
  9578  000AB2  0EFD               	movlw	-3
  9579  000AB4  CFE3 F052          	movff	plusw1,btemp+2
  9580  000AB8  0E00               	movlw	0
  9581  000ABA  2252               	addwfc	btemp+2,f,c
  9582                           
  9583                           ;stkvar	_rn @ sp[(-7)+-2]
  9584  000ABC  0EF7               	movlw	-9
  9585  000ABE  CFE3 F05A          	movff	plusw1,btemp+10
  9586  000AC2  0EF8               	movlw	-8
  9587  000AC4  CFE3 F05B          	movff	plusw1,btemp+11
  9588  000AC8  0ED6               	movlw	214
  9589  000ACA  245A               	addwf	btemp+10,w,c
  9590  000ACC  6ED9               	movwf	fsr2l,c
  9591  000ACE  0E00               	movlw	0
  9592  000AD0  205B               	addwfc	btemp+11,w,c
  9593  000AD2  6EDA               	movwf	fsr2h,c
  9594  000AD4  5051               	movf	btemp+1,w,c
  9595  000AD6  26DE               	addwf	postinc2,f,c
  9596  000AD8  5052               	movf	btemp+2,w,c
  9597  000ADA  22DD               	addwfc	postdec2,f,c
  9598                           
  9599                           ;RF24Network_c.c: 655: if((padding = (message_size+10)%4)){
  9600  000ADC  0E0A               	movlw	10
  9601  000ADE  6E5B               	movwf	btemp+11,c
  9602                           
  9603                           ;stkvar	_message_size @ sp[(-7)+3]
  9604  000AE0  0EFC               	movlw	-4
  9605  000AE2  50E3               	movf	plusw1,w,c
  9606  000AE4  245B               	addwf	btemp+11,w,c
  9607  000AE6  6E5A               	movwf	btemp+10,c
  9608  000AE8  0E03               	movlw	3
  9609  000AEA  165A               	andwf	btemp+10,f,c
  9610                           
  9611                           ;stkvar	_padding @ sp[(-7)+1]
  9612  000AEC  0EFA               	movlw	-6
  9613  000AEE  C05A  FFE3         	movff	btemp+10,plusw1
  9614  000AF2  0EFA               	movlw	-6
  9615  000AF4  50E3               	movf	plusw1,w,c
  9616  000AF6  B4D8               	btfsc	status,2,c
  9617  000AF8  D019               	goto	l2684
  9618                           
  9619                           ;RF24Network_c.c: 656: rn->next_frame += 4 - padding;
  9620  000AFA  0E04               	movlw	4
  9621  000AFC  6E51               	movwf	btemp+1,c
  9622  000AFE  0E00               	movlw	0
  9623  000B00  6E52               	movwf	btemp+2,c
  9624                           
  9625                           ;stkvar	_padding @ sp[(-7)+1]
  9626  000B02  0EFA               	movlw	-6
  9627  000B04  50E3               	movf	plusw1,w,c
  9628  000B06  5E51               	subwf	btemp+1,f,c
  9629  000B08  0E00               	movlw	0
  9630  000B0A  5A52               	subwfb	btemp+2,f,c
  9631                           
  9632                           ;stkvar	_rn @ sp[(-7)+-2]
  9633  000B0C  0EF7               	movlw	-9
  9634  000B0E  CFE3 F05A          	movff	plusw1,btemp+10
  9635  000B12  0EF8               	movlw	-8
  9636  000B14  CFE3 F05B          	movff	plusw1,btemp+11
  9637  000B18  0ED6               	movlw	214
  9638  000B1A  245A               	addwf	btemp+10,w,c
  9639  000B1C  6ED9               	movwf	fsr2l,c
  9640  000B1E  0E00               	movlw	0
  9641  000B20  205B               	addwfc	btemp+11,w,c
  9642  000B22  6EDA               	movwf	fsr2h,c
  9643  000B24  5051               	movf	btemp+1,w,c
  9644  000B26  26DE               	addwf	postinc2,f,c
  9645  000B28  5052               	movf	btemp+2,w,c
  9646  000B2A  22DD               	addwfc	postdec2,f,c
  9647  000B2C                     l2684:
  9648                           
  9649                           ;RF24Network_c.c: 657: }
  9650                           ;RF24Network_c.c: 661: result = 1;
  9651                           ;stkvar	_result @ sp[(-7)+5]
  9652  000B2C  0EFE               	movlw	-2
  9653  000B2E  6AE3               	clrf	plusw1,c
  9654  000B30  2AE3               	incf	plusw1,f,c
  9655                           
  9656                           ;RF24Network_c.c: 662: }else{
  9657  000B32  D002               	goto	l2688
  9658  000B34                     l2686:
  9659                           
  9660                           ;RF24Network_c.c: 663: result = 0;
  9661                           ;stkvar	_result @ sp[(-7)+5]
  9662  000B34  0EFE               	movlw	-2
  9663  000B36  6AE3               	clrf	plusw1,c
  9664  000B38                     l2688:
  9665                           
  9666                           ;RF24Network_c.c: 665: }
  9667                           ;RF24Network_c.c: 666: return result;
  9668                           ;stkvar	_result @ sp[(-7)+5]
  9669  000B38  0EFE               	movlw	-2
  9670  000B3A  CFE3 F050          	movff	plusw1,btemp
  9671  000B3E                     l250:
  9672                           
  9673                           ; _RF24N_enqueue: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4,
      +                           argsize = 4, vargsize = 0
  9674  000B3E  0EF5               	movlw	245
  9675  000B40  26E1               	addwf	fsr1l,f,c
  9676  000B42  0EFF               	movlw	255
  9677  000B44  22E2               	addwfc	fsr1h,f,c
  9678  000B46  0012               	return		;funcret
  9679  000B48                     __end_of_RF24N_enqueue:
  9680                           	opt stack 0
  9681                           tblptru	equ	0xFF8
  9682                           tblptrh	equ	0xFF7
  9683                           tblptrl	equ	0xFF6
  9684                           tablat	equ	0xFF5
  9685                           prodh	equ	0xFF4
  9686                           prodl	equ	0xFF3
  9687                           intcon	equ	0xFF2
  9688                           indf0	equ	0xFEF
  9689                           postinc0	equ	0xFEE
  9690                           postdec0	equ	0xFED
  9691                           fsr0h	equ	0xFEA
  9692                           fsr0l	equ	0xFE9
  9693                           wreg	equ	0xFE8
  9694                           postinc1	equ	0xFE6
  9695                           postdec1	equ	0xFE5
  9696                           plusw1	equ	0xFE3
  9697                           fsr1h	equ	0xFE2
  9698                           fsr1l	equ	0xFE1
  9699                           indf2	equ	0xFDF
  9700                           postinc2	equ	0xFDE
  9701                           postdec2	equ	0xFDD
  9702                           plusw2	equ	0xFDB
  9703                           fsr2h	equ	0xFDA
  9704                           fsr2l	equ	0xFD9
  9705                           status	equ	0xFD8
  9706                           
  9707 ;; *************** function _memcpy *****************
  9708 ;; Defined at:
  9709 ;;		line 11 in file "/opt/microchip/xc8/v1.38/sources/common/memcpy.c"
  9710 ;; Parameters:    Size  Location     Type
  9711 ;;  d1              2  [STACK] PTR void 
  9712 ;;		 -> network.frame_buffer(32), bufsize(2), msg_size(2), network(372), 
  9713 ;;		 -> radio(22), 
  9714 ;;  s1              2  [STACK] PTR const void 
  9715 ;;		 -> network.frag_queue(13), network.frame_buffer(32), address(4), message_size(2), 
  9716 ;;		 -> header(8), payload(8), network(372), 
  9717 ;;  n               2  [STACK] unsigned int 
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  s               2  [STACK] PTR const unsigned char 
  9720 ;;		 -> network.frag_queue(13), network.frame_buffer(32), address(4), message_size(2), 
  9721 ;;		 -> header(8), payload(8), network(372), 
  9722 ;;  d               2  [STACK] PTR unsigned char 
  9723 ;;		 -> network.frame_buffer(32), bufsize(2), msg_size(2), network(372), 
  9724 ;;		 -> radio(22), 
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  2  [STACK] PTR void 
  9727 ;; Registers used:
  9728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9737 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9738 ;;Total ram usage:        0 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    1
  9741 ;; This function calls:
  9742 ;;		Nothing
  9743 ;; This function is called by:
  9744 ;;		_RF24N_enqueue
  9745 ;;		_RF24N__write
  9746 ;;		_RF24_openReadingPipe_d
  9747 ;; This function uses a reentrant model
  9748 ;;
  9749                           
  9750                           	psect	text33
  9751  003F6A                     __ptext33:
  9752                           	opt stack 0
  9753  003F6A                     _memcpy:
  9754                           	opt stack 0
  9755                           
  9756                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
  9757  003F6A  52E6               	movf	postinc1,f,c
  9758  003F6C  52E6               	movf	postinc1,f,c
  9759  003F6E  52E6               	movf	postinc1,f,c
  9760  003F70  52E6               	movf	postinc1,f,c
  9761                           
  9762                           ;stkvar	_s1 @ sp[(-4)+-4]
  9763                           
  9764                           ;incstack = 0
  9765  003F72  0EF8               	movlw	-8
  9766  003F74  CFE3 F051          	movff	plusw1,btemp+1
  9767  003F78  0EF9               	movlw	-7
  9768  003F7A  CFE3 F052          	movff	plusw1,btemp+2
  9769                           
  9770                           ;stkvar	_s @ sp[(-4)+0]
  9771  003F7E  0EFD               	movlw	-3
  9772  003F80  C052  FFE3         	movff	btemp+2,plusw1
  9773  003F84  0EFC               	movlw	-4
  9774  003F86  C051  FFE3         	movff	btemp+1,plusw1
  9775                           
  9776                           ;stkvar	_d1 @ sp[(-4)+-2]
  9777  003F8A  0EFA               	movlw	-6
  9778  003F8C  CFE3 F051          	movff	plusw1,btemp+1
  9779  003F90  0EFB               	movlw	-5
  9780  003F92  CFE3 F052          	movff	plusw1,btemp+2
  9781                           
  9782                           ;stkvar	_d @ sp[(-4)+2]
  9783  003F96  0EFF               	movlw	-1
  9784  003F98  C052  FFE3         	movff	btemp+2,plusw1
  9785  003F9C  0EFE               	movlw	-2
  9786  003F9E  C051  FFE3         	movff	btemp+1,plusw1
  9787  003FA2  D02C               	goto	l2278
  9788  003FA4                     l2272:
  9789                           
  9790                           ;stkvar	_s @ sp[(-4)+0]
  9791  003FA4  0EFC               	movlw	-4
  9792  003FA6  CFE3 FFD9          	movff	plusw1,fsr2l
  9793  003FAA  0EFD               	movlw	-3
  9794  003FAC  CFE3 FFDA          	movff	plusw1,fsr2h
  9795                           
  9796                           ;stkvar	_d @ sp[(-4)+2]
  9797  003FB0  0EFE               	movlw	-2
  9798  003FB2  CFE3 FFE9          	movff	plusw1,fsr0l
  9799  003FB6  0EFF               	movlw	-1
  9800  003FB8  CFE3 FFEA          	movff	plusw1,fsr0h
  9801  003FBC  CFDF FFEF          	movff	indf2,indf0
  9802                           
  9803                           ;stkvar	_s @ sp[(-4)+0]
  9804  003FC0  0EFC               	movlw	-4
  9805  003FC2  50E3               	movf	plusw1,w,c
  9806  003FC4  0F01               	addlw	1
  9807  003FC6  6E50               	movwf	btemp,c
  9808  003FC8  0EFC               	movlw	-4
  9809  003FCA  C050  FFE3         	movff	btemp,plusw1
  9810  003FCE  6A50               	clrf	btemp,c
  9811  003FD0  0EFD               	movlw	-3
  9812  003FD2  50E3               	movf	plusw1,w,c
  9813  003FD4  2050               	addwfc	btemp,w,c
  9814  003FD6  6E50               	movwf	btemp,c
  9815  003FD8  0EFD               	movlw	-3
  9816  003FDA  C050  FFE3         	movff	btemp,plusw1
  9817                           
  9818                           ;stkvar	_d @ sp[(-4)+2]
  9819  003FDE  0EFE               	movlw	-2
  9820  003FE0  50E3               	movf	plusw1,w,c
  9821  003FE2  0F01               	addlw	1
  9822  003FE4  6E50               	movwf	btemp,c
  9823  003FE6  0EFE               	movlw	-2
  9824  003FE8  C050  FFE3         	movff	btemp,plusw1
  9825  003FEC  6A50               	clrf	btemp,c
  9826  003FEE  0EFF               	movlw	-1
  9827  003FF0  50E3               	movf	plusw1,w,c
  9828  003FF2  2050               	addwfc	btemp,w,c
  9829  003FF4  6E50               	movwf	btemp,c
  9830  003FF6  0EFF               	movlw	-1
  9831  003FF8  C050  FFE3         	movff	btemp,plusw1
  9832  003FFC                     l2278:
  9833                           
  9834                           ;stkvar	_n @ sp[(-4)+-6]
  9835  003FFC  0EF6               	movlw	-10
  9836  003FFE  CFE3 F050          	movff	plusw1,btemp
  9837  004002  0E01               	movlw	1
  9838  004004  5E50               	subwf	btemp,f,c
  9839  004006  0EF6               	movlw	-10
  9840  004008  C050  FFE3         	movff	btemp,plusw1
  9841  00400C  0EF7               	movlw	-9
  9842  00400E  CFE3 F050          	movff	plusw1,btemp
  9843  004012  0E00               	movlw	0
  9844  004014  5A50               	subwfb	btemp,f,c
  9845  004016  0EF7               	movlw	-9
  9846  004018  C050  FFE3         	movff	btemp,plusw1
  9847  00401C  0EF6               	movlw	-10
  9848  00401E  28E3               	incf	plusw1,w,c
  9849  004020  E1C1               	bnz	l2272
  9850  004022  0EF7               	movlw	-9
  9851  004024  28E3               	incf	plusw1,w,c
  9852  004026  A4D8               	btfss	status,2,c
  9853  004028  D7BD               	goto	l2272
  9854                           
  9855                           ; _memcpy: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsiz
      +                          e = 6, vargsize = 0
  9856  00402A  0EF6               	movlw	246
  9857  00402C  26E1               	addwf	fsr1l,f,c
  9858  00402E  0EFF               	movlw	255
  9859  004030  22E2               	addwfc	fsr1h,f,c
  9860  004032  0012               	return		;funcret
  9861  004034                     __end_of_memcpy:
  9862                           	opt stack 0
  9863                           tblptru	equ	0xFF8
  9864                           tblptrh	equ	0xFF7
  9865                           tblptrl	equ	0xFF6
  9866                           tablat	equ	0xFF5
  9867                           prodh	equ	0xFF4
  9868                           prodl	equ	0xFF3
  9869                           intcon	equ	0xFF2
  9870                           indf0	equ	0xFEF
  9871                           postinc0	equ	0xFEE
  9872                           postdec0	equ	0xFED
  9873                           fsr0h	equ	0xFEA
  9874                           fsr0l	equ	0xFE9
  9875                           wreg	equ	0xFE8
  9876                           postinc1	equ	0xFE6
  9877                           postdec1	equ	0xFE5
  9878                           plusw1	equ	0xFE3
  9879                           fsr1h	equ	0xFE2
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           postdec2	equ	0xFDD
  9884                           plusw2	equ	0xFDB
  9885                           fsr2h	equ	0xFDA
  9886                           fsr2l	equ	0xFD9
  9887                           status	equ	0xFD8
  9888                           
  9889 ;; *************** function ___lwdiv *****************
  9890 ;; Defined at:
  9891 ;;		line 8 in file "/opt/microchip/xc8/v1.38/sources/common/lwdiv.c"
  9892 ;; Parameters:    Size  Location     Type
  9893 ;;  dividend        2  [STACK] unsigned int 
  9894 ;;  divisor         2  [STACK] unsigned int 
  9895 ;; Auto vars:     Size  Location     Type
  9896 ;;  quotient        2  [STACK] unsigned int 
  9897 ;;  counter         1  [STACK] unsigned char 
  9898 ;; Return value:  Size  Location     Type
  9899 ;;                  2  [STACK] unsigned int 
  9900 ;; Registers used:
  9901 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
  9902 ;; Tracked objects:
  9903 ;;		On entry : 0/0
  9904 ;;		On exit  : 0/0
  9905 ;;		Unchanged: 0/0
  9906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9911 ;;Total ram usage:        0 bytes
  9912 ;; Hardware stack levels used:    1
  9913 ;; Hardware stack levels required when called:    1
  9914 ;; This function calls:
  9915 ;;		Nothing
  9916 ;; This function is called by:
  9917 ;;		_RF24N_enqueue
  9918 ;;		_RF24N_write_
  9919 ;; This function uses a reentrant model
  9920 ;;
  9921                           
  9922                           	psect	text34
  9923  003E80                     __ptext34:
  9924                           	opt stack 0
  9925  003E80                     ___lwdiv:
  9926                           	opt stack 0
  9927                           
  9928                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
  9929  003E80  52E6               	movf	postinc1,f,c
  9930  003E82  52E6               	movf	postinc1,f,c
  9931  003E84  52E6               	movf	postinc1,f,c
  9932                           
  9933                           ;stkvar	_quotient @ sp[(-3)+0]
  9934                           
  9935                           ;incstack = 0
  9936  003E86  0EFD               	movlw	-3
  9937  003E88  6AE3               	clrf	plusw1,c
  9938  003E8A  0EFE               	movlw	-2
  9939  003E8C  6AE3               	clrf	plusw1,c
  9940                           
  9941                           ;stkvar	_divisor @ sp[(-3)+-4]
  9942  003E8E  0EF9               	movlw	-7
  9943  003E90  CFE3 F050          	movff	plusw1,btemp
  9944  003E94  0EFA               	movlw	-6
  9945  003E96  50E3               	movf	plusw1,w,c
  9946  003E98  1050               	iorwf	btemp,w,c
  9947  003E9A  B4D8               	btfsc	status,2,c
  9948  003E9C  D05B               	goto	l2372
  9949                           
  9950                           ;stkvar	_counter @ sp[(-3)+2]
  9951  003E9E  0EFF               	movlw	-1
  9952  003EA0  6AE3               	clrf	plusw1,c
  9953  003EA2  D010               	goto	L12
  9954  003EA4                     l2354:
  9955                           
  9956                           ;stkvar	_divisor @ sp[(-3)+-4]
  9957  003EA4  0EF9               	movlw	-7
  9958  003EA6  50E3               	movf	plusw1,w,c
  9959  003EA8  90D8               	bcf	status,0,c
  9960  003EAA  34E8               	rlcf	wreg,w,c
  9961  003EAC  6E50               	movwf	btemp,c
  9962  003EAE  0EF9               	movlw	-7
  9963  003EB0  C050  FFE3         	movff	btemp,plusw1
  9964  003EB4  0EFA               	movlw	-6
  9965  003EB6  50E3               	movf	plusw1,w,c
  9966  003EB8  34E8               	rlcf	wreg,w,c
  9967  003EBA  6E50               	movwf	btemp,c
  9968  003EBC  0EFA               	movlw	-6
  9969  003EBE  C050  FFE3         	movff	btemp,plusw1
  9970                           
  9971                           ;stkvar	_counter @ sp[(-3)+2]
  9972  003EC2  0EFF               	movlw	-1
  9973  003EC4                     L12:
  9974  003EC4  2AE3               	incf	plusw1,f,c
  9975                           
  9976                           ;stkvar	_divisor @ sp[(-3)+-4]
  9977  003EC6  0EFA               	movlw	-6
  9978  003EC8  AEE3               	btfss	plusw1,7,c
  9979  003ECA  D7EC               	goto	l2354
  9980  003ECC                     l2360:
  9981                           
  9982                           ;stkvar	_quotient @ sp[(-3)+0]
  9983  003ECC  0EFD               	movlw	-3
  9984  003ECE  50E3               	movf	plusw1,w,c
  9985  003ED0  90D8               	bcf	status,0,c
  9986  003ED2  34E8               	rlcf	wreg,w,c
  9987  003ED4  6E50               	movwf	btemp,c
  9988  003ED6  0EFD               	movlw	-3
  9989  003ED8  C050  FFE3         	movff	btemp,plusw1
  9990  003EDC  0EFE               	movlw	-2
  9991  003EDE  50E3               	movf	plusw1,w,c
  9992  003EE0  34E8               	rlcf	wreg,w,c
  9993  003EE2  6E50               	movwf	btemp,c
  9994  003EE4  0EFE               	movlw	-2
  9995  003EE6  C050  FFE3         	movff	btemp,plusw1
  9996                           
  9997                           ;stkvar	_divisor @ sp[(-3)+-4]
  9998  003EEA  0EF9               	movlw	-7
  9999  003EEC  CFE3 F051          	movff	plusw1,btemp+1
 10000  003EF0  0EFA               	movlw	-6
 10001  003EF2  CFE3 F052          	movff	plusw1,btemp+2
 10002                           
 10003                           ;stkvar	_dividend @ sp[(-3)+-2]
 10004  003EF6  0EFB               	movlw	-5
 10005  003EF8  CFE3 F05A          	movff	plusw1,btemp+10
 10006  003EFC  0EFC               	movlw	-4
 10007  003EFE  CFE3 F05B          	movff	plusw1,btemp+11
 10008  003F02  5051               	movf	btemp+1,w,c
 10009  003F04  5C5A               	subwf	btemp+10,w,c
 10010  003F06  5052               	movf	btemp+2,w,c
 10011  003F08  585B               	subwfb	btemp+11,w,c
 10012  003F0A  A0D8               	btfss	status,0,c
 10013  003F0C  D014               	goto	l2368
 10014                           
 10015                           ;stkvar	_divisor @ sp[(-3)+-4]
 10016                           ;stkvar	_dividend @ sp[(-3)+-2]
 10017  003F0E  0EFB               	movlw	-5
 10018  003F10  50E3               	movf	plusw1,w,c
 10019  003F12  6E50               	movwf	btemp,c
 10020  003F14  0EF9               	movlw	-7
 10021  003F16  50E3               	movf	plusw1,w,c
 10022  003F18  5E50               	subwf	btemp,f,c
 10023  003F1A  0EFB               	movlw	-5
 10024  003F1C  C050  FFE3         	movff	btemp,plusw1
 10025  003F20  0EFC               	movlw	-4
 10026  003F22  50E3               	movf	plusw1,w,c
 10027  003F24  6E50               	movwf	btemp,c
 10028  003F26  0EFA               	movlw	-6
 10029  003F28  50E3               	movf	plusw1,w,c
 10030  003F2A  5A50               	subwfb	btemp,f,c
 10031  003F2C  0EFC               	movlw	-4
 10032  003F2E  C050  FFE3         	movff	btemp,plusw1
 10033                           
 10034                           ;stkvar	_quotient @ sp[(-3)+0]
 10035  003F32  0EFD               	movlw	-3
 10036  003F34  80E3               	bsf	plusw1,0,c
 10037  003F36                     l2368:
 10038                           
 10039                           ;stkvar	_divisor @ sp[(-3)+-4]
 10040  003F36  90D8               	bcf	status,0,c
 10041  003F38  0EFA               	movlw	-6
 10042  003F3A  32E3               	rrcf	plusw1,f,c
 10043  003F3C  0EF9               	movlw	-7
 10044  003F3E  32E3               	rrcf	plusw1,f,c
 10045                           
 10046                           ;stkvar	_counter @ sp[(-3)+2]
 10047  003F40  0EFF               	movlw	-1
 10048  003F42  50E3               	movf	plusw1,w,c
 10049  003F44  6E50               	movwf	btemp,c
 10050  003F46  0E01               	movlw	1
 10051  003F48  5E50               	subwf	btemp,f,c
 10052  003F4A  0EFF               	movlw	-1
 10053  003F4C  C050  FFE3         	movff	btemp,plusw1
 10054  003F50  A4D8               	btfss	status,2,c
 10055  003F52  D7BC               	goto	l2360
 10056  003F54                     l2372:
 10057                           
 10058                           ;stkvar	_quotient @ sp[(-3)+0]
 10059  003F54  0EFD               	movlw	-3
 10060  003F56  CFE3 F050          	movff	plusw1,btemp
 10061  003F5A  0EFE               	movlw	-2
 10062  003F5C  CFE3 F051          	movff	plusw1,btemp+1
 10063                           
 10064                           ; ___lwdiv: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 10065  003F60  0EF9               	movlw	249
 10066  003F62  26E1               	addwf	fsr1l,f,c
 10067  003F64  0EFF               	movlw	255
 10068  003F66  22E2               	addwfc	fsr1h,f,c
 10069  003F68  0012               	return		;funcret
 10070  003F6A                     __end_of___lwdiv:
 10071                           	opt stack 0
 10072                           tblptru	equ	0xFF8
 10073                           tblptrh	equ	0xFF7
 10074                           tblptrl	equ	0xFF6
 10075                           tablat	equ	0xFF5
 10076                           prodh	equ	0xFF4
 10077                           prodl	equ	0xFF3
 10078                           intcon	equ	0xFF2
 10079                           indf0	equ	0xFEF
 10080                           postinc0	equ	0xFEE
 10081                           postdec0	equ	0xFED
 10082                           fsr0h	equ	0xFEA
 10083                           fsr0l	equ	0xFE9
 10084                           wreg	equ	0xFE8
 10085                           postinc1	equ	0xFE6
 10086                           postdec1	equ	0xFE5
 10087                           plusw1	equ	0xFE3
 10088                           fsr1h	equ	0xFE2
 10089                           fsr1l	equ	0xFE1
 10090                           indf2	equ	0xFDF
 10091                           postinc2	equ	0xFDE
 10092                           postdec2	equ	0xFDD
 10093                           plusw2	equ	0xFDB
 10094                           fsr2h	equ	0xFDA
 10095                           fsr2l	equ	0xFD9
 10096                           status	equ	0xFD8
 10097                           
 10098 ;; *************** function _RF24N_levelToAddress *****************
 10099 ;; Defined at:
 10100 ;;		line 1323 in file "../../RF24Network_c.c"
 10101 ;; Parameters:    Size  Location     Type
 10102 ;;  rn              2  [STACK] PTR struct .
 10103 ;;		 -> network(372), 
 10104 ;;  level           1  [STACK] unsigned char 
 10105 ;; Auto vars:     Size  Location     Type
 10106 ;;  levelAddr       2  [STACK] unsigned int 
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  2  [STACK] unsigned int 
 10109 ;; Registers used:
 10110 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, prodl, prodh
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 0/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10119 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10120 ;;Total ram usage:        0 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; Hardware stack levels required when called:    1
 10123 ;; This function calls:
 10124 ;;		Nothing
 10125 ;; This function is called by:
 10126 ;;		_RF24N_update
 10127 ;; This function uses a reentrant model
 10128 ;;
 10129                           
 10130                           	psect	text35
 10131  004B50                     __ptext35:
 10132                           	opt stack 0
 10133  004B50                     _RF24N_levelToAddress:
 10134                           	opt stack 0
 10135                           
 10136                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 10137  004B50  52E6               	movf	postinc1,f,c
 10138  004B52  52E6               	movf	postinc1,f,c
 10139                           
 10140                           ;RF24Network_c.c: 1325: uint16_t levelAddr = 1;
 10141                           
 10142                           ;incstack = 0
 10143  004B54  0E01               	movlw	1
 10144  004B56  6E51               	movwf	btemp+1,c
 10145  004B58  0E00               	movlw	0
 10146  004B5A  6E52               	movwf	btemp+2,c
 10147                           
 10148                           ;stkvar	_levelAddr @ sp[(-2)+0]
 10149  004B5C  0EFE               	movlw	-2
 10150  004B5E  C051  FFE3         	movff	btemp+1,plusw1
 10151  004B62  0EFF               	movlw	-1
 10152  004B64  C052  FFE3         	movff	btemp+2,plusw1
 10153                           
 10154                           ;RF24Network_c.c: 1326: if(level){
 10155                           ;stkvar	_level @ sp[(-2)+-3]
 10156  004B68  0EFB               	movlw	-5
 10157  004B6A  50E3               	movf	plusw1,w,c
 10158  004B6C  B4D8               	btfsc	status,2,c
 10159  004B6E  D013               	goto	l2698
 10160                           
 10161                           ;RF24Network_c.c: 1327: levelAddr = levelAddr << ((level-1) * 3);
 10162                           ;stkvar	_level @ sp[(-2)+-3]
 10163  004B70  0EFB               	movlw	-5
 10164  004B72  50E3               	movf	plusw1,w,c
 10165  004B74  0FFF               	addlw	255
 10166  004B76  0D03               	mullw	3
 10167                           
 10168                           ;stkvar	_levelAddr @ sp[(-2)+0]
 10169  004B78  50E1               	movf	fsr1l,w,c
 10170  004B7A  0FFE               	addlw	-2
 10171  004B7C  6ED9               	movwf	fsr2l,c
 10172  004B7E  50E2               	movf	fsr1h,w,c
 10173  004B80  6EDA               	movwf	fsr2h,c
 10174  004B82  0EFF               	movlw	255
 10175  004B84  22DA               	addwfc	fsr2h,f,c
 10176  004B86  28F3               	incf	prodl,w,c
 10177  004B88  D003               	goto	u1350
 10178  004B8A                     u1355:
 10179  004B8A  90D8               	bcf	status,0,c
 10180  004B8C  36DE               	rlcf	postinc2,f,c
 10181  004B8E  36DD               	rlcf	postdec2,f,c
 10182  004B90                     u1350:
 10183  004B90  2EE8               	decfsz	wreg,f,c
 10184  004B92  D7FB               	goto	u1355
 10185                           
 10186                           ;RF24Network_c.c: 1328: }else{
 10187  004B94  D005               	goto	l2702
 10188  004B96                     l2698:
 10189                           
 10190                           ;RF24Network_c.c: 1329: return 0;
 10191  004B96  0E00               	movlw	0
 10192  004B98  6E50               	movwf	btemp,c
 10193  004B9A  0E00               	movlw	0
 10194  004B9C  6E51               	movwf	btemp+1,c
 10195  004B9E  D006               	goto	l412
 10196  004BA0                     l2702:
 10197                           
 10198                           ;RF24Network_c.c: 1330: }
 10199                           ;RF24Network_c.c: 1331: return levelAddr;
 10200                           ;stkvar	_levelAddr @ sp[(-2)+0]
 10201  004BA0  0EFE               	movlw	-2
 10202  004BA2  CFE3 F050          	movff	plusw1,btemp
 10203  004BA6  0EFF               	movlw	-1
 10204  004BA8  CFE3 F051          	movff	plusw1,btemp+1
 10205  004BAC                     l412:
 10206                           
 10207                           ; _RF24N_levelToAddress: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 3, argsize = 3, vargsize = 0
 10208  004BAC  0EFB               	movlw	251
 10209  004BAE  26E1               	addwf	fsr1l,f,c
 10210  004BB0  0EFF               	movlw	255
 10211  004BB2  22E2               	addwfc	fsr1h,f,c
 10212  004BB4  0012               	return		;funcret
 10213  004BB6                     __end_of_RF24N_levelToAddress:
 10214                           	opt stack 0
 10215                           tblptru	equ	0xFF8
 10216                           tblptrh	equ	0xFF7
 10217                           tblptrl	equ	0xFF6
 10218                           tablat	equ	0xFF5
 10219                           prodh	equ	0xFF4
 10220                           prodl	equ	0xFF3
 10221                           intcon	equ	0xFF2
 10222                           indf0	equ	0xFEF
 10223                           postinc0	equ	0xFEE
 10224                           postdec0	equ	0xFED
 10225                           fsr0h	equ	0xFEA
 10226                           fsr0l	equ	0xFE9
 10227                           wreg	equ	0xFE8
 10228                           postinc1	equ	0xFE6
 10229                           postdec1	equ	0xFE5
 10230                           plusw1	equ	0xFE3
 10231                           fsr1h	equ	0xFE2
 10232                           fsr1l	equ	0xFE1
 10233                           indf2	equ	0xFDF
 10234                           postinc2	equ	0xFDE
 10235                           postdec2	equ	0xFDD
 10236                           plusw2	equ	0xFDB
 10237                           fsr2h	equ	0xFDA
 10238                           fsr2l	equ	0xFD9
 10239                           status	equ	0xFD8
 10240                           
 10241 ;; *************** function _RF24_available_p *****************
 10242 ;; Defined at:
 10243 ;;		line 1095 in file "../../../RF24_c/RF24_c.c"
 10244 ;; Parameters:    Size  Location     Type
 10245 ;;  rf              2  [STACK] PTR struct RF24
 10246 ;;		 -> radio(22), 
 10247 ;;  pipe_num        2  [STACK] PTR unsigned char 
 10248 ;;		 -> NULL(0), pipe_num(1), 
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;  status          1  [STACK] unsigned char 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1  [STACK] unsigned char 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11, prodl
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        0 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    6
 10267 ;; This function calls:
 10268 ;;		_RF24_get_status
 10269 ;;		_RF24_read_register_d
 10270 ;; This function is called by:
 10271 ;;		_RF24N_update
 10272 ;; This function uses a reentrant model
 10273 ;;
 10274                           
 10275                           	psect	text36
 10276  004A80                     __ptext36:
 10277                           	opt stack 0
 10278  004A80                     _RF24_available_p:
 10279                           	opt stack 0
 10280                           
 10281                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 10282  004A80  52E6               	movf	postinc1,f,c
 10283                           
 10284                           ;RF24_c.c: 1097: if (!( RF24_read_register_d(rf,0x17) & (1<<(0)) )){
 10285                           
 10286                           ;incstack = 0
 10287  004A82  0E17               	movlw	23
 10288  004A84  6EE6               	movwf	postinc1,c
 10289                           
 10290                           ;stkvar	_rf @ sp[(-2)+-2]
 10291  004A86  0EFC               	movlw	-4
 10292  004A88  CFE3 FFE6          	movff	plusw1,postinc1
 10293  004A8C  CFE3 FFE6          	movff	plusw1,postinc1
 10294  004A90  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 10295  004A94  B050               	btfsc	btemp,0,c
 10296  004A96  D021               	goto	l2718
 10297                           
 10298                           ;RF24_c.c: 1100: if ( pipe_num ){
 10299                           ;stkvar	_pipe_num @ sp[(-1)+-4]
 10300  004A98  0EFB               	movlw	-5
 10301  004A9A  CFE3 F050          	movff	plusw1,btemp
 10302  004A9E  0EFC               	movlw	-4
 10303  004AA0  50E3               	movf	plusw1,w,c
 10304  004AA2  1050               	iorwf	btemp,w,c
 10305  004AA4  B4D8               	btfsc	status,2,c
 10306  004AA6  D017               	goto	l2714
 10307                           
 10308                           ;RF24_c.c: 1101: uint8_t status = RF24_get_status(rf);
 10309                           ;stkvar	_rf @ sp[(-1)+-2]
 10310  004AA8  0EFD               	movlw	-3
 10311  004AAA  CFE3 FFE6          	movff	plusw1,postinc1
 10312  004AAE  CFE3 FFE6          	movff	plusw1,postinc1
 10313  004AB2  EC10  F028         	call	_RF24_get_status	;wreg free
 10314                           
 10315                           ;stkvar	_status @ sp[(-1)+0]
 10316  004AB6  0EFF               	movlw	-1
 10317  004AB8  C050  FFE3         	movff	btemp,plusw1
 10318                           
 10319                           ;RF24_c.c: 1102: *pipe_num = ( status >> 1 ) & 0b111;
 10320                           ;stkvar	_pipe_num @ sp[(-1)+-4]
 10321  004ABC  0EFB               	movlw	-5
 10322  004ABE  CFE3 FFD9          	movff	plusw1,fsr2l
 10323  004AC2  0EFC               	movlw	-4
 10324  004AC4  CFE3 FFDA          	movff	plusw1,fsr2h
 10325                           
 10326                           ;stkvar	_status @ sp[(-1)+0]
 10327  004AC8  0EFF               	movlw	-1
 10328  004ACA  CFE3 F05B          	movff	plusw1,btemp+11
 10329  004ACE  90D8               	bcf	status,0,c
 10330  004AD0  305B               	rrcf	btemp+11,w,c
 10331  004AD2  0B07               	andlw	7
 10332  004AD4  6EDF               	movwf	indf2,c
 10333  004AD6                     l2714:
 10334                           
 10335                           ;RF24_c.c: 1103: }
 10336                           ;RF24_c.c: 1104: return 1;
 10337  004AD6  0E01               	movlw	1
 10338  004AD8  D001               	goto	L13
 10339  004ADA                     l2718:
 10340                           
 10341                           ;RF24_c.c: 1105: }
 10342                           ;RF24_c.c: 1108: return 0;
 10343  004ADA  0E00               	movlw	0
 10344  004ADC                     L13:
 10345  004ADC  6E50               	movwf	btemp,c
 10346                           
 10347                           ; _RF24_available_p: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           4, argsize = 4, vargsize = 0
 10348  004ADE  0EFB               	movlw	251
 10349  004AE0  26E1               	addwf	fsr1l,f,c
 10350  004AE2  0EFF               	movlw	255
 10351  004AE4  22E2               	addwfc	fsr1h,f,c
 10352  004AE6  0012               	return		;funcret
 10353  004AE8                     __end_of_RF24_available_p:
 10354                           	opt stack 0
 10355                           tblptru	equ	0xFF8
 10356                           tblptrh	equ	0xFF7
 10357                           tblptrl	equ	0xFF6
 10358                           tablat	equ	0xFF5
 10359                           prodh	equ	0xFF4
 10360                           prodl	equ	0xFF3
 10361                           intcon	equ	0xFF2
 10362                           indf0	equ	0xFEF
 10363                           postinc0	equ	0xFEE
 10364                           postdec0	equ	0xFED
 10365                           fsr0h	equ	0xFEA
 10366                           fsr0l	equ	0xFE9
 10367                           wreg	equ	0xFE8
 10368                           postinc1	equ	0xFE6
 10369                           postdec1	equ	0xFE5
 10370                           plusw1	equ	0xFE3
 10371                           fsr1h	equ	0xFE2
 10372                           fsr1l	equ	0xFE1
 10373                           indf2	equ	0xFDF
 10374                           postinc2	equ	0xFDE
 10375                           postdec2	equ	0xFDD
 10376                           plusw2	equ	0xFDB
 10377                           fsr2h	equ	0xFDA
 10378                           fsr2l	equ	0xFD9
 10379                           status	equ	0xFD8
 10380                           
 10381 ;; *************** function _RF24N_logicalToPhysicalAddress *****************
 10382 ;; Defined at:
 10383 ;;		line 1076 in file "../../RF24Network_c.c"
 10384 ;; Parameters:    Size  Location     Type
 10385 ;;  rn              2  [STACK] PTR struct .
 10386 ;;		 -> network(372), 
 10387 ;;  conversionIn    2  [STACK] PTR struct .
 10388 ;;		 -> conversion(4), 
 10389 ;; Auto vars:     Size  Location     Type
 10390 ;;  to_node         2  [STACK] PTR unsigned int 
 10391 ;;		 -> conversion.send_node(2), conversion(4), 
 10392 ;;  directTo        2  [STACK] PTR unsigned char 
 10393 ;;		 -> conversion.send_pipe(1), conversion(4), 
 10394 ;;  pre_conversi    2  [STACK] unsigned int 
 10395 ;;  multicast       2  [STACK] PTR unsigned char 
 10396 ;;		 -> conversion.multicast(1), conversion(4), 
 10397 ;;  pre_conversi    1  [STACK] unsigned char 
 10398 ;; Return value:  Size  Location     Type
 10399 ;;                  1  [STACK] unsigned char 
 10400 ;; Registers used:
 10401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
 10402 ;; Tracked objects:
 10403 ;;		On entry : 0/0
 10404 ;;		On exit  : 0/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10411 ;;Total ram usage:        0 bytes
 10412 ;; Hardware stack levels used:    1
 10413 ;; Hardware stack levels required when called:    3
 10414 ;; This function calls:
 10415 ;;		_RF24N_direct_child_route_to
 10416 ;;		_RF24N_is_descendant
 10417 ;;		_RF24N_is_direct_child
 10418 ;; This function is called by:
 10419 ;;		_RF24N_write
 10420 ;; This function uses a reentrant model
 10421 ;;
 10422                           
 10423                           	psect	text37
 10424  002C60                     __ptext37:
 10425                           	opt stack 0
 10426  002C60                     _RF24N_logicalToPhysicalAddress:
 10427                           	opt stack 0
 10428                           
 10429                           ; autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 10430  002C60  0E09               	movlw	9
 10431  002C62  26E1               	addwf	fsr1l,f,c
 10432  002C64  0E00               	movlw	0
 10433  002C66  22E2               	addwfc	fsr1h,f,c
 10434                           
 10435                           ;RF24Network_c.c: 1081: uint16_t *to_node = &conversionInfo->send_node;
 10436                           ;stkvar	_conversionInfo @ sp[(-9)+-4]
 10437                           
 10438                           ;incstack = 0
 10439  002C68  0EF3               	movlw	-13
 10440  002C6A  CFE3 F051          	movff	plusw1,btemp+1
 10441  002C6E  0EF4               	movlw	-12
 10442  002C70  CFE3 F052          	movff	plusw1,btemp+2
 10443                           
 10444                           ;stkvar	_to_node @ sp[(-9)+0]
 10445  002C74  0EF8               	movlw	-8
 10446  002C76  C052  FFE3         	movff	btemp+2,plusw1
 10447  002C7A  0EF7               	movlw	-9
 10448  002C7C  C051  FFE3         	movff	btemp+1,plusw1
 10449                           
 10450                           ;RF24Network_c.c: 1082: uint8_t *directTo = &conversionInfo->send_pipe;
 10451                           ;stkvar	_conversionInfo @ sp[(-9)+-4]
 10452  002C80  0EF3               	movlw	-13
 10453  002C82  50E3               	movf	plusw1,w,c
 10454  002C84  0F02               	addlw	2
 10455  002C86  6E51               	movwf	btemp+1,c
 10456  002C88  0EF4               	movlw	-12
 10457  002C8A  CFE3 F052          	movff	plusw1,btemp+2
 10458  002C8E  0E00               	movlw	0
 10459  002C90  2252               	addwfc	btemp+2,f,c
 10460                           
 10461                           ;stkvar	_directTo @ sp[(-9)+2]
 10462  002C92  0EFA               	movlw	-6
 10463  002C94  C052  FFE3         	movff	btemp+2,plusw1
 10464  002C98  0EF9               	movlw	-7
 10465  002C9A  C051  FFE3         	movff	btemp+1,plusw1
 10466                           
 10467                           ;RF24Network_c.c: 1083: uint8_t *multicast = &conversionInfo->multicast;
 10468                           ;stkvar	_conversionInfo @ sp[(-9)+-4]
 10469  002C9E  0EF3               	movlw	-13
 10470  002CA0  50E3               	movf	plusw1,w,c
 10471  002CA2  0F03               	addlw	3
 10472  002CA4  6E51               	movwf	btemp+1,c
 10473  002CA6  0EF4               	movlw	-12
 10474  002CA8  CFE3 F052          	movff	plusw1,btemp+2
 10475  002CAC  0E00               	movlw	0
 10476  002CAE  2252               	addwfc	btemp+2,f,c
 10477                           
 10478                           ;stkvar	_multicast @ sp[(-9)+6]
 10479  002CB0  0EFE               	movlw	-2
 10480  002CB2  C052  FFE3         	movff	btemp+2,plusw1
 10481  002CB6  0EFD               	movlw	-3
 10482  002CB8  C051  FFE3         	movff	btemp+1,plusw1
 10483                           
 10484                           ;RF24Network_c.c: 1086: uint16_t pre_conversion_send_node = rn->parent_node;
 10485                           ;stkvar	_rn @ sp[(-9)+-2]
 10486  002CBC  0EF5               	movlw	-11
 10487  002CBE  CFE3 F051          	movff	plusw1,btemp+1
 10488  002CC2  0EF6               	movlw	-10
 10489  002CC4  CFE3 F052          	movff	plusw1,btemp+2
 10490  002CC8  0E37               	movlw	55
 10491  002CCA  2451               	addwf	btemp+1,w,c
 10492  002CCC  6ED9               	movwf	fsr2l,c
 10493  002CCE  0E00               	movlw	0
 10494  002CD0  2052               	addwfc	btemp+2,w,c
 10495  002CD2  6EDA               	movwf	fsr2h,c
 10496  002CD4  CFDE F051          	movff	postinc2,btemp+1
 10497  002CD8  CFDD F052          	movff	postdec2,btemp+2
 10498                           
 10499                           ;stkvar	_pre_conversion_send_node @ sp[(-9)+4]
 10500  002CDC  0EFB               	movlw	-5
 10501  002CDE  C051  FFE3         	movff	btemp+1,plusw1
 10502  002CE2  0EFC               	movlw	-4
 10503  002CE4  C052  FFE3         	movff	btemp+2,plusw1
 10504                           
 10505                           ;RF24Network_c.c: 1089: uint8_t pre_conversion_send_pipe = rn->parent_pipe;
 10506                           ;stkvar	_rn @ sp[(-9)+-2]
 10507  002CE8  0EF5               	movlw	-11
 10508  002CEA  CFE3 F051          	movff	plusw1,btemp+1
 10509  002CEE  0EF6               	movlw	-10
 10510  002CF0  CFE3 F052          	movff	plusw1,btemp+2
 10511  002CF4  0E39               	movlw	57
 10512  002CF6  2451               	addwf	btemp+1,w,c
 10513  002CF8  6ED9               	movwf	fsr2l,c
 10514  002CFA  0E00               	movlw	0
 10515  002CFC  2052               	addwfc	btemp+2,w,c
 10516  002CFE  6EDA               	movwf	fsr2h,c
 10517  002D00  50DF               	movf	indf2,w,c
 10518  002D02  6E5B               	movwf	btemp+11,c
 10519                           
 10520                           ;stkvar	_pre_conversion_send_pipe @ sp[(-9)+8]
 10521  002D04  0EFF               	movlw	-1
 10522  002D06  C05B  FFE3         	movff	btemp+11,plusw1
 10523                           
 10524                           ;RF24Network_c.c: 1091: if(*directTo > 1 ){
 10525                           ;stkvar	_directTo @ sp[(-9)+2]
 10526  002D0A  0EF9               	movlw	-7
 10527  002D0C  CFE3 FFD9          	movff	plusw1,fsr2l
 10528  002D10  0EFA               	movlw	-6
 10529  002D12  CFE3 FFDA          	movff	plusw1,fsr2h
 10530  002D16  0E01               	movlw	1
 10531  002D18  64DF               	cpfsgt	indf2,c
 10532  002D1A  D017               	goto	l2876
 10533                           
 10534                           ;RF24Network_c.c: 1092: pre_conversion_send_node = *to_node;
 10535                           ;stkvar	_to_node @ sp[(-9)+0]
 10536                           ;stkvar	_pre_conversion_send_node @ sp[(-9)+4]
 10537  002D1C  0EF7               	movlw	-9
 10538  002D1E  CFE3 FFE9          	movff	plusw1,fsr0l
 10539  002D22  0EF8               	movlw	-8
 10540  002D24  CFE3 FFEA          	movff	plusw1,fsr0h
 10541  002D28  0EFB               	movlw	-5
 10542  002D2A  CFEE FFE3          	movff	postinc0,plusw1
 10543  002D2E  0EFC               	movlw	-4
 10544  002D30  CFED FFE3          	movff	postdec0,plusw1
 10545                           
 10546                           ;RF24Network_c.c: 1093: *multicast = 1;
 10547                           ;stkvar	_multicast @ sp[(-9)+6]
 10548  002D34  0EFD               	movlw	-3
 10549  002D36  CFE3 FFD9          	movff	plusw1,fsr2l
 10550  002D3A  0EFE               	movlw	-2
 10551  002D3C  CFE3 FFDA          	movff	plusw1,fsr2h
 10552  002D40  0E01               	movlw	1
 10553  002D42  6EDF               	movwf	indf2,c
 10554                           
 10555                           ;RF24Network_c.c: 1095: pre_conversion_send_pipe=0;
 10556                           ;stkvar	_pre_conversion_send_pipe @ sp[(-9)+8]
 10557  002D44  0EFF               	movlw	-1
 10558  002D46  6AE3               	clrf	plusw1,c
 10559                           
 10560                           ;RF24Network_c.c: 1097: }
 10561  002D48  D05D               	goto	l2888
 10562  002D4A                     l2876:
 10563                           
 10564                           ;RF24Network_c.c: 1099: else
 10565                           ;RF24Network_c.c: 1100: if ( RF24N_is_direct_child(rn,*to_node) )
 10566                           ;stkvar	_to_node @ sp[(-9)+0]
 10567  002D4A  0EF7               	movlw	-9
 10568  002D4C  CFE3 FFD9          	movff	plusw1,fsr2l
 10569  002D50  0EF8               	movlw	-8
 10570  002D52  CFE3 FFDA          	movff	plusw1,fsr2h
 10571  002D56  CFDE F051          	movff	postinc2,btemp+1
 10572  002D5A  CFDD F052          	movff	postdec2,btemp+2
 10573  002D5E  C051  FFE6         	movff	btemp+1,postinc1
 10574  002D62  C052  FFE6         	movff	btemp+2,postinc1
 10575                           
 10576                           ;stkvar	_rn @ sp[(-11)+-2]
 10577  002D66  0EF3               	movlw	-13
 10578  002D68  CFE3 FFE6          	movff	plusw1,postinc1
 10579  002D6C  CFE3 FFE6          	movff	plusw1,postinc1
 10580  002D70  EC30  F021         	call	_RF24N_is_direct_child	;wreg free
 10581  002D74  5050               	movf	btemp,w,c
 10582  002D76  B4D8               	btfsc	status,2,c
 10583  002D78  D011               	goto	l2882
 10584                           
 10585                           ;RF24Network_c.c: 1101: {
 10586                           ;RF24Network_c.c: 1103: pre_conversion_send_node = *to_node;
 10587                           ;stkvar	_to_node @ sp[(-9)+0]
 10588                           ;stkvar	_pre_conversion_send_node @ sp[(-9)+4]
 10589  002D7A  0EF7               	movlw	-9
 10590  002D7C  CFE3 FFE9          	movff	plusw1,fsr0l
 10591  002D80  0EF8               	movlw	-8
 10592  002D82  CFE3 FFEA          	movff	plusw1,fsr0h
 10593  002D86  0EFB               	movlw	-5
 10594  002D88  CFEE FFE3          	movff	postinc0,plusw1
 10595  002D8C  0EFC               	movlw	-4
 10596  002D8E  CFED FFE3          	movff	postdec0,plusw1
 10597  002D92                     l2880:
 10598                           
 10599                           ;RF24Network_c.c: 1105: pre_conversion_send_pipe = 5;
 10600                           ;stkvar	_pre_conversion_send_pipe @ sp[(-9)+8]
 10601  002D92  0EFF               	movlw	-1
 10602  002D94  6AE3               	clrf	plusw1,c
 10603  002D96  80E3               	bsf	plusw1,0,c
 10604  002D98  84E3               	bsf	plusw1,2,c	;indir
 10605                           
 10606                           ;RF24Network_c.c: 1106: }
 10607  002D9A  D034               	goto	l2888
 10608  002D9C                     l2882:
 10609                           
 10610                           ;RF24Network_c.c: 1110: else if ( RF24N_is_descendant(rn,*to_node) )
 10611                           ;stkvar	_to_node @ sp[(-9)+0]
 10612  002D9C  0EF7               	movlw	-9
 10613  002D9E  CFE3 FFD9          	movff	plusw1,fsr2l
 10614  002DA2  0EF8               	movlw	-8
 10615  002DA4  CFE3 FFDA          	movff	plusw1,fsr2h
 10616  002DA8  CFDE F051          	movff	postinc2,btemp+1
 10617  002DAC  CFDD F052          	movff	postdec2,btemp+2
 10618  002DB0  C051  FFE6         	movff	btemp+1,postinc1
 10619  002DB4  C052  FFE6         	movff	btemp+2,postinc1
 10620                           
 10621                           ;stkvar	_rn @ sp[(-11)+-2]
 10622  002DB8  0EF3               	movlw	-13
 10623  002DBA  CFE3 FFE6          	movff	plusw1,postinc1
 10624  002DBE  CFE3 FFE6          	movff	plusw1,postinc1
 10625  002DC2  EC9E  F024         	call	_RF24N_is_descendant	;wreg free
 10626  002DC6  5050               	movf	btemp,w,c
 10627  002DC8  B4D8               	btfsc	status,2,c
 10628  002DCA  D01C               	goto	l2888
 10629                           
 10630                           ;RF24Network_c.c: 1111: {
 10631                           ;RF24Network_c.c: 1112: pre_conversion_send_node = RF24N_direct_child_route_to(rn,*to_no
      +                          de);
 10632                           ;stkvar	_to_node @ sp[(-9)+0]
 10633  002DCC  0EF7               	movlw	-9
 10634  002DCE  CFE3 FFD9          	movff	plusw1,fsr2l
 10635  002DD2  0EF8               	movlw	-8
 10636  002DD4  CFE3 FFDA          	movff	plusw1,fsr2h
 10637  002DD8  CFDE F051          	movff	postinc2,btemp+1
 10638  002DDC  CFDD F052          	movff	postdec2,btemp+2
 10639  002DE0  C051  FFE6         	movff	btemp+1,postinc1
 10640  002DE4  C052  FFE6         	movff	btemp+2,postinc1
 10641                           
 10642                           ;stkvar	_rn @ sp[(-11)+-2]
 10643  002DE8  0EF3               	movlw	-13
 10644  002DEA  CFE3 FFE6          	movff	plusw1,postinc1
 10645  002DEE  CFE3 FFE6          	movff	plusw1,postinc1
 10646  002DF2  ECD4  F024         	call	_RF24N_direct_child_route_to	;wreg free
 10647                           
 10648                           ;stkvar	_pre_conversion_send_node @ sp[(-9)+4]
 10649  002DF6  0EFB               	movlw	-5
 10650  002DF8  C050  FFE3         	movff	btemp,plusw1
 10651  002DFC  0EFC               	movlw	-4
 10652  002DFE  C051  FFE3         	movff	btemp+1,plusw1
 10653  002E02  D7C7               	goto	l2880
 10654  002E04                     l2888:
 10655                           
 10656                           ;RF24Network_c.c: 1114: }
 10657                           ;RF24Network_c.c: 1116: *to_node = pre_conversion_send_node;
 10658                           ;stkvar	_pre_conversion_send_node @ sp[(-9)+4]
 10659  002E04  50E1               	movf	fsr1l,w,c
 10660  002E06  0FFB               	addlw	-5
 10661  002E08  6ED9               	movwf	fsr2l,c
 10662  002E0A  50E2               	movf	fsr1h,w,c
 10663  002E0C  6EDA               	movwf	fsr2h,c
 10664  002E0E  0EFF               	movlw	255
 10665  002E10  22DA               	addwfc	fsr2h,f,c
 10666                           
 10667                           ;stkvar	_to_node @ sp[(-9)+0]
 10668  002E12  0EF7               	movlw	-9
 10669  002E14  CFE3 FFE9          	movff	plusw1,fsr0l
 10670  002E18  0EF8               	movlw	-8
 10671  002E1A  CFE3 FFEA          	movff	plusw1,fsr0h
 10672  002E1E  CFDE FFEE          	movff	postinc2,postinc0
 10673  002E22  CFDD FFED          	movff	postdec2,postdec0
 10674                           
 10675                           ;RF24Network_c.c: 1117: *directTo = pre_conversion_send_pipe;
 10676                           ;stkvar	_pre_conversion_send_pipe @ sp[(-9)+8]
 10677                           ;stkvar	_directTo @ sp[(-9)+2]
 10678  002E26  0EF9               	movlw	-7
 10679  002E28  CFE3 FFD9          	movff	plusw1,fsr2l
 10680  002E2C  0EFA               	movlw	-6
 10681  002E2E  CFE3 FFDA          	movff	plusw1,fsr2h
 10682  002E32  0EFF               	movlw	-1
 10683  002E34  CFE3 FFDF          	movff	plusw1,indf2
 10684                           
 10685                           ; _RF24N_logicalToPhysicalAddress: autosize = 9, savesize = 0, parsavesize = 0, tempsize
      +                           = 0 parsize = 4, argsize = 4, vargsize = 0
 10686  002E38  0EF3               	movlw	243
 10687  002E3A  26E1               	addwf	fsr1l,f,c
 10688  002E3C  0EFF               	movlw	255
 10689  002E3E  22E2               	addwfc	fsr1h,f,c
 10690  002E40  0012               	return		;funcret
 10691  002E42                     __end_of_RF24N_logicalToPhysicalAddress:
 10692                           	opt stack 0
 10693                           tblptru	equ	0xFF8
 10694                           tblptrh	equ	0xFF7
 10695                           tblptrl	equ	0xFF6
 10696                           tablat	equ	0xFF5
 10697                           prodh	equ	0xFF4
 10698                           prodl	equ	0xFF3
 10699                           intcon	equ	0xFF2
 10700                           indf0	equ	0xFEF
 10701                           postinc0	equ	0xFEE
 10702                           postdec0	equ	0xFED
 10703                           fsr0h	equ	0xFEA
 10704                           fsr0l	equ	0xFE9
 10705                           wreg	equ	0xFE8
 10706                           postinc1	equ	0xFE6
 10707                           postdec1	equ	0xFE5
 10708                           plusw1	equ	0xFE3
 10709                           fsr1h	equ	0xFE2
 10710                           fsr1l	equ	0xFE1
 10711                           indf2	equ	0xFDF
 10712                           postinc2	equ	0xFDE
 10713                           postdec2	equ	0xFDD
 10714                           plusw2	equ	0xFDB
 10715                           fsr2h	equ	0xFDA
 10716                           fsr2l	equ	0xFD9
 10717                           status	equ	0xFD8
 10718                           
 10719 ;; *************** function _RF24N_is_direct_child *****************
 10720 ;; Defined at:
 10721 ;;		line 1178 in file "../../RF24Network_c.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;  rn              2  [STACK] PTR struct .
 10724 ;;		 -> network(372), 
 10725 ;;  node            2  [STACK] unsigned int 
 10726 ;; Auto vars:     Size  Location     Type
 10727 ;;  child_node_m    2  [STACK] unsigned int 
 10728 ;;  result          1  [STACK] unsigned char 
 10729 ;; Return value:  Size  Location     Type
 10730 ;;                  1  [STACK] unsigned char 
 10731 ;; Registers used:
 10732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
 10733 ;; Tracked objects:
 10734 ;;		On entry : 0/0
 10735 ;;		On exit  : 0/0
 10736 ;;		Unchanged: 0/0
 10737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10742 ;;Total ram usage:        0 bytes
 10743 ;; Hardware stack levels used:    1
 10744 ;; Hardware stack levels required when called:    2
 10745 ;; This function calls:
 10746 ;;		_RF24N_is_descendant
 10747 ;; This function is called by:
 10748 ;;		_RF24N_logicalToPhysicalAddress
 10749 ;; This function uses a reentrant model
 10750 ;;
 10751                           
 10752                           	psect	text38
 10753  004260                     __ptext38:
 10754                           	opt stack 0
 10755  004260                     _RF24N_is_direct_child:
 10756                           	opt stack 0
 10757                           
 10758                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 10759  004260  52E6               	movf	postinc1,f,c
 10760  004262  52E6               	movf	postinc1,f,c
 10761  004264  52E6               	movf	postinc1,f,c
 10762                           
 10763                           ;RF24Network_c.c: 1180: uint8_t result = 0;
 10764                           ;stkvar	_result @ sp[(-3)+2]
 10765                           
 10766                           ;incstack = 0
 10767  004266  0EFF               	movlw	-1
 10768  004268  6AE3               	clrf	plusw1,c
 10769                           
 10770                           ;RF24Network_c.c: 1189: if ( RF24N_is_descendant(rn,node) )
 10771                           ;stkvar	_node @ sp[(-3)+-4]
 10772  00426A  0EF9               	movlw	-7
 10773  00426C  CFE3 FFE6          	movff	plusw1,postinc1
 10774  004270  CFE3 FFE6          	movff	plusw1,postinc1
 10775                           
 10776                           ;stkvar	_rn @ sp[(-5)+-2]
 10777  004274  0EF9               	movlw	-7
 10778  004276  CFE3 FFE6          	movff	plusw1,postinc1
 10779  00427A  CFE3 FFE6          	movff	plusw1,postinc1
 10780  00427E  EC9E  F024         	call	_RF24N_is_descendant	;wreg free
 10781  004282  5050               	movf	btemp,w,c
 10782  004284  B4D8               	btfsc	status,2,c
 10783  004286  D03A               	goto	l2730
 10784                           
 10785                           ;RF24Network_c.c: 1190: {
 10786                           ;RF24Network_c.c: 1192: uint16_t child_node_mask = ( ~ rn->node_mask ) << 3;
 10787                           ;stkvar	_rn @ sp[(-3)+-2]
 10788  004288  0EFB               	movlw	-5
 10789  00428A  CFE3 F051          	movff	plusw1,btemp+1
 10790  00428E  0EFC               	movlw	-4
 10791  004290  CFE3 F052          	movff	plusw1,btemp+2
 10792  004294  0E3A               	movlw	58
 10793  004296  2451               	addwf	btemp+1,w,c
 10794  004298  6ED9               	movwf	fsr2l,c
 10795  00429A  0E00               	movlw	0
 10796  00429C  2052               	addwfc	btemp+2,w,c
 10797  00429E  6EDA               	movwf	fsr2h,c
 10798  0042A0  CFDE F05A          	movff	postinc2,btemp+10
 10799  0042A4  CFDD F05B          	movff	postdec2,btemp+11
 10800  0042A8  1C5A               	comf	btemp+10,w,c
 10801  0042AA  6E51               	movwf	btemp+1,c
 10802  0042AC  1C5B               	comf	btemp+11,w,c
 10803  0042AE  6E52               	movwf	btemp+2,c
 10804  0042B0  90D8               	bcf	status,0,c
 10805  0042B2  3651               	rlcf	btemp+1,f,c
 10806  0042B4  3652               	rlcf	btemp+2,f,c
 10807  0042B6  90D8               	bcf	status,0,c
 10808  0042B8  3651               	rlcf	btemp+1,f,c
 10809  0042BA  3652               	rlcf	btemp+2,f,c
 10810  0042BC  90D8               	bcf	status,0,c
 10811  0042BE  3651               	rlcf	btemp+1,f,c
 10812  0042C0  3652               	rlcf	btemp+2,f,c
 10813                           
 10814                           ;stkvar	_child_node_mask @ sp[(-3)+0]
 10815  0042C2  0EFD               	movlw	-3
 10816  0042C4  C051  FFE3         	movff	btemp+1,plusw1
 10817  0042C8  0EFE               	movlw	-2
 10818  0042CA  C052  FFE3         	movff	btemp+2,plusw1
 10819                           
 10820                           ;RF24Network_c.c: 1193: result = ( node & child_node_mask ) == 0 ;
 10821                           ;stkvar	_child_node_mask @ sp[(-3)+0]
 10822                           ;stkvar	_node @ sp[(-3)+-4]
 10823  0042CE  0EF9               	movlw	-7
 10824  0042D0  CFE3 F051          	movff	plusw1,btemp+1
 10825  0042D4  0EFA               	movlw	-6
 10826  0042D6  CFE3 F052          	movff	plusw1,btemp+2
 10827  0042DA  0EFD               	movlw	-3
 10828  0042DC  50E3               	movf	plusw1,w,c
 10829  0042DE  1651               	andwf	btemp+1,f,c
 10830  0042E0  0EFE               	movlw	-2
 10831  0042E2  50E3               	movf	plusw1,w,c
 10832  0042E4  1652               	andwf	btemp+2,f,c
 10833  0042E6  5051               	movf	btemp+1,w,c
 10834  0042E8  1052               	iorwf	btemp+2,w,c
 10835  0042EA  A4D8               	btfss	status,2,c
 10836  0042EC  D003               	goto	u1390
 10837  0042EE  6A5B               	clrf	btemp+11,c
 10838  0042F0  2A5B               	incf	btemp+11,f,c
 10839  0042F2  D001               	goto	u1408
 10840  0042F4                     u1390:
 10841  0042F4  6A5B               	clrf	btemp+11,c
 10842  0042F6                     u1408:
 10843                           
 10844                           ;stkvar	_result @ sp[(-3)+2]
 10845  0042F6  0EFF               	movlw	-1
 10846  0042F8  C05B  FFE3         	movff	btemp+11,plusw1
 10847  0042FC                     l2730:
 10848                           
 10849                           ;RF24Network_c.c: 1194: }
 10850                           ;RF24Network_c.c: 1195: return result;
 10851                           ;stkvar	_result @ sp[(-3)+2]
 10852  0042FC  0EFF               	movlw	-1
 10853  0042FE  CFE3 F050          	movff	plusw1,btemp
 10854                           
 10855                           ; _RF24N_is_direct_child: autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 10856  004302  0EF9               	movlw	249
 10857  004304  26E1               	addwf	fsr1l,f,c
 10858  004306  0EFF               	movlw	255
 10859  004308  22E2               	addwfc	fsr1h,f,c
 10860  00430A  0012               	return		;funcret
 10861  00430C                     __end_of_RF24N_is_direct_child:
 10862                           	opt stack 0
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           indf0	equ	0xFEF
 10871                           postinc0	equ	0xFEE
 10872                           postdec0	equ	0xFED
 10873                           fsr0h	equ	0xFEA
 10874                           fsr0l	equ	0xFE9
 10875                           wreg	equ	0xFE8
 10876                           postinc1	equ	0xFE6
 10877                           postdec1	equ	0xFE5
 10878                           plusw1	equ	0xFE3
 10879                           fsr1h	equ	0xFE2
 10880                           fsr1l	equ	0xFE1
 10881                           indf2	equ	0xFDF
 10882                           postinc2	equ	0xFDE
 10883                           postdec2	equ	0xFDD
 10884                           plusw2	equ	0xFDB
 10885                           fsr2h	equ	0xFDA
 10886                           fsr2l	equ	0xFD9
 10887                           status	equ	0xFD8
 10888                           
 10889 ;; *************** function _RF24N_is_descendant *****************
 10890 ;; Defined at:
 10891 ;;		line 1200 in file "../../RF24Network_c.c"
 10892 ;; Parameters:    Size  Location     Type
 10893 ;;  rn              2  [STACK] PTR struct .
 10894 ;;		 -> network(372), 
 10895 ;;  node            2  [STACK] unsigned int 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;		None
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  1  [STACK] unsigned char 
 10900 ;; Registers used:
 10901 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;Total ram usage:        0 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    1
 10914 ;; This function calls:
 10915 ;;		Nothing
 10916 ;; This function is called by:
 10917 ;;		_RF24N_logicalToPhysicalAddress
 10918 ;;		_RF24N_is_direct_child
 10919 ;; This function uses a reentrant model
 10920 ;;
 10921                           
 10922                           	psect	text39
 10923  00493C                     __ptext39:
 10924                           	opt stack 0
 10925  00493C                     _RF24N_is_descendant:
 10926                           	opt stack 22
 10927                           
 10928                           ;RF24Network_c.c: 1202: return ( node & rn->node_mask ) == rn->node_address;
 10929                           ;stkvar	_rn @ sp[(0)+-2]
 10930                           
 10931                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 10932                           ;incstack = 0
 10933  00493C  0EFE               	movlw	-2
 10934  00493E  CFE3 F051          	movff	plusw1,btemp+1
 10935  004942  0EFF               	movlw	-1
 10936  004944  CFE3 F052          	movff	plusw1,btemp+2
 10937  004948  0E32               	movlw	50
 10938  00494A  2451               	addwf	btemp+1,w,c
 10939  00494C  6ED9               	movwf	fsr2l,c
 10940  00494E  0E00               	movlw	0
 10941  004950  2052               	addwfc	btemp+2,w,c
 10942  004952  6EDA               	movwf	fsr2h,c
 10943                           
 10944                           ;stkvar	_node @ sp[(0)+-4]
 10945  004954  0EFC               	movlw	-4
 10946  004956  CFE3 F051          	movff	plusw1,btemp+1
 10947  00495A  0EFD               	movlw	-3
 10948  00495C  CFE3 F052          	movff	plusw1,btemp+2
 10949                           
 10950                           ;stkvar	_rn @ sp[(0)+-2]
 10951  004960  0EFE               	movlw	-2
 10952  004962  CFE3 F05A          	movff	plusw1,btemp+10
 10953  004966  0EFF               	movlw	-1
 10954  004968  CFE3 F05B          	movff	plusw1,btemp+11
 10955  00496C  0E3A               	movlw	58
 10956  00496E  245A               	addwf	btemp+10,w,c
 10957  004970  6EE9               	movwf	fsr0l,c
 10958  004972  0E00               	movlw	0
 10959  004974  205B               	addwfc	btemp+11,w,c
 10960  004976  6EEA               	movwf	fsr0h,c
 10961  004978  CFEE F05A          	movff	postinc0,btemp+10
 10962  00497C  CFED F05B          	movff	postdec0,btemp+11
 10963  004980  5051               	movf	btemp+1,w,c
 10964  004982  165A               	andwf	btemp+10,f,c
 10965  004984  5052               	movf	btemp+2,w,c
 10966  004986  165B               	andwf	btemp+11,f,c
 10967  004988  50DE               	movf	postinc2,w,c
 10968  00498A  185A               	xorwf	btemp+10,w,c
 10969  00498C  E107               	bnz	u750
 10970  00498E  50DE               	movf	postinc2,w,c
 10971  004990  185B               	xorwf	btemp+11,w,c
 10972  004992  A4D8               	btfss	status,2,c
 10973  004994  D003               	goto	u750
 10974  004996  6A50               	clrf	btemp,c
 10975  004998  2A50               	incf	btemp,f,c
 10976  00499A  D001               	goto	l379
 10977  00499C                     u750:
 10978  00499C  6A50               	clrf	btemp,c
 10979  00499E                     l379:
 10980                           
 10981                           ; _RF24N_is_descendant: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsiz
      +                          e = 4, argsize = 4, vargsize = 0
 10982  00499E  52E5               	movf	postdec1,f,c
 10983  0049A0  52E5               	movf	postdec1,f,c
 10984  0049A2  52E5               	movf	postdec1,f,c
 10985  0049A4  52E5               	movf	postdec1,f,c
 10986  0049A6  0012               	return		;funcret
 10987  0049A8                     __end_of_RF24N_is_descendant:
 10988                           	opt stack 0
 10989                           tblptru	equ	0xFF8
 10990                           tblptrh	equ	0xFF7
 10991                           tblptrl	equ	0xFF6
 10992                           tablat	equ	0xFF5
 10993                           prodh	equ	0xFF4
 10994                           prodl	equ	0xFF3
 10995                           intcon	equ	0xFF2
 10996                           indf0	equ	0xFEF
 10997                           postinc0	equ	0xFEE
 10998                           postdec0	equ	0xFED
 10999                           fsr0h	equ	0xFEA
 11000                           fsr0l	equ	0xFE9
 11001                           wreg	equ	0xFE8
 11002                           postinc1	equ	0xFE6
 11003                           postdec1	equ	0xFE5
 11004                           plusw1	equ	0xFE3
 11005                           fsr1h	equ	0xFE2
 11006                           fsr1l	equ	0xFE1
 11007                           indf2	equ	0xFDF
 11008                           postinc2	equ	0xFDE
 11009                           postdec2	equ	0xFDD
 11010                           plusw2	equ	0xFDB
 11011                           fsr2h	equ	0xFDA
 11012                           fsr2l	equ	0xFD9
 11013                           status	equ	0xFD8
 11014                           
 11015 ;; *************** function _RF24N_direct_child_route_to *****************
 11016 ;; Defined at:
 11017 ;;		line 1265 in file "../../RF24Network_c.c"
 11018 ;; Parameters:    Size  Location     Type
 11019 ;;  rn              2  [STACK] PTR struct .
 11020 ;;		 -> network(372), 
 11021 ;;  node            2  [STACK] unsigned int 
 11022 ;; Auto vars:     Size  Location     Type
 11023 ;;  child_mask      2  [STACK] unsigned int 
 11024 ;; Return value:  Size  Location     Type
 11025 ;;                  2  [STACK] unsigned int 
 11026 ;; Registers used:
 11027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 11028 ;; Tracked objects:
 11029 ;;		On entry : 0/0
 11030 ;;		On exit  : 0/0
 11031 ;;		Unchanged: 0/0
 11032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11037 ;;Total ram usage:        0 bytes
 11038 ;; Hardware stack levels used:    1
 11039 ;; Hardware stack levels required when called:    1
 11040 ;; This function calls:
 11041 ;;		Nothing
 11042 ;; This function is called by:
 11043 ;;		_RF24N_logicalToPhysicalAddress
 11044 ;; This function uses a reentrant model
 11045 ;;
 11046                           
 11047                           	psect	text40
 11048  0049A8                     __ptext40:
 11049                           	opt stack 0
 11050  0049A8                     _RF24N_direct_child_route_to:
 11051                           	opt stack 0
 11052                           
 11053                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 11054  0049A8  52E6               	movf	postinc1,f,c
 11055  0049AA  52E6               	movf	postinc1,f,c
 11056                           
 11057                           ;RF24Network_c.c: 1268: uint16_t child_mask = ( rn->node_mask << 3 ) | 0x07;
 11058                           ;stkvar	_rn @ sp[(-2)+-2]
 11059                           
 11060                           ;incstack = 0
 11061  0049AC  0EFC               	movlw	-4
 11062  0049AE  CFE3 F051          	movff	plusw1,btemp+1
 11063  0049B2  0EFD               	movlw	-3
 11064  0049B4  CFE3 F052          	movff	plusw1,btemp+2
 11065  0049B8  0E3A               	movlw	58
 11066  0049BA  2451               	addwf	btemp+1,w,c
 11067  0049BC  6ED9               	movwf	fsr2l,c
 11068  0049BE  0E00               	movlw	0
 11069  0049C0  2052               	addwfc	btemp+2,w,c
 11070  0049C2  6EDA               	movwf	fsr2h,c
 11071  0049C4  CFDE F051          	movff	postinc2,btemp+1
 11072  0049C8  CFDD F052          	movff	postdec2,btemp+2
 11073  0049CC  90D8               	bcf	status,0,c
 11074  0049CE  3651               	rlcf	btemp+1,f,c
 11075  0049D0  3652               	rlcf	btemp+2,f,c
 11076  0049D2  90D8               	bcf	status,0,c
 11077  0049D4  3651               	rlcf	btemp+1,f,c
 11078  0049D6  3652               	rlcf	btemp+2,f,c
 11079  0049D8  90D8               	bcf	status,0,c
 11080  0049DA  3651               	rlcf	btemp+1,f,c
 11081  0049DC  3652               	rlcf	btemp+2,f,c
 11082  0049DE  0E07               	movlw	7
 11083  0049E0  1251               	iorwf	btemp+1,f,c
 11084  0049E2  0E00               	movlw	0
 11085  0049E4  1252               	iorwf	btemp+2,f,c
 11086                           
 11087                           ;stkvar	_child_mask @ sp[(-2)+0]
 11088  0049E6  0EFE               	movlw	-2
 11089  0049E8  C051  FFE3         	movff	btemp+1,plusw1
 11090  0049EC  0EFF               	movlw	-1
 11091  0049EE  C052  FFE3         	movff	btemp+2,plusw1
 11092                           
 11093                           ;RF24Network_c.c: 1269: return node & child_mask;
 11094                           ;stkvar	_child_mask @ sp[(-2)+0]
 11095                           ;stkvar	_node @ sp[(-2)+-4]
 11096  0049F2  0EFA               	movlw	-6
 11097  0049F4  CFE3 F050          	movff	plusw1,btemp
 11098  0049F8  0EFB               	movlw	-5
 11099  0049FA  CFE3 F051          	movff	plusw1,btemp+1
 11100  0049FE  0EFE               	movlw	-2
 11101  004A00  50E3               	movf	plusw1,w,c
 11102  004A02  1650               	andwf	btemp,f,c
 11103  004A04  0EFF               	movlw	-1
 11104  004A06  50E3               	movf	plusw1,w,c
 11105  004A08  1651               	andwf	btemp+1,f,c
 11106                           
 11107                           ; _RF24N_direct_child_route_to: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 
      +                          0 parsize = 4, argsize = 4, vargsize = 0
 11108  004A0A  0EFA               	movlw	250
 11109  004A0C  26E1               	addwf	fsr1l,f,c
 11110  004A0E  0EFF               	movlw	255
 11111  004A10  22E2               	addwfc	fsr1h,f,c
 11112  004A12  0012               	return		;funcret
 11113  004A14                     __end_of_RF24N_direct_child_route_to:
 11114                           	opt stack 0
 11115                           tblptru	equ	0xFF8
 11116                           tblptrh	equ	0xFF7
 11117                           tblptrl	equ	0xFF6
 11118                           tablat	equ	0xFF5
 11119                           prodh	equ	0xFF4
 11120                           prodl	equ	0xFF3
 11121                           intcon	equ	0xFF2
 11122                           indf0	equ	0xFEF
 11123                           postinc0	equ	0xFEE
 11124                           postdec0	equ	0xFED
 11125                           fsr0h	equ	0xFEA
 11126                           fsr0l	equ	0xFE9
 11127                           wreg	equ	0xFE8
 11128                           postinc1	equ	0xFE6
 11129                           postdec1	equ	0xFE5
 11130                           plusw1	equ	0xFE3
 11131                           fsr1h	equ	0xFE2
 11132                           fsr1l	equ	0xFE1
 11133                           indf2	equ	0xFDF
 11134                           postinc2	equ	0xFDE
 11135                           postdec2	equ	0xFDD
 11136                           plusw2	equ	0xFDB
 11137                           fsr2h	equ	0xFDA
 11138                           fsr2l	equ	0xFD9
 11139                           status	equ	0xFD8
 11140                           
 11141 ;; *************** function _RF24N_write_to_pipe *****************
 11142 ;; Defined at:
 11143 ;;		line 1126 in file "../../RF24Network_c.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;  rn              2  [STACK] PTR struct .
 11146 ;;		 -> network(372), 
 11147 ;;  node            2  [STACK] unsigned int 
 11148 ;;  pipe            1  [STACK] unsigned char 
 11149 ;;  multicast       1  [STACK] unsigned char 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;  out_pipe        4  [STACK] unsigned long 
 11152 ;;  ok              1  [STACK] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1  [STACK] unsigned char 
 11155 ;; Registers used:
 11156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp
      ++9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;Total ram usage:        0 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    8
 11169 ;; This function calls:
 11170 ;;		_RF24N_pipe_address
 11171 ;;		_RF24_openWritingPipe_d
 11172 ;;		_RF24_setAutoAck_p
 11173 ;;		_RF24_stopListening
 11174 ;;		_RF24_txStandBy_t
 11175 ;;		_RF24_writeFast_m
 11176 ;; This function is called by:
 11177 ;;		_RF24N_write
 11178 ;; This function uses a reentrant model
 11179 ;;
 11180                           
 11181                           	psect	text41
 11182  0025B4                     __ptext41:
 11183                           	opt stack 0
 11184  0025B4                     _RF24N_write_to_pipe:
 11185                           	opt stack 0
 11186                           
 11187                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
 11188  0025B4  0E05               	movlw	5
 11189  0025B6  26E1               	addwf	fsr1l,f,c
 11190  0025B8  0E00               	movlw	0
 11191  0025BA  22E2               	addwfc	fsr1h,f,c
 11192                           
 11193                           ;RF24Network_c.c: 1129: uint64_t out_pipe = RF24N_pipe_address(rn, node, pipe );
 11194                           ;stkvar	_pipe @ sp[(-5)+-5]
 11195                           
 11196                           ;incstack = 0
 11197  0025BC  0EF6               	movlw	-10
 11198  0025BE  50E3               	movf	plusw1,w,c
 11199  0025C0  6EE6               	movwf	postinc1,c
 11200                           
 11201                           ;stkvar	_node @ sp[(-6)+-4]
 11202  0025C2  0EF6               	movlw	-10
 11203  0025C4  CFE3 FFE6          	movff	plusw1,postinc1
 11204  0025C8  CFE3 FFE6          	movff	plusw1,postinc1
 11205                           
 11206                           ;stkvar	_rn @ sp[(-8)+-2]
 11207  0025CC  0EF6               	movlw	-10
 11208  0025CE  CFE3 FFE6          	movff	plusw1,postinc1
 11209  0025D2  CFE3 FFE6          	movff	plusw1,postinc1
 11210  0025D6  ECF8  F017         	call	_RF24N_pipe_address	;wreg free
 11211                           
 11212                           ;stkvar	_out_pipe @ sp[(-5)+0]
 11213  0025DA  0EFB               	movlw	-5
 11214  0025DC  C050  FFE3         	movff	btemp,plusw1
 11215  0025E0  0EFC               	movlw	-4
 11216  0025E2  C051  FFE3         	movff	btemp+1,plusw1
 11217  0025E6  0EFD               	movlw	-3
 11218  0025E8  C052  FFE3         	movff	btemp+2,plusw1
 11219  0025EC  0EFE               	movlw	-2
 11220  0025EE  C053  FFE3         	movff	btemp+3,plusw1
 11221                           
 11222                           ;RF24Network_c.c: 1135: if(!(rn->networkFlags & 4)){
 11223                           ;stkvar	_rn @ sp[(-5)+-2]
 11224  0025F2  0EF9               	movlw	-7
 11225  0025F4  CFE3 F051          	movff	plusw1,btemp+1
 11226  0025F8  0EFA               	movlw	-6
 11227  0025FA  CFE3 F052          	movff	plusw1,btemp+2
 11228  0025FE  0E2A               	movlw	42
 11229  002600  2451               	addwf	btemp+1,w,c
 11230  002602  6ED9               	movwf	fsr2l,c
 11231  002604  0E00               	movlw	0
 11232  002606  2052               	addwfc	btemp+2,w,c
 11233  002608  6EDA               	movwf	fsr2h,c
 11234  00260A  B4DF               	btfsc	indf2,2,c
 11235  00260C  D016               	goto	l2288
 11236                           
 11237                           ;RF24Network_c.c: 1136: RF24_stopListening(rn->radio);
 11238                           ;stkvar	_rn @ sp[(-5)+-2]
 11239  00260E  0EF9               	movlw	-7
 11240  002610  CFE3 F051          	movff	plusw1,btemp+1
 11241  002614  0EFA               	movlw	-6
 11242  002616  CFE3 F052          	movff	plusw1,btemp+2
 11243  00261A  0E2F               	movlw	47
 11244  00261C  2451               	addwf	btemp+1,w,c
 11245  00261E  6ED9               	movwf	fsr2l,c
 11246  002620  0E00               	movlw	0
 11247  002622  2052               	addwfc	btemp+2,w,c
 11248  002624  6EDA               	movwf	fsr2h,c
 11249  002626  CFDE F051          	movff	postinc2,btemp+1
 11250  00262A  CFDD F052          	movff	postdec2,btemp+2
 11251  00262E  C051  FFE6         	movff	btemp+1,postinc1
 11252  002632  C052  FFE6         	movff	btemp+2,postinc1
 11253  002636  EC50  F01E         	call	_RF24_stopListening	;wreg free
 11254  00263A                     l2288:
 11255                           
 11256                           ;RF24Network_c.c: 1137: }
 11257                           ;RF24Network_c.c: 1139: if(multicast){ RF24_setAutoAck_p(rn->radio,0,0);}else{RF24_setAu
      +                          toAck_p(rn->radio,0,1);}
 11258                           ;stkvar	_multicast @ sp[(-5)+-6]
 11259  00263A  0EF5               	movlw	-11
 11260  00263C  50E3               	movf	plusw1,w,c
 11261  00263E  B4D8               	btfsc	status,2,c
 11262  002640  D01B               	goto	l2292
 11263  002642  0E00               	movlw	0
 11264  002644  6EE6               	movwf	postinc1,c
 11265  002646  0E00               	movlw	0
 11266  002648  6EE6               	movwf	postinc1,c
 11267                           
 11268                           ;stkvar	_rn @ sp[(-7)+-2]
 11269  00264A  0EF7               	movlw	-9
 11270  00264C  CFE3 F051          	movff	plusw1,btemp+1
 11271  002650  0EF8               	movlw	-8
 11272  002652  CFE3 F052          	movff	plusw1,btemp+2
 11273  002656  0E2F               	movlw	47
 11274  002658  2451               	addwf	btemp+1,w,c
 11275  00265A  6ED9               	movwf	fsr2l,c
 11276  00265C  0E00               	movlw	0
 11277  00265E  2052               	addwfc	btemp+2,w,c
 11278  002660  6EDA               	movwf	fsr2h,c
 11279  002662  CFDE F051          	movff	postinc2,btemp+1
 11280  002666  CFDD F052          	movff	postdec2,btemp+2
 11281  00266A  C051  FFE6         	movff	btemp+1,postinc1
 11282  00266E  C052  FFE6         	movff	btemp+2,postinc1
 11283  002672  ECDC  F021         	call	_RF24_setAutoAck_p	;wreg free
 11284  002676  D01A               	goto	l2294
 11285  002678                     l2292:
 11286  002678  0E01               	movlw	1
 11287  00267A  6EE6               	movwf	postinc1,c
 11288  00267C  0E00               	movlw	0
 11289  00267E  6EE6               	movwf	postinc1,c
 11290                           
 11291                           ;stkvar	_rn @ sp[(-7)+-2]
 11292  002680  0EF7               	movlw	-9
 11293  002682  CFE3 F051          	movff	plusw1,btemp+1
 11294  002686  0EF8               	movlw	-8
 11295  002688  CFE3 F052          	movff	plusw1,btemp+2
 11296  00268C  0E2F               	movlw	47
 11297  00268E  2451               	addwf	btemp+1,w,c
 11298  002690  6ED9               	movwf	fsr2l,c
 11299  002692  0E00               	movlw	0
 11300  002694  2052               	addwfc	btemp+2,w,c
 11301  002696  6EDA               	movwf	fsr2h,c
 11302  002698  CFDE F051          	movff	postinc2,btemp+1
 11303  00269C  CFDD F052          	movff	postdec2,btemp+2
 11304  0026A0  C051  FFE6         	movff	btemp+1,postinc1
 11305  0026A4  C052  FFE6         	movff	btemp+2,postinc1
 11306  0026A8  ECDC  F021         	call	_RF24_setAutoAck_p	;wreg free
 11307  0026AC                     l2294:
 11308                           
 11309                           ;RF24Network_c.c: 1141: RF24_openWritingPipe_d(rn->radio,out_pipe);
 11310                           ;stkvar	_out_pipe @ sp[(-5)+0]
 11311  0026AC  0EFB               	movlw	-5
 11312  0026AE  CFE3 FFE6          	movff	plusw1,postinc1
 11313  0026B2  CFE3 FFE6          	movff	plusw1,postinc1
 11314  0026B6  CFE3 FFE6          	movff	plusw1,postinc1
 11315  0026BA  CFE3 FFE6          	movff	plusw1,postinc1
 11316                           
 11317                           ;stkvar	_rn @ sp[(-9)+-2]
 11318  0026BE  0EF5               	movlw	-11
 11319  0026C0  CFE3 F051          	movff	plusw1,btemp+1
 11320  0026C4  0EF6               	movlw	-10
 11321  0026C6  CFE3 F052          	movff	plusw1,btemp+2
 11322  0026CA  0E2F               	movlw	47
 11323  0026CC  2451               	addwf	btemp+1,w,c
 11324  0026CE  6ED9               	movwf	fsr2l,c
 11325  0026D0  0E00               	movlw	0
 11326  0026D2  2052               	addwfc	btemp+2,w,c
 11327  0026D4  6EDA               	movwf	fsr2h,c
 11328  0026D6  CFDE F051          	movff	postinc2,btemp+1
 11329  0026DA  CFDD F052          	movff	postdec2,btemp+2
 11330  0026DE  C051  FFE6         	movff	btemp+1,postinc1
 11331  0026E2  C052  FFE6         	movff	btemp+2,postinc1
 11332  0026E6  EC86  F021         	call	_RF24_openWritingPipe_d	;wreg free
 11333                           
 11334                           ;RF24Network_c.c: 1143: ok = RF24_writeFast_m(rn->radio,rn->frame_buffer, rn->frame_size
      +                          ,0);
 11335  0026EA  0E00               	movlw	0
 11336  0026EC  6EE6               	movwf	postinc1,c
 11337                           
 11338                           ;stkvar	_rn @ sp[(-6)+-2]
 11339  0026EE  0EF8               	movlw	-8
 11340  0026F0  CFE3 F051          	movff	plusw1,btemp+1
 11341  0026F4  0EF9               	movlw	-7
 11342  0026F6  CFE3 F052          	movff	plusw1,btemp+2
 11343  0026FA  0E34               	movlw	52
 11344  0026FC  2451               	addwf	btemp+1,w,c
 11345  0026FE  6ED9               	movwf	fsr2l,c
 11346  002700  0E00               	movlw	0
 11347  002702  2052               	addwfc	btemp+2,w,c
 11348  002704  6EDA               	movwf	fsr2h,c
 11349  002706  50DF               	movf	indf2,w,c
 11350  002708  6EE6               	movwf	postinc1,c
 11351                           
 11352                           ;stkvar	_rn @ sp[(-7)+-2]
 11353  00270A  0EF7               	movlw	-9
 11354  00270C  CFE3 F05A          	movff	plusw1,btemp+10
 11355  002710  0EF8               	movlw	-8
 11356  002712  CFE3 F05B          	movff	plusw1,btemp+11
 11357  002716  0E07               	movlw	7
 11358  002718  245A               	addwf	btemp+10,w,c
 11359  00271A  6E51               	movwf	btemp+1,c
 11360  00271C  0E00               	movlw	0
 11361  00271E  205B               	addwfc	btemp+11,w,c
 11362  002720  6E52               	movwf	btemp+2,c
 11363  002722  C051  FFE6         	movff	btemp+1,postinc1
 11364  002726  C052  FFE6         	movff	btemp+2,postinc1
 11365                           
 11366                           ;stkvar	_rn @ sp[(-9)+-2]
 11367  00272A  0EF5               	movlw	-11
 11368  00272C  CFE3 F051          	movff	plusw1,btemp+1
 11369  002730  0EF6               	movlw	-10
 11370  002732  CFE3 F052          	movff	plusw1,btemp+2
 11371  002736  0E2F               	movlw	47
 11372  002738  2451               	addwf	btemp+1,w,c
 11373  00273A  6ED9               	movwf	fsr2l,c
 11374  00273C  0E00               	movlw	0
 11375  00273E  2052               	addwfc	btemp+2,w,c
 11376  002740  6EDA               	movwf	fsr2h,c
 11377  002742  CFDE F051          	movff	postinc2,btemp+1
 11378  002746  CFDD F052          	movff	postdec2,btemp+2
 11379  00274A  C051  FFE6         	movff	btemp+1,postinc1
 11380  00274E  C052  FFE6         	movff	btemp+2,postinc1
 11381  002752  EC85  F023         	call	_RF24_writeFast_m	;wreg free
 11382                           
 11383                           ;stkvar	_ok @ sp[(-5)+4]
 11384  002756  0EFF               	movlw	-1
 11385  002758  C050  FFE3         	movff	btemp,plusw1
 11386                           
 11387                           ;RF24Network_c.c: 1145: if(!(rn->networkFlags & 4)){
 11388                           ;stkvar	_rn @ sp[(-5)+-2]
 11389  00275C  0EF9               	movlw	-7
 11390  00275E  CFE3 F051          	movff	plusw1,btemp+1
 11391  002762  0EFA               	movlw	-6
 11392  002764  CFE3 F052          	movff	plusw1,btemp+2
 11393  002768  0E2A               	movlw	42
 11394  00276A  2451               	addwf	btemp+1,w,c
 11395  00276C  6ED9               	movwf	fsr2l,c
 11396  00276E  0E00               	movlw	0
 11397  002770  2052               	addwfc	btemp+2,w,c
 11398  002772  6EDA               	movwf	fsr2h,c
 11399  002774  B4DF               	btfsc	indf2,2,c
 11400  002776  D049               	goto	l2304
 11401                           
 11402                           ;RF24Network_c.c: 1146: ok = RF24_txStandBy_t(rn->radio,rn->txTimeout,0);
 11403  002778  0E00               	movlw	0
 11404  00277A  6EE6               	movwf	postinc1,c
 11405                           
 11406                           ;stkvar	_rn @ sp[(-6)+-2]
 11407  00277C  0EF8               	movlw	-8
 11408  00277E  CFE3 F051          	movff	plusw1,btemp+1
 11409  002782  0EF9               	movlw	-7
 11410  002784  CFE3 F052          	movff	plusw1,btemp+2
 11411  002788  0E01               	movlw	1
 11412  00278A  2451               	addwf	btemp+1,w,c
 11413  00278C  6ED9               	movwf	fsr2l,c
 11414  00278E  0E00               	movlw	0
 11415  002790  2052               	addwfc	btemp+2,w,c
 11416  002792  6EDA               	movwf	fsr2h,c
 11417  002794  CFDE FFE6          	movff	postinc2,postinc1
 11418  002798  CFDE FFE6          	movff	postinc2,postinc1
 11419  00279C  CFDE FFE6          	movff	postinc2,postinc1
 11420  0027A0  CFDE FFE6          	movff	postinc2,postinc1
 11421                           
 11422                           ;stkvar	_rn @ sp[(-10)+-2]
 11423  0027A4  0EF4               	movlw	-12
 11424  0027A6  CFE3 F051          	movff	plusw1,btemp+1
 11425  0027AA  0EF5               	movlw	-11
 11426  0027AC  CFE3 F052          	movff	plusw1,btemp+2
 11427  0027B0  0E2F               	movlw	47
 11428  0027B2  2451               	addwf	btemp+1,w,c
 11429  0027B4  6ED9               	movwf	fsr2l,c
 11430  0027B6  0E00               	movlw	0
 11431  0027B8  2052               	addwfc	btemp+2,w,c
 11432  0027BA  6EDA               	movwf	fsr2h,c
 11433  0027BC  CFDE F051          	movff	postinc2,btemp+1
 11434  0027C0  CFDD F052          	movff	postdec2,btemp+2
 11435  0027C4  C051  FFE6         	movff	btemp+1,postinc1
 11436  0027C8  C052  FFE6         	movff	btemp+2,postinc1
 11437  0027CC  EC2E  F01C         	call	_RF24_txStandBy_t	;wreg free
 11438                           
 11439                           ;stkvar	_ok @ sp[(-5)+4]
 11440  0027D0  0EFF               	movlw	-1
 11441  0027D2  C050  FFE3         	movff	btemp,plusw1
 11442                           
 11443                           ;RF24Network_c.c: 1147: RF24_setAutoAck_p(rn->radio,0,0);
 11444  0027D6  0E00               	movlw	0
 11445  0027D8  6EE6               	movwf	postinc1,c
 11446  0027DA  0E00               	movlw	0
 11447  0027DC  6EE6               	movwf	postinc1,c
 11448                           
 11449                           ;stkvar	_rn @ sp[(-7)+-2]
 11450  0027DE  0EF7               	movlw	-9
 11451  0027E0  CFE3 F051          	movff	plusw1,btemp+1
 11452  0027E4  0EF8               	movlw	-8
 11453  0027E6  CFE3 F052          	movff	plusw1,btemp+2
 11454  0027EA  0E2F               	movlw	47
 11455  0027EC  2451               	addwf	btemp+1,w,c
 11456  0027EE  6ED9               	movwf	fsr2l,c
 11457  0027F0  0E00               	movlw	0
 11458  0027F2  2052               	addwfc	btemp+2,w,c
 11459  0027F4  6EDA               	movwf	fsr2h,c
 11460  0027F6  CFDE F051          	movff	postinc2,btemp+1
 11461  0027FA  CFDD F052          	movff	postdec2,btemp+2
 11462  0027FE  C051  FFE6         	movff	btemp+1,postinc1
 11463  002802  C052  FFE6         	movff	btemp+2,postinc1
 11464  002806  ECDC  F021         	call	_RF24_setAutoAck_p	;wreg free
 11465  00280A                     l2304:
 11466                           
 11467                           ;RF24Network_c.c: 1148: }
 11468                           ;RF24Network_c.c: 1163: return ok;
 11469                           ;stkvar	_ok @ sp[(-5)+4]
 11470  00280A  0EFF               	movlw	-1
 11471  00280C  CFE3 F050          	movff	plusw1,btemp
 11472                           
 11473                           ; _RF24N_write_to_pipe: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsiz
      +                          e = 6, argsize = 6, vargsize = 0
 11474  002810  0EF5               	movlw	245
 11475  002812  26E1               	addwf	fsr1l,f,c
 11476  002814  0EFF               	movlw	255
 11477  002816  22E2               	addwfc	fsr1h,f,c
 11478  002818  0012               	return		;funcret
 11479  00281A                     __end_of_RF24N_write_to_pipe:
 11480                           	opt stack 0
 11481                           tblptru	equ	0xFF8
 11482                           tblptrh	equ	0xFF7
 11483                           tblptrl	equ	0xFF6
 11484                           tablat	equ	0xFF5
 11485                           prodh	equ	0xFF4
 11486                           prodl	equ	0xFF3
 11487                           intcon	equ	0xFF2
 11488                           indf0	equ	0xFEF
 11489                           postinc0	equ	0xFEE
 11490                           postdec0	equ	0xFED
 11491                           fsr0h	equ	0xFEA
 11492                           fsr0l	equ	0xFE9
 11493                           wreg	equ	0xFE8
 11494                           postinc1	equ	0xFE6
 11495                           postdec1	equ	0xFE5
 11496                           plusw1	equ	0xFE3
 11497                           fsr1h	equ	0xFE2
 11498                           fsr1l	equ	0xFE1
 11499                           indf2	equ	0xFDF
 11500                           postinc2	equ	0xFDE
 11501                           postdec2	equ	0xFDD
 11502                           plusw2	equ	0xFDB
 11503                           fsr2h	equ	0xFDA
 11504                           fsr2l	equ	0xFD9
 11505                           status	equ	0xFD8
 11506                           
 11507 ;; *************** function _RF24_writeFast_m *****************
 11508 ;; Defined at:
 11509 ;;		line 906 in file "../../../RF24_c/RF24_c.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;  rf              2  [STACK] PTR struct RF24
 11512 ;;		 -> radio(22), 
 11513 ;;  buf             2  [STACK] PTR const void 
 11514 ;;		 -> network.frame_buffer(32), network(372), 
 11515 ;;  len             1  [STACK] unsigned char 
 11516 ;;  multicast       1  [STACK] const unsigned char 
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1  [STACK] unsigned char 
 11521 ;; Registers used:
 11522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;Total ram usage:        0 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    6
 11535 ;; This function calls:
 11536 ;;		_RF24_get_status
 11537 ;;		_RF24_startFastWrite
 11538 ;;		_RF24_write_register_d
 11539 ;; This function is called by:
 11540 ;;		_RF24N_write_to_pipe
 11541 ;; This function uses a reentrant model
 11542 ;;
 11543                           
 11544                           	psect	text42
 11545  00470A                     __ptext42:
 11546                           	opt stack 0
 11547  00470A                     _RF24_writeFast_m:
 11548                           	opt stack 18
 11549                           
 11550                           ;RF24_c.c: 917: while( ( RF24_get_status(rf) & ( (1<<(0)) ))) {
 11551                           
 11552                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
 11553                           ;incstack = 0
 11554  00470A  D016               	goto	l2234
 11555  00470C                     l2226:
 11556                           
 11557                           ;RF24_c.c: 919: if( RF24_get_status(rf) & (1<<(4))){
 11558                           ;stkvar	_rf @ sp[(0)+-2]
 11559  00470C  0EFE               	movlw	-2
 11560  00470E  CFE3 FFE6          	movff	plusw1,postinc1
 11561  004712  CFE3 FFE6          	movff	plusw1,postinc1
 11562  004716  EC10  F028         	call	_RF24_get_status	;wreg free
 11563  00471A  A850               	btfss	btemp,4,c
 11564  00471C  D00D               	goto	l2234
 11565                           
 11566                           ;RF24_c.c: 921: RF24_write_register_d(rf,0x07,(1<<(4)) );
 11567  00471E  0E10               	movlw	16
 11568  004720  6EE6               	movwf	postinc1,c
 11569  004722  0E07               	movlw	7
 11570  004724  6EE6               	movwf	postinc1,c
 11571                           
 11572                           ;stkvar	_rf @ sp[(-2)+-2]
 11573  004726  0EFC               	movlw	-4
 11574  004728  CFE3 FFE6          	movff	plusw1,postinc1
 11575  00472C  CFE3 FFE6          	movff	plusw1,postinc1
 11576  004730  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 11577                           
 11578                           ;RF24_c.c: 922: return 0;
 11579  004734  0E00               	movlw	0
 11580  004736  D01E               	goto	L14
 11581  004738                     l2234:
 11582                           
 11583                           ;stkvar	_rf @ sp[(0)+-2]
 11584  004738  0EFE               	movlw	-2
 11585  00473A  CFE3 FFE6          	movff	plusw1,postinc1
 11586  00473E  CFE3 FFE6          	movff	plusw1,postinc1
 11587  004742  EC10  F028         	call	_RF24_get_status	;wreg free
 11588  004746  B050               	btfsc	btemp,0,c
 11589  004748  D7E1               	goto	l2226
 11590                           
 11591                           ;RF24_c.c: 924: }
 11592                           ;RF24_c.c: 933: }
 11593                           ;RF24_c.c: 935: RF24_startFastWrite(rf,buf,len,multicast,1);
 11594  00474A  0E01               	movlw	1
 11595  00474C  6EE6               	movwf	postinc1,c
 11596                           
 11597                           ;stkvar	_multicast @ sp[(-1)+-6]
 11598  00474E  0EF9               	movlw	-7
 11599  004750  50E3               	movf	plusw1,w,c
 11600  004752  6EE6               	movwf	postinc1,c
 11601                           
 11602                           ;stkvar	_len @ sp[(-2)+-5]
 11603  004754  0EF9               	movlw	-7
 11604  004756  50E3               	movf	plusw1,w,c
 11605  004758  6EE6               	movwf	postinc1,c
 11606                           
 11607                           ;stkvar	_buf @ sp[(-3)+-4]
 11608  00475A  0EF9               	movlw	-7
 11609  00475C  CFE3 FFE6          	movff	plusw1,postinc1
 11610  004760  CFE3 FFE6          	movff	plusw1,postinc1
 11611                           
 11612                           ;stkvar	_rf @ sp[(-5)+-2]
 11613  004764  0EF9               	movlw	-7
 11614  004766  CFE3 FFE6          	movff	plusw1,postinc1
 11615  00476A  CFE3 FFE6          	movff	plusw1,postinc1
 11616  00476E  EC0A  F025         	call	_RF24_startFastWrite	;wreg free
 11617                           
 11618                           ;RF24_c.c: 937: return 1;
 11619  004772  0E01               	movlw	1
 11620  004774                     L14:
 11621  004774  6E50               	movwf	btemp,c
 11622                           
 11623                           ; _RF24_writeFast_m: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           6, argsize = 6, vargsize = 0
 11624  004776  0EFA               	movlw	250
 11625  004778  26E1               	addwf	fsr1l,f,c
 11626  00477A  0EFF               	movlw	255
 11627  00477C  22E2               	addwfc	fsr1h,f,c
 11628  00477E  0012               	return		;funcret
 11629  004780                     __end_of_RF24_writeFast_m:
 11630                           	opt stack 0
 11631                           tblptru	equ	0xFF8
 11632                           tblptrh	equ	0xFF7
 11633                           tblptrl	equ	0xFF6
 11634                           tablat	equ	0xFF5
 11635                           prodh	equ	0xFF4
 11636                           prodl	equ	0xFF3
 11637                           intcon	equ	0xFF2
 11638                           indf0	equ	0xFEF
 11639                           postinc0	equ	0xFEE
 11640                           postdec0	equ	0xFED
 11641                           fsr0h	equ	0xFEA
 11642                           fsr0l	equ	0xFE9
 11643                           wreg	equ	0xFE8
 11644                           postinc1	equ	0xFE6
 11645                           postdec1	equ	0xFE5
 11646                           plusw1	equ	0xFE3
 11647                           fsr1h	equ	0xFE2
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           plusw2	equ	0xFDB
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function _RF24_startFastWrite *****************
 11658 ;; Defined at:
 11659 ;;		line 951 in file "../../../RF24_c/RF24_c.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  rf              2  [STACK] PTR struct RF24
 11662 ;;		 -> radio(22), 
 11663 ;;  buf             2  [STACK] PTR const void 
 11664 ;;		 -> network.frame_buffer(32), network(372), 
 11665 ;;  len             1  [STACK] unsigned char 
 11666 ;;  multicast       1  [STACK] const unsigned char 
 11667 ;;  startTx         1  [STACK] unsigned char 
 11668 ;; Auto vars:     Size  Location     Type
 11669 ;;		None
 11670 ;; Return value:  Size  Location     Type
 11671 ;;                  1  [STACK] void 
 11672 ;; Registers used:
 11673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 11674 ;; Tracked objects:
 11675 ;;		On entry : 0/0
 11676 ;;		On exit  : 0/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11683 ;;Total ram usage:        0 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; Hardware stack levels required when called:    5
 11686 ;; This function calls:
 11687 ;;		_RF24_ce_d
 11688 ;;		_RF24_write_payload
 11689 ;; This function is called by:
 11690 ;;		_RF24_writeFast_m
 11691 ;; This function uses a reentrant model
 11692 ;;
 11693                           
 11694                           	psect	text43
 11695  004A14                     __ptext43:
 11696                           	opt stack 0
 11697  004A14                     _RF24_startFastWrite:
 11698                           	opt stack 0
 11699                           
 11700                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 7, argsize = 7 var
      +                          gsize = 0, retsize = 0
 11701  004A14  52E6               	movf	postinc1,f,c
 11702  004A16  52E6               	movf	postinc1,f,c
 11703                           
 11704                           ;RF24_c.c: 954: RF24_write_payload(rf, buf, len,multicast ? 0xB0 : 0xA0 ) ;
 11705                           ;stkvar	_multicast @ sp[(-2)+-6]
 11706                           
 11707                           ;incstack = 0
 11708  004A18  0EF8               	movlw	-8
 11709  004A1A  50E3               	movf	plusw1,w,c
 11710  004A1C  A4D8               	btfss	status,2,c
 11711  004A1E  D002               	goto	l2136
 11712  004A20  0EA0               	movlw	160
 11713  004A22  D001               	goto	L15
 11714  004A24                     l2136:
 11715  004A24  0EB0               	movlw	176
 11716  004A26                     L15:
 11717  004A26  6E51               	movwf	btemp+1,c
 11718  004A28  0E00               	movlw	0
 11719  004A2A  6E52               	movwf	btemp+2,c
 11720                           
 11721                           ;stkvar	_RF24_startFastWrite$2095 @ sp[(-2)+0]
 11722  004A2C  0EFE               	movlw	-2
 11723  004A2E  C051  FFE3         	movff	btemp+1,plusw1
 11724  004A32  0EFF               	movlw	-1
 11725  004A34  C052  FFE3         	movff	btemp+2,plusw1
 11726                           
 11727                           ;stkvar	_RF24_startFastWrite$2095 @ sp[(-2)+0]
 11728  004A38  0EFE               	movlw	-2
 11729  004A3A  50E3               	movf	plusw1,w,c
 11730  004A3C  6EE6               	movwf	postinc1,c
 11731                           
 11732                           ;stkvar	_len @ sp[(-3)+-5]
 11733  004A3E  0EF8               	movlw	-8
 11734  004A40  50E3               	movf	plusw1,w,c
 11735  004A42  6EE6               	movwf	postinc1,c
 11736                           
 11737                           ;stkvar	_buf @ sp[(-4)+-4]
 11738  004A44  0EF8               	movlw	-8
 11739  004A46  CFE3 FFE6          	movff	plusw1,postinc1
 11740  004A4A  CFE3 FFE6          	movff	plusw1,postinc1
 11741                           
 11742                           ;stkvar	_rf @ sp[(-6)+-2]
 11743  004A4E  0EF8               	movlw	-8
 11744  004A50  CFE3 FFE6          	movff	plusw1,postinc1
 11745  004A54  CFE3 FFE6          	movff	plusw1,postinc1
 11746  004A58  EC76  F019         	call	_RF24_write_payload	;wreg free
 11747                           
 11748                           ;RF24_c.c: 955: if(startTx){
 11749                           ;stkvar	_startTx @ sp[(-2)+-7]
 11750  004A5C  0EF7               	movlw	-9
 11751  004A5E  50E3               	movf	plusw1,w,c
 11752  004A60  B4D8               	btfsc	status,2,c
 11753  004A62  D009               	goto	l691
 11754                           
 11755                           ;RF24_c.c: 956: RF24_ce_d(rf,1);
 11756  004A64  0E01               	movlw	1
 11757  004A66  6EE6               	movwf	postinc1,c
 11758                           
 11759                           ;stkvar	_rf @ sp[(-3)+-2]
 11760  004A68  0EFB               	movlw	-5
 11761  004A6A  CFE3 FFE6          	movff	plusw1,postinc1
 11762  004A6E  CFE3 FFE6          	movff	plusw1,postinc1
 11763  004A72  EC2A  F026         	call	_RF24_ce_d	;wreg free
 11764  004A76                     l691:
 11765                           
 11766                           ; _RF24_startFastWrite: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsiz
      +                          e = 7, argsize = 7, vargsize = 0
 11767  004A76  0EF7               	movlw	247
 11768  004A78  26E1               	addwf	fsr1l,f,c
 11769  004A7A  0EFF               	movlw	255
 11770  004A7C  22E2               	addwfc	fsr1h,f,c
 11771  004A7E  0012               	return		;funcret
 11772  004A80                     __end_of_RF24_startFastWrite:
 11773                           	opt stack 0
 11774                           tblptru	equ	0xFF8
 11775                           tblptrh	equ	0xFF7
 11776                           tblptrl	equ	0xFF6
 11777                           tablat	equ	0xFF5
 11778                           prodh	equ	0xFF4
 11779                           prodl	equ	0xFF3
 11780                           intcon	equ	0xFF2
 11781                           indf0	equ	0xFEF
 11782                           postinc0	equ	0xFEE
 11783                           postdec0	equ	0xFED
 11784                           fsr0h	equ	0xFEA
 11785                           fsr0l	equ	0xFE9
 11786                           wreg	equ	0xFE8
 11787                           postinc1	equ	0xFE6
 11788                           postdec1	equ	0xFE5
 11789                           plusw1	equ	0xFE3
 11790                           fsr1h	equ	0xFE2
 11791                           fsr1l	equ	0xFE1
 11792                           indf2	equ	0xFDF
 11793                           postinc2	equ	0xFDE
 11794                           postdec2	equ	0xFDD
 11795                           plusw2	equ	0xFDB
 11796                           fsr2h	equ	0xFDA
 11797                           fsr2l	equ	0xFD9
 11798                           status	equ	0xFD8
 11799                           
 11800 ;; *************** function _RF24_write_payload *****************
 11801 ;; Defined at:
 11802 ;;		line 221 in file "../../../RF24_c/RF24_c.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;  rf              2  [STACK] PTR struct RF24
 11805 ;;		 -> radio(22), 
 11806 ;;  buf             2  [STACK] PTR const void 
 11807 ;;		 -> network.frame_buffer(32), network(372), 
 11808 ;;  data_len        1  [STACK] unsigned char 
 11809 ;;  writeType       1  [STACK] const unsigned char 
 11810 ;; Auto vars:     Size  Location     Type
 11811 ;;  current         2  [STACK] PTR const unsigned char 
 11812 ;;		 -> network.frame_buffer(32), network(372), 
 11813 ;;  blank_len       1  [STACK] unsigned char 
 11814 ;;  status          1    0        unsigned char 
 11815 ;; Return value:  Size  Location     Type
 11816 ;;                  1  [STACK] unsigned char 
 11817 ;; Registers used:
 11818 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11827 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11828 ;;Total ram usage:        0 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    4
 11831 ;; This function calls:
 11832 ;;		_RF24_beginTransaction
 11833 ;;		_RF24_endTransaction
 11834 ;;		_SPI_transfer
 11835 ;; This function is called by:
 11836 ;;		_RF24_startFastWrite
 11837 ;; This function uses a reentrant model
 11838 ;;
 11839                           
 11840                           	psect	text44
 11841  0032EC                     __ptext44:
 11842                           	opt stack 0
 11843  0032EC                     _RF24_write_payload:
 11844                           	opt stack 0
 11845                           
 11846                           ; autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
 11847  0032EC  0E07               	movlw	7
 11848  0032EE  26E1               	addwf	fsr1l,f,c
 11849  0032F0  0E00               	movlw	0
 11850  0032F2  22E2               	addwfc	fsr1h,f,c
 11851                           
 11852                           ;RF24_c.c: 223: uint8_t status;
 11853                           ;RF24_c.c: 224: const uint8_t* current = (const uint8_t*)(buf);
 11854                           ;stkvar	_buf @ sp[(-7)+-4]
 11855                           
 11856                           ;incstack = 0
 11857  0032F4  0EF5               	movlw	-11
 11858  0032F6  CFE3 F051          	movff	plusw1,btemp+1
 11859  0032FA  0EF6               	movlw	-10
 11860  0032FC  CFE3 F052          	movff	plusw1,btemp+2
 11861                           
 11862                           ;stkvar	_current @ sp[(-7)+4]
 11863  003300  0EFE               	movlw	-2
 11864  003302  C052  FFE3         	movff	btemp+2,plusw1
 11865  003306  0EFD               	movlw	-3
 11866  003308  C051  FFE3         	movff	btemp+1,plusw1
 11867                           
 11868                           ;RF24_c.c: 225: uint8_t blank_len;
 11869                           ;RF24_c.c: 227: data_len = (data_len<rf->payload_size?data_len:rf->payload_size);
 11870                           ;stkvar	_rf @ sp[(-7)+-2]
 11871  00330C  0EF7               	movlw	-9
 11872  00330E  CFE3 F051          	movff	plusw1,btemp+1
 11873  003312  0EF8               	movlw	-8
 11874  003314  CFE3 F052          	movff	plusw1,btemp+2
 11875  003318  0E05               	movlw	5
 11876  00331A  2451               	addwf	btemp+1,w,c
 11877  00331C  6ED9               	movwf	fsr2l,c
 11878  00331E  0E00               	movlw	0
 11879  003320  2052               	addwfc	btemp+2,w,c
 11880  003322  6EDA               	movwf	fsr2h,c
 11881                           
 11882                           ;stkvar	_data_len @ sp[(-7)+-5]
 11883  003324  0EF4               	movlw	-12
 11884  003326  CFE3 F050          	movff	plusw1,btemp
 11885  00332A  50DE               	movf	postinc2,w,c
 11886  00332C  5C50               	subwf	btemp,w,c
 11887  00332E  A0D8               	btfss	status,0,c
 11888  003330  D00E               	goto	l2056
 11889                           
 11890                           ;stkvar	_rf @ sp[(-7)+-2]
 11891  003332  0EF7               	movlw	-9
 11892  003334  CFE3 F051          	movff	plusw1,btemp+1
 11893  003338  0EF8               	movlw	-8
 11894  00333A  CFE3 F052          	movff	plusw1,btemp+2
 11895  00333E  0E05               	movlw	5
 11896  003340  2451               	addwf	btemp+1,w,c
 11897  003342  6ED9               	movwf	fsr2l,c
 11898  003344  0E00               	movlw	0
 11899  003346  2052               	addwfc	btemp+2,w,c
 11900  003348  6EDA               	movwf	fsr2h,c
 11901  00334A  50DF               	movf	indf2,w,c
 11902  00334C  D002               	goto	L16
 11903  00334E                     l2056:
 11904                           
 11905                           ;stkvar	_data_len @ sp[(-7)+-5]
 11906  00334E  0EF4               	movlw	-12
 11907  003350  50E3               	movf	plusw1,w,c
 11908  003352                     L16:
 11909  003352  6E51               	movwf	btemp+1,c
 11910  003354  6A52               	clrf	btemp+2,c
 11911                           
 11912                           ;stkvar	_RF24_write_payload$1857 @ sp[(-7)+2]
 11913  003356  0EFB               	movlw	-5
 11914  003358  C051  FFE3         	movff	btemp+1,plusw1
 11915  00335C  0EFC               	movlw	-4
 11916  00335E  C052  FFE3         	movff	btemp+2,plusw1
 11917                           
 11918                           ;stkvar	_RF24_write_payload$1857 @ sp[(-7)+2]
 11919                           ;stkvar	_data_len @ sp[(-7)+-5]
 11920  003362  0EFB               	movlw	-5
 11921  003364  CFE3 F050          	movff	plusw1,btemp
 11922  003368  0EF4               	movlw	-12
 11923  00336A  C050  FFE3         	movff	btemp,plusw1
 11924                           
 11925                           ;RF24_c.c: 228: blank_len = rf->dynamic_payloads_enabled ? 0 : rf->payload_size - data_l
      +                          en;
 11926                           ;stkvar	_rf @ sp[(-7)+-2]
 11927  00336E  0EF7               	movlw	-9
 11928  003370  CFE3 F051          	movff	plusw1,btemp+1
 11929  003374  0EF8               	movlw	-8
 11930  003376  CFE3 F052          	movff	plusw1,btemp+2
 11931  00337A  0E06               	movlw	6
 11932  00337C  2451               	addwf	btemp+1,w,c
 11933  00337E  6ED9               	movwf	fsr2l,c
 11934  003380  0E00               	movlw	0
 11935  003382  2052               	addwfc	btemp+2,w,c
 11936  003384  6EDA               	movwf	fsr2h,c
 11937  003386  50DF               	movf	indf2,w,c
 11938  003388  A4D8               	btfss	status,2,c
 11939  00338A  D01B               	goto	l2064
 11940                           
 11941                           ;stkvar	_rf @ sp[(-7)+-2]
 11942  00338C  0EF7               	movlw	-9
 11943  00338E  CFE3 F051          	movff	plusw1,btemp+1
 11944  003392  0EF8               	movlw	-8
 11945  003394  CFE3 F052          	movff	plusw1,btemp+2
 11946  003398  0E05               	movlw	5
 11947  00339A  2451               	addwf	btemp+1,w,c
 11948  00339C  6ED9               	movwf	fsr2l,c
 11949  00339E  0E00               	movlw	0
 11950  0033A0  2052               	addwfc	btemp+2,w,c
 11951  0033A2  6EDA               	movwf	fsr2h,c
 11952  0033A4  50DF               	movf	indf2,w,c
 11953  0033A6  6E51               	movwf	btemp+1,c
 11954  0033A8  6A52               	clrf	btemp+2,c
 11955                           
 11956                           ;stkvar	_data_len @ sp[(-7)+-5]
 11957  0033AA  0EF4               	movlw	-12
 11958  0033AC  50E3               	movf	plusw1,w,c
 11959  0033AE  5E51               	subwf	btemp+1,f,c
 11960  0033B0  0E00               	movlw	0
 11961  0033B2  5A52               	subwfb	btemp+2,f,c
 11962                           
 11963                           ;stkvar	_RF24_write_payload$1858 @ sp[(-7)+0]
 11964  0033B4  0EF9               	movlw	-7
 11965  0033B6  C051  FFE3         	movff	btemp+1,plusw1
 11966  0033BA  0EFA               	movlw	-6
 11967  0033BC  C052  FFE3         	movff	btemp+2,plusw1
 11968  0033C0  D004               	goto	l2066
 11969  0033C2                     l2064:
 11970                           
 11971                           ;stkvar	_RF24_write_payload$1858 @ sp[(-7)+0]
 11972  0033C2  0EF9               	movlw	-7
 11973  0033C4  6AE3               	clrf	plusw1,c
 11974  0033C6  0EFA               	movlw	-6
 11975  0033C8  6AE3               	clrf	plusw1,c
 11976  0033CA                     l2066:
 11977                           
 11978                           ;stkvar	_RF24_write_payload$1858 @ sp[(-7)+0]
 11979                           ;stkvar	_blank_len @ sp[(-7)+6]
 11980  0033CA  0EF9               	movlw	-7
 11981  0033CC  CFE3 F050          	movff	plusw1,btemp
 11982  0033D0  0EFF               	movlw	-1
 11983  0033D2  C050  FFE3         	movff	btemp,plusw1
 11984                           
 11985                           ;RF24_c.c: 231: ;
 11986                           ;RF24_c.c: 252: RF24_beginTransaction(rf);
 11987                           ;stkvar	_rf @ sp[(-7)+-2]
 11988  0033D6  0EF7               	movlw	-9
 11989  0033D8  CFE3 FFE6          	movff	plusw1,postinc1
 11990  0033DC  CFE3 FFE6          	movff	plusw1,postinc1
 11991  0033E0  EC28  F028         	call	_RF24_beginTransaction	;wreg free
 11992                           
 11993                           ;stkvar	_writeType @ sp[(-7)+-6]
 11994  0033E4  0EF3               	movlw	-13
 11995  0033E6  50E3               	movf	plusw1,w,c
 11996  0033E8  6EE6               	movwf	postinc1,c
 11997  0033EA  EC40  F028         	call	_SPI_transfer	;wreg free
 11998                           
 11999                           ;RF24_c.c: 254: while ( data_len-- ) {
 12000  0033EE  D017               	goto	l2074
 12001  0033F0                     l2072:
 12002                           
 12003                           ;RF24_c.c: 255: SPI_transfer(*current++);
 12004                           ;stkvar	_current @ sp[(-7)+4]
 12005  0033F0  50E1               	movf	fsr1l,w,c
 12006  0033F2  0FFD               	addlw	-3
 12007  0033F4  6ED9               	movwf	fsr2l,c
 12008  0033F6  50E2               	movf	fsr1h,w,c
 12009  0033F8  6EDA               	movwf	fsr2h,c
 12010  0033FA  0EFF               	movlw	255
 12011  0033FC  22DA               	addwfc	fsr2h,f,c
 12012  0033FE  CFDF F051          	movff	indf2,btemp+1
 12013  003402  0E01               	movlw	1
 12014  003404  26DE               	addwf	postinc2,f,c
 12015  003406  CFDF F052          	movff	indf2,btemp+2
 12016  00340A  0E00               	movlw	0
 12017  00340C  22DD               	addwfc	postdec2,f,c
 12018  00340E  C051  FFD9         	movff	btemp+1,fsr2l
 12019  003412  C052  FFDA         	movff	btemp+2,fsr2h
 12020  003416  50DF               	movf	indf2,w,c
 12021  003418  6EE6               	movwf	postinc1,c
 12022  00341A  EC40  F028         	call	_SPI_transfer	;wreg free
 12023  00341E                     l2074:
 12024                           
 12025                           ;stkvar	_data_len @ sp[(-7)+-5]
 12026  00341E  0EF4               	movlw	-12
 12027  003420  06E3               	decf	plusw1,f,c
 12028  003422  0EF4               	movlw	-12
 12029  003424  28E3               	incf	plusw1,w,c
 12030  003426  B4D8               	btfsc	status,2,c
 12031  003428  D005               	goto	l2078
 12032  00342A  D7E2               	goto	l2072
 12033  00342C                     l2076:
 12034                           
 12035                           ;RF24_c.c: 258: SPI_transfer(0);
 12036  00342C  0E00               	movlw	0
 12037  00342E  6EE6               	movwf	postinc1,c
 12038  003430  EC40  F028         	call	_SPI_transfer	;wreg free
 12039  003434                     l2078:
 12040                           
 12041                           ;stkvar	_blank_len @ sp[(-7)+6]
 12042  003434  0EFF               	movlw	-1
 12043  003436  06E3               	decf	plusw1,f,c
 12044  003438  0EFF               	movlw	-1
 12045  00343A  28E3               	incf	plusw1,w,c
 12046  00343C  A4D8               	btfss	status,2,c
 12047  00343E  D7F6               	goto	l2076
 12048                           
 12049                           ;RF24_c.c: 259: }
 12050                           ;RF24_c.c: 260: RF24_endTransaction(rf);
 12051                           ;stkvar	_rf @ sp[(-7)+-2]
 12052  003440  0EF7               	movlw	-9
 12053  003442  CFE3 FFE6          	movff	plusw1,postinc1
 12054  003446  CFE3 FFE6          	movff	plusw1,postinc1
 12055  00344A  EC1C  F028         	call	_RF24_endTransaction	;wreg free
 12056                           
 12057                           ; _RF24_write_payload: autosize = 7, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 6, argsize = 6, vargsize = 0
 12058  00344E  0EF3               	movlw	243
 12059  003450  26E1               	addwf	fsr1l,f,c
 12060  003452  0EFF               	movlw	255
 12061  003454  22E2               	addwfc	fsr1h,f,c
 12062  003456  0012               	return		;funcret
 12063  003458                     __end_of_RF24_write_payload:
 12064                           	opt stack 0
 12065                           tblptru	equ	0xFF8
 12066                           tblptrh	equ	0xFF7
 12067                           tblptrl	equ	0xFF6
 12068                           tablat	equ	0xFF5
 12069                           prodh	equ	0xFF4
 12070                           prodl	equ	0xFF3
 12071                           intcon	equ	0xFF2
 12072                           indf0	equ	0xFEF
 12073                           postinc0	equ	0xFEE
 12074                           postdec0	equ	0xFED
 12075                           fsr0h	equ	0xFEA
 12076                           fsr0l	equ	0xFE9
 12077                           wreg	equ	0xFE8
 12078                           postinc1	equ	0xFE6
 12079                           postdec1	equ	0xFE5
 12080                           plusw1	equ	0xFE3
 12081                           fsr1h	equ	0xFE2
 12082                           fsr1l	equ	0xFE1
 12083                           indf2	equ	0xFDF
 12084                           postinc2	equ	0xFDE
 12085                           postdec2	equ	0xFDD
 12086                           plusw2	equ	0xFDB
 12087                           fsr2h	equ	0xFDA
 12088                           fsr2l	equ	0xFD9
 12089                           status	equ	0xFD8
 12090                           
 12091 ;; *************** function _RF24_openWritingPipe_d *****************
 12092 ;; Defined at:
 12093 ;;		line 1141 in file "../../../RF24_c/RF24_c.c"
 12094 ;; Parameters:    Size  Location     Type
 12095 ;;  rf              2  [STACK] PTR struct RF24
 12096 ;;		 -> radio(22), 
 12097 ;;  value           4  [STACK] unsigned long 
 12098 ;; Auto vars:     Size  Location     Type
 12099 ;;		None
 12100 ;; Return value:  Size  Location     Type
 12101 ;;                  1  [STACK] void 
 12102 ;; Registers used:
 12103 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 12104 ;; Tracked objects:
 12105 ;;		On entry : 0/0
 12106 ;;		On exit  : 0/0
 12107 ;;		Unchanged: 0/0
 12108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12111 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12112 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12113 ;;Total ram usage:        0 bytes
 12114 ;; Hardware stack levels used:    1
 12115 ;; Hardware stack levels required when called:    5
 12116 ;; This function calls:
 12117 ;;		_RF24_write_register_c_d
 12118 ;;		_RF24_write_register_d
 12119 ;; This function is called by:
 12120 ;;		_RF24N_write_to_pipe
 12121 ;; This function uses a reentrant model
 12122 ;;
 12123                           
 12124                           	psect	text45
 12125  00430C                     __ptext45:
 12126                           	opt stack 0
 12127  00430C                     _RF24_openWritingPipe_d:
 12128                           	opt stack 19
 12129                           
 12130                           ;RF24_c.c: 1146: RF24_write_register_c_d(rf,0x0A, ((uint8_t*)(&value)), rf->addr_width);
 12131                           ;stkvar	_rf @ sp[(0)+-2]
 12132                           
 12133                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
 12134                           ;incstack = 0
 12135  00430C  0EFE               	movlw	-2
 12136  00430E  CFE3 F051          	movff	plusw1,btemp+1
 12137  004312  0EFF               	movlw	-1
 12138  004314  CFE3 F052          	movff	plusw1,btemp+2
 12139  004318  0E0C               	movlw	12
 12140  00431A  2451               	addwf	btemp+1,w,c
 12141  00431C  6ED9               	movwf	fsr2l,c
 12142  00431E  0E00               	movlw	0
 12143  004320  2052               	addwfc	btemp+2,w,c
 12144  004322  6EDA               	movwf	fsr2h,c
 12145  004324  50DF               	movf	indf2,w,c
 12146  004326  6EE6               	movwf	postinc1,c
 12147                           
 12148                           ;stkvar	_value @ sp[(-1)+-6]
 12149  004328  0EF9               	movlw	249
 12150  00432A  24E1               	addwf	fsr1l,w,c
 12151  00432C  6EE6               	movwf	postinc1,c
 12152  00432E  0EFF               	movlw	255
 12153  004330  20E2               	addwfc	fsr1h,w,c
 12154  004332  6EE6               	movwf	postinc1,c
 12155  004334  0E0A               	movlw	10
 12156  004336  6EE6               	movwf	postinc1,c
 12157                           
 12158                           ;stkvar	_rf @ sp[(-4)+-2]
 12159  004338  0EFA               	movlw	-6
 12160  00433A  CFE3 FFE6          	movff	plusw1,postinc1
 12161  00433E  CFE3 FFE6          	movff	plusw1,postinc1
 12162  004342  ECC0  F023         	call	_RF24_write_register_c_d	;wreg free
 12163                           
 12164                           ;RF24_c.c: 1147: RF24_write_register_c_d(rf,0x10, ((uint8_t*)(&value)), rf->addr_width);
 12165                           ;stkvar	_rf @ sp[(0)+-2]
 12166  004346  0EFE               	movlw	-2
 12167  004348  CFE3 F051          	movff	plusw1,btemp+1
 12168  00434C  0EFF               	movlw	-1
 12169  00434E  CFE3 F052          	movff	plusw1,btemp+2
 12170  004352  0E0C               	movlw	12
 12171  004354  2451               	addwf	btemp+1,w,c
 12172  004356  6ED9               	movwf	fsr2l,c
 12173  004358  0E00               	movlw	0
 12174  00435A  2052               	addwfc	btemp+2,w,c
 12175  00435C  6EDA               	movwf	fsr2h,c
 12176  00435E  50DF               	movf	indf2,w,c
 12177  004360  6EE6               	movwf	postinc1,c
 12178                           
 12179                           ;stkvar	_value @ sp[(-1)+-6]
 12180  004362  0EF9               	movlw	249
 12181  004364  24E1               	addwf	fsr1l,w,c
 12182  004366  6EE6               	movwf	postinc1,c
 12183  004368  0EFF               	movlw	255
 12184  00436A  20E2               	addwfc	fsr1h,w,c
 12185  00436C  6EE6               	movwf	postinc1,c
 12186  00436E  0E10               	movlw	16
 12187  004370  6EE6               	movwf	postinc1,c
 12188                           
 12189                           ;stkvar	_rf @ sp[(-4)+-2]
 12190  004372  0EFA               	movlw	-6
 12191  004374  CFE3 FFE6          	movff	plusw1,postinc1
 12192  004378  CFE3 FFE6          	movff	plusw1,postinc1
 12193  00437C  ECC0  F023         	call	_RF24_write_register_c_d	;wreg free
 12194                           
 12195                           ;RF24_c.c: 1152: RF24_write_register_d(rf,0x11,rf->payload_size);
 12196                           ;stkvar	_rf @ sp[(0)+-2]
 12197  004380  0EFE               	movlw	-2
 12198  004382  CFE3 F051          	movff	plusw1,btemp+1
 12199  004386  0EFF               	movlw	-1
 12200  004388  CFE3 F052          	movff	plusw1,btemp+2
 12201  00438C  0E05               	movlw	5
 12202  00438E  2451               	addwf	btemp+1,w,c
 12203  004390  6ED9               	movwf	fsr2l,c
 12204  004392  0E00               	movlw	0
 12205  004394  2052               	addwfc	btemp+2,w,c
 12206  004396  6EDA               	movwf	fsr2h,c
 12207  004398  50DF               	movf	indf2,w,c
 12208  00439A  6EE6               	movwf	postinc1,c
 12209  00439C  0E11               	movlw	17
 12210  00439E  6EE6               	movwf	postinc1,c
 12211                           
 12212                           ;stkvar	_rf @ sp[(-2)+-2]
 12213  0043A0  0EFC               	movlw	-4
 12214  0043A2  CFE3 FFE6          	movff	plusw1,postinc1
 12215  0043A6  CFE3 FFE6          	movff	plusw1,postinc1
 12216  0043AA  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 12217                           
 12218                           ; _RF24_openWritingPipe_d: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 6, argsize = 6, vargsize = 0
 12219  0043AE  0EFA               	movlw	250
 12220  0043B0  26E1               	addwf	fsr1l,f,c
 12221  0043B2  0EFF               	movlw	255
 12222  0043B4  22E2               	addwfc	fsr1h,f,c
 12223  0043B6  0012               	return		;funcret
 12224  0043B8                     __end_of_RF24_openWritingPipe_d:
 12225                           	opt stack 0
 12226                           tblptru	equ	0xFF8
 12227                           tblptrh	equ	0xFF7
 12228                           tblptrl	equ	0xFF6
 12229                           tablat	equ	0xFF5
 12230                           prodh	equ	0xFF4
 12231                           prodl	equ	0xFF3
 12232                           intcon	equ	0xFF2
 12233                           indf0	equ	0xFEF
 12234                           postinc0	equ	0xFEE
 12235                           postdec0	equ	0xFED
 12236                           fsr0h	equ	0xFEA
 12237                           fsr0l	equ	0xFE9
 12238                           wreg	equ	0xFE8
 12239                           postinc1	equ	0xFE6
 12240                           postdec1	equ	0xFE5
 12241                           plusw1	equ	0xFE3
 12242                           fsr1h	equ	0xFE2
 12243                           fsr1l	equ	0xFE1
 12244                           indf2	equ	0xFDF
 12245                           postinc2	equ	0xFDE
 12246                           postdec2	equ	0xFDD
 12247                           plusw2	equ	0xFDB
 12248                           fsr2h	equ	0xFDA
 12249                           fsr2l	equ	0xFD9
 12250                           status	equ	0xFD8
 12251                           
 12252 ;; *************** function _RF24N_pipe_address *****************
 12253 ;; Defined at:
 12254 ;;		line 1336 in file "../../RF24Network_c.c"
 12255 ;; Parameters:    Size  Location     Type
 12256 ;;  rn              2  [STACK] PTR struct .
 12257 ;;		 -> network(372), 
 12258 ;;  node            2  [STACK] unsigned int 
 12259 ;;  pipe            1  [STACK] unsigned char 
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;  result          4  [STACK] unsigned long 
 12262 ;;  out             2  [STACK] PTR unsigned char 
 12263 ;;		 -> result(4), 
 12264 ;;  dec             2  [STACK] unsigned int 
 12265 ;;  count           1  [STACK] unsigned char 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  4  [STACK] unsigned long 
 12268 ;; Registers used:
 12269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp
      ++9, btemp+10, btemp+11, prodl
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;Total ram usage:        0 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    1
 12282 ;; This function calls:
 12283 ;;		Nothing
 12284 ;; This function is called by:
 12285 ;;		_RF24N_begin_d
 12286 ;;		_RF24N_write_to_pipe
 12287 ;; This function uses a reentrant model
 12288 ;;
 12289                           
 12290                           	psect	text46
 12291  002FF0                     __ptext46:
 12292                           	opt stack 0
 12293  002FF0                     _RF24N_pipe_address:
 12294                           	opt stack 0
 12295                           
 12296                           ; autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 var
      +                          gsize = 0, retsize = 0
 12297  002FF0  0E09               	movlw	9
 12298  002FF2  26E1               	addwf	fsr1l,f,c
 12299  002FF4  0E00               	movlw	0
 12300  002FF6  22E2               	addwfc	fsr1h,f,c
 12301                           
 12302                           ;RF24Network_c.c: 1339: static uint8_t address_translation[] = { 0xc3,0x3c,0x33,0xce,0x3
      +                          e,0xe3,0xec };
 12303                           ;RF24Network_c.c: 1340: uint64_t result = 0xCCCCCCCCCCLL;
 12304                           
 12305                           ;incstack = 0
 12306  002FF8  0ECC               	movlw	204
 12307  002FFA  6E58               	movwf	btemp+8,c
 12308  002FFC  0ECC               	movlw	204
 12309  002FFE  6E59               	movwf	btemp+9,c
 12310  003000  0ECC               	movlw	204
 12311  003002  6E5A               	movwf	btemp+10,c
 12312  003004  0ECC               	movlw	204
 12313  003006  6E5B               	movwf	btemp+11,c
 12314                           
 12315                           ;stkvar	_result @ sp[(-9)+0]
 12316  003008  0EF7               	movlw	-9
 12317  00300A  C058  FFE3         	movff	btemp+8,plusw1
 12318  00300E  0EF8               	movlw	-8
 12319  003010  C059  FFE3         	movff	btemp+9,plusw1
 12320  003014  0EF9               	movlw	-7
 12321  003016  C05A  FFE3         	movff	btemp+10,plusw1
 12322  00301A  0EFA               	movlw	-6
 12323  00301C  C05B  FFE3         	movff	btemp+11,plusw1
 12324                           
 12325                           ;RF24Network_c.c: 1341: uint8_t* out = (uint8_t*)(&result);
 12326                           ;stkvar	_result @ sp[(-9)+0]
 12327  003020  0EF7               	movlw	247
 12328  003022  24E1               	addwf	fsr1l,w,c
 12329  003024  6E51               	movwf	btemp+1,c
 12330  003026  0EFF               	movlw	255
 12331  003028  20E2               	addwfc	fsr1h,w,c
 12332  00302A  6E52               	movwf	btemp+2,c
 12333                           
 12334                           ;stkvar	_out @ sp[(-9)+4]
 12335  00302C  0EFC               	movlw	-4
 12336  00302E  C052  FFE3         	movff	btemp+2,plusw1
 12337  003032  0EFB               	movlw	-5
 12338  003034  C051  FFE3         	movff	btemp+1,plusw1
 12339                           
 12340                           ;RF24Network_c.c: 1344: uint8_t count = 1; uint16_t dec = node;
 12341                           ;stkvar	_count @ sp[(-9)+8]
 12342  003038  0EFF               	movlw	-1
 12343  00303A  6AE3               	clrf	plusw1,c
 12344  00303C  2AE3               	incf	plusw1,f,c
 12345                           
 12346                           ;stkvar	_node @ sp[(-9)+-4]
 12347                           ;stkvar	_dec @ sp[(-9)+6]
 12348  00303E  0EF3               	movlw	-13
 12349  003040  CFE3 F050          	movff	plusw1,btemp
 12350  003044  0EFD               	movlw	-3
 12351  003046  C050  FFE3         	movff	btemp,plusw1
 12352  00304A  0EF4               	movlw	-12
 12353  00304C  CFE3 F050          	movff	plusw1,btemp
 12354  003050  0EFE               	movlw	-2
 12355  003052  C050  FFE3         	movff	btemp,plusw1
 12356                           
 12357                           ;RF24Network_c.c: 1346: while(dec){
 12358  003056  D040               	goto	l2174
 12359  003058                     l2164:
 12360                           
 12361                           ;RF24Network_c.c: 1348: if(pipe != 0 || !node)
 12362                           ;stkvar	_pipe @ sp[(-9)+-5]
 12363  003058  0EF2               	movlw	-14
 12364  00305A  50E3               	movf	plusw1,w,c
 12365  00305C  A4D8               	btfss	status,2,c
 12366  00305E  D008               	goto	l2168
 12367                           
 12368                           ;stkvar	_node @ sp[(-9)+-4]
 12369  003060  0EF3               	movlw	-13
 12370  003062  CFE3 F050          	movff	plusw1,btemp
 12371  003066  0EF4               	movlw	-12
 12372  003068  50E3               	movf	plusw1,w,c
 12373  00306A  1050               	iorwf	btemp,w,c
 12374  00306C  A4D8               	btfss	status,2,c
 12375  00306E  D021               	goto	l2170
 12376  003070                     l2168:
 12377                           
 12378                           ;RF24Network_c.c: 1350: out[count]=address_translation[(dec % 8)];
 12379                           ;stkvar	_dec @ sp[(-9)+6]
 12380  003070  0EFD               	movlw	-3
 12381  003072  CFE3 F051          	movff	plusw1,btemp+1
 12382  003076  0EFE               	movlw	-2
 12383  003078  CFE3 F052          	movff	plusw1,btemp+2
 12384  00307C  0E07               	movlw	7
 12385  00307E  1651               	andwf	btemp+1,f,c
 12386  003080  0E00               	movlw	0
 12387  003082  1652               	andwf	btemp+2,f,c
 12388  003084  0E5C               	movlw	low RF24N_pipe_address@address_translation
 12389  003086  2451               	addwf	btemp+1,w,c
 12390  003088  6ED9               	movwf	fsr2l,c
 12391  00308A  0E00               	movlw	high RF24N_pipe_address@address_translation
 12392  00308C  2052               	addwfc	btemp+2,w,c
 12393  00308E  6EDA               	movwf	fsr2h,c
 12394                           
 12395                           ;stkvar	_count @ sp[(-9)+8]
 12396  003090  0EFF               	movlw	-1
 12397  003092  CFE3 F05B          	movff	plusw1,btemp+11
 12398                           
 12399                           ;stkvar	_out @ sp[(-9)+4]
 12400  003096  0EFB               	movlw	-5
 12401  003098  CFE3 F051          	movff	plusw1,btemp+1
 12402  00309C  0EFC               	movlw	-4
 12403  00309E  CFE3 F052          	movff	plusw1,btemp+2
 12404  0030A2  505B               	movf	btemp+11,w,c
 12405  0030A4  2451               	addwf	btemp+1,w,c
 12406  0030A6  6EE9               	movwf	fsr0l,c
 12407  0030A8  0E00               	movlw	0
 12408  0030AA  2052               	addwfc	btemp+2,w,c
 12409  0030AC  6EEA               	movwf	fsr0h,c
 12410  0030AE  CFDF FFEF          	movff	indf2,indf0
 12411  0030B2                     l2170:
 12412                           
 12413                           ;RF24Network_c.c: 1352: dec /= 8;
 12414  0030B2  0E03               	movlw	3
 12415  0030B4  6E5B               	movwf	btemp+11,c
 12416                           
 12417                           ;stkvar	_dec @ sp[(-9)+6]
 12418  0030B6  50E1               	movf	fsr1l,w,c
 12419  0030B8  0FFD               	addlw	-3
 12420  0030BA  6ED9               	movwf	fsr2l,c
 12421  0030BC  50E2               	movf	fsr1h,w,c
 12422  0030BE  6EDA               	movwf	fsr2h,c
 12423  0030C0  0EFF               	movlw	255
 12424  0030C2  22DA               	addwfc	fsr2h,f,c
 12425  0030C4  285B               	incf	btemp+11,w,c
 12426  0030C6  D004               	goto	u570
 12427  0030C8                     u575:
 12428  0030C8  2AD9               	incf	fsr2l,f,c
 12429  0030CA  90D8               	bcf	status,0,c
 12430  0030CC  32DD               	rrcf	postdec2,f,c
 12431  0030CE  32DF               	rrcf	indf2,f,c
 12432  0030D0                     u570:
 12433  0030D0  2EE8               	decfsz	wreg,f,c
 12434  0030D2  D7FA               	goto	u575
 12435                           
 12436                           ;RF24Network_c.c: 1353: count++;
 12437                           ;stkvar	_count @ sp[(-9)+8]
 12438  0030D4  0EFF               	movlw	-1
 12439  0030D6  2AE3               	incf	plusw1,f,c
 12440  0030D8                     l2174:
 12441                           
 12442                           ;stkvar	_dec @ sp[(-9)+6]
 12443  0030D8  0EFD               	movlw	-3
 12444  0030DA  CFE3 F050          	movff	plusw1,btemp
 12445  0030DE  0EFE               	movlw	-2
 12446  0030E0  50E3               	movf	plusw1,w,c
 12447  0030E2  1050               	iorwf	btemp,w,c
 12448  0030E4  A4D8               	btfss	status,2,c
 12449  0030E6  D7B8               	goto	l2164
 12450                           
 12451                           ;RF24Network_c.c: 1354: }
 12452                           ;RF24Network_c.c: 1357: if(pipe != 0 || !node)
 12453                           ;stkvar	_pipe @ sp[(-9)+-5]
 12454  0030E8  0EF2               	movlw	-14
 12455  0030EA  50E3               	movf	plusw1,w,c
 12456  0030EC  A4D8               	btfss	status,2,c
 12457  0030EE  D008               	goto	l2180
 12458                           
 12459                           ;stkvar	_node @ sp[(-9)+-4]
 12460  0030F0  0EF3               	movlw	-13
 12461  0030F2  CFE3 F050          	movff	plusw1,btemp
 12462  0030F6  0EF4               	movlw	-12
 12463  0030F8  50E3               	movf	plusw1,w,c
 12464  0030FA  1050               	iorwf	btemp,w,c
 12465  0030FC  A4D8               	btfss	status,2,c
 12466  0030FE  D011               	goto	l2182
 12467  003100                     l2180:
 12468                           
 12469                           ;RF24Network_c.c: 1359: out[0] = address_translation[pipe];
 12470                           ;stkvar	_pipe @ sp[(-9)+-5]
 12471  003100  0EF2               	movlw	-14
 12472  003102  50E3               	movf	plusw1,w,c
 12473  003104  6E51               	movwf	btemp+1,c
 12474  003106  6A52               	clrf	btemp+2,c
 12475  003108  0E5C               	movlw	low RF24N_pipe_address@address_translation
 12476  00310A  2451               	addwf	btemp+1,w,c
 12477  00310C  6ED9               	movwf	fsr2l,c
 12478  00310E  0E00               	movlw	high RF24N_pipe_address@address_translation
 12479  003110  2052               	addwfc	btemp+2,w,c
 12480  003112  6EDA               	movwf	fsr2h,c
 12481                           
 12482                           ;stkvar	_out @ sp[(-9)+4]
 12483  003114  0EFB               	movlw	-5
 12484  003116  CFE3 FFE9          	movff	plusw1,fsr0l
 12485  00311A  0EFC               	movlw	-4
 12486  00311C  CFE3 FFEA          	movff	plusw1,fsr0h
 12487  003120  D016               	goto	L17
 12488  003122                     l2182:
 12489                           
 12490                           ;RF24Network_c.c: 1361: else
 12491                           ;RF24Network_c.c: 1362: out[1] = address_translation[count-1];
 12492                           ;stkvar	_count @ sp[(-9)+8]
 12493  003122  0EFF               	movlw	-1
 12494  003124  50E3               	movf	plusw1,w,c
 12495  003126  6E51               	movwf	btemp+1,c
 12496  003128  6A52               	clrf	btemp+2,c
 12497  00312A  0E5B               	movlw	low (RF24N_pipe_address@address_translation+65535)
 12498  00312C  2451               	addwf	btemp+1,w,c
 12499  00312E  6ED9               	movwf	fsr2l,c
 12500  003130  0E00               	movlw	high (RF24N_pipe_address@address_translation+65535)
 12501  003132  2052               	addwfc	btemp+2,w,c
 12502  003134  6EDA               	movwf	fsr2h,c
 12503                           
 12504                           ;stkvar	_out @ sp[(-9)+4]
 12505  003136  0EFB               	movlw	-5
 12506  003138  CFE3 F051          	movff	plusw1,btemp+1
 12507  00313C  0EFC               	movlw	-4
 12508  00313E  CFE3 F052          	movff	plusw1,btemp+2
 12509  003142  0E01               	movlw	1
 12510  003144  2451               	addwf	btemp+1,w,c
 12511  003146  6EE9               	movwf	fsr0l,c
 12512  003148  0E00               	movlw	0
 12513  00314A  2052               	addwfc	btemp+2,w,c
 12514  00314C  6EEA               	movwf	fsr0h,c
 12515  00314E                     L17:
 12516  00314E  CFDF FFEF          	movff	indf2,indf0
 12517                           
 12518                           ;RF24Network_c.c: 1370: ;
 12519                           ;RF24Network_c.c: 1373: return result;
 12520                           ;stkvar	_result @ sp[(-9)+0]
 12521  003152  0EF7               	movlw	-9
 12522  003154  CFE3 F050          	movff	plusw1,btemp
 12523  003158  0EF8               	movlw	-8
 12524  00315A  CFE3 F051          	movff	plusw1,btemp+1
 12525  00315E  0EF9               	movlw	-7
 12526  003160  CFE3 F052          	movff	plusw1,btemp+2
 12527  003164  0EFA               	movlw	-6
 12528  003166  CFE3 F053          	movff	plusw1,btemp+3
 12529                           
 12530                           ; _RF24N_pipe_address: autosize = 9, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 5, argsize = 5, vargsize = 0
 12531  00316A  0EF2               	movlw	242
 12532  00316C  26E1               	addwf	fsr1l,f,c
 12533  00316E  0EFF               	movlw	255
 12534  003170  22E2               	addwfc	fsr1h,f,c
 12535  003172  0012               	return		;funcret
 12536  003174                     __end_of_RF24N_pipe_address:
 12537                           	opt stack 0
 12538                           tblptru	equ	0xFF8
 12539                           tblptrh	equ	0xFF7
 12540                           tblptrl	equ	0xFF6
 12541                           tablat	equ	0xFF5
 12542                           prodh	equ	0xFF4
 12543                           prodl	equ	0xFF3
 12544                           intcon	equ	0xFF2
 12545                           indf0	equ	0xFEF
 12546                           postinc0	equ	0xFEE
 12547                           postdec0	equ	0xFED
 12548                           fsr0h	equ	0xFEA
 12549                           fsr0l	equ	0xFE9
 12550                           wreg	equ	0xFE8
 12551                           postinc1	equ	0xFE6
 12552                           postdec1	equ	0xFE5
 12553                           plusw1	equ	0xFE3
 12554                           fsr1h	equ	0xFE2
 12555                           fsr1l	equ	0xFE1
 12556                           indf2	equ	0xFDF
 12557                           postinc2	equ	0xFDE
 12558                           postdec2	equ	0xFDD
 12559                           plusw2	equ	0xFDB
 12560                           fsr2h	equ	0xFDA
 12561                           fsr2l	equ	0xFD9
 12562                           status	equ	0xFD8
 12563                           
 12564 ;; *************** function _RF24_write_register_c_d *****************
 12565 ;; Defined at:
 12566 ;;		line 159 in file "../../../RF24_c/RF24_c.c"
 12567 ;; Parameters:    Size  Location     Type
 12568 ;;  rf              2  [STACK] PTR struct RF24
 12569 ;;		 -> radio(22), 
 12570 ;;  reg             1  [STACK] unsigned char 
 12571 ;;  buf             2  [STACK] PTR const unsigned char 
 12572 ;;		 -> radio.pipe0_reading_address(5), address(4), value(4), radio(22), 
 12573 ;;  len             1  [STACK] unsigned char 
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;  status          1    0        unsigned char 
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1  [STACK] unsigned char 
 12578 ;; Registers used:
 12579 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;Total ram usage:        0 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    4
 12592 ;; This function calls:
 12593 ;;		_RF24_beginTransaction
 12594 ;;		_RF24_endTransaction
 12595 ;;		_SPI_transfer
 12596 ;; This function is called by:
 12597 ;;		_RF24_startListening
 12598 ;;		_RF24_openWritingPipe_d
 12599 ;;		_RF24_openReadingPipe_d
 12600 ;; This function uses a reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text47
 12604  004780                     __ptext47:
 12605                           	opt stack 0
 12606  004780                     _RF24_write_register_c_d:
 12607                           	opt stack 23
 12608                           
 12609                           ;RF24_c.c: 161: uint8_t status;
 12610                           ;RF24_c.c: 178: RF24_beginTransaction(rf);
 12611                           ;stkvar	_rf @ sp[(0)+-2]
 12612                           
 12613                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 6, argsize = 6 var
      +                          gsize = 0, retsize = 0
 12614                           ;incstack = 0
 12615  004780  0EFE               	movlw	-2
 12616  004782  CFE3 FFE6          	movff	plusw1,postinc1
 12617  004786  CFE3 FFE6          	movff	plusw1,postinc1
 12618  00478A  EC28  F028         	call	_RF24_beginTransaction	;wreg free
 12619                           
 12620                           ;stkvar	_reg @ sp[(0)+-3]
 12621  00478E  0EFD               	movlw	-3
 12622  004790  50E3               	movf	plusw1,w,c
 12623  004792  0B1F               	andlw	31
 12624  004794  0920               	iorlw	32
 12625  004796  6EE6               	movwf	postinc1,c
 12626  004798  EC40  F028         	call	_SPI_transfer	;wreg free
 12627                           
 12628                           ;RF24_c.c: 180: while ( len-- )
 12629  00479C  D017               	goto	l2122
 12630  00479E                     l2120:
 12631                           
 12632                           ;RF24_c.c: 181: SPI_transfer(*buf++);
 12633                           ;stkvar	_buf @ sp[(0)+-5]
 12634  00479E  50E1               	movf	fsr1l,w,c
 12635  0047A0  0FFB               	addlw	-5
 12636  0047A2  6ED9               	movwf	fsr2l,c
 12637  0047A4  50E2               	movf	fsr1h,w,c
 12638  0047A6  6EDA               	movwf	fsr2h,c
 12639  0047A8  0EFF               	movlw	255
 12640  0047AA  22DA               	addwfc	fsr2h,f,c
 12641  0047AC  CFDF F051          	movff	indf2,btemp+1
 12642  0047B0  0E01               	movlw	1
 12643  0047B2  26DE               	addwf	postinc2,f,c
 12644  0047B4  CFDF F052          	movff	indf2,btemp+2
 12645  0047B8  0E00               	movlw	0
 12646  0047BA  22DD               	addwfc	postdec2,f,c
 12647  0047BC  C051  FFD9         	movff	btemp+1,fsr2l
 12648  0047C0  C052  FFDA         	movff	btemp+2,fsr2h
 12649  0047C4  50DF               	movf	indf2,w,c
 12650  0047C6  6EE6               	movwf	postinc1,c
 12651  0047C8  EC40  F028         	call	_SPI_transfer	;wreg free
 12652  0047CC                     l2122:
 12653                           
 12654                           ;stkvar	_len @ sp[(0)+-6]
 12655  0047CC  0EFA               	movlw	-6
 12656  0047CE  06E3               	decf	plusw1,f,c
 12657  0047D0  0EFA               	movlw	-6
 12658  0047D2  28E3               	incf	plusw1,w,c
 12659  0047D4  A4D8               	btfss	status,2,c
 12660  0047D6  D7E3               	goto	l2120
 12661                           
 12662                           ;RF24_c.c: 182: RF24_endTransaction(rf);
 12663                           ;stkvar	_rf @ sp[(0)+-2]
 12664  0047D8  0EFE               	movlw	-2
 12665  0047DA  CFE3 FFE6          	movff	plusw1,postinc1
 12666  0047DE  CFE3 FFE6          	movff	plusw1,postinc1
 12667  0047E2  EC1C  F028         	call	_RF24_endTransaction	;wreg free
 12668                           
 12669                           ; _RF24_write_register_c_d: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pa
      +                          rsize = 6, argsize = 6, vargsize = 0
 12670  0047E6  0EFA               	movlw	250
 12671  0047E8  26E1               	addwf	fsr1l,f,c
 12672  0047EA  0EFF               	movlw	255
 12673  0047EC  22E2               	addwfc	fsr1h,f,c
 12674  0047EE  0012               	return		;funcret
 12675  0047F0                     __end_of_RF24_write_register_c_d:
 12676                           	opt stack 0
 12677                           tblptru	equ	0xFF8
 12678                           tblptrh	equ	0xFF7
 12679                           tblptrl	equ	0xFF6
 12680                           tablat	equ	0xFF5
 12681                           prodh	equ	0xFF4
 12682                           prodl	equ	0xFF3
 12683                           intcon	equ	0xFF2
 12684                           indf0	equ	0xFEF
 12685                           postinc0	equ	0xFEE
 12686                           postdec0	equ	0xFED
 12687                           fsr0h	equ	0xFEA
 12688                           fsr0l	equ	0xFE9
 12689                           wreg	equ	0xFE8
 12690                           postinc1	equ	0xFE6
 12691                           postdec1	equ	0xFE5
 12692                           plusw1	equ	0xFE3
 12693                           fsr1h	equ	0xFE2
 12694                           fsr1l	equ	0xFE1
 12695                           indf2	equ	0xFDF
 12696                           postinc2	equ	0xFDE
 12697                           postdec2	equ	0xFDD
 12698                           plusw2	equ	0xFDB
 12699                           fsr2h	equ	0xFDA
 12700                           fsr2l	equ	0xFD9
 12701                           status	equ	0xFD8
 12702                           
 12703 ;; *************** function _RF24_get_status *****************
 12704 ;; Defined at:
 12705 ;;		line 352 in file "../../../RF24_c/RF24_c.c"
 12706 ;; Parameters:    Size  Location     Type
 12707 ;;  rf              2  [STACK] PTR struct RF24
 12708 ;;		 -> radio(22), 
 12709 ;; Auto vars:     Size  Location     Type
 12710 ;;		None
 12711 ;; Return value:  Size  Location     Type
 12712 ;;                  1  [STACK] unsigned char 
 12713 ;; Registers used:
 12714 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 12715 ;; Tracked objects:
 12716 ;;		On entry : 0/0
 12717 ;;		On exit  : 0/0
 12718 ;;		Unchanged: 0/0
 12719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;Total ram usage:        0 bytes
 12725 ;; Hardware stack levels used:    1
 12726 ;; Hardware stack levels required when called:    5
 12727 ;; This function calls:
 12728 ;;		_RF24_spiTrans
 12729 ;; This function is called by:
 12730 ;;		_RF24_writeFast_m
 12731 ;;		_RF24_txStandBy_t
 12732 ;;		_RF24_available_p
 12733 ;; This function uses a reentrant model
 12734 ;;
 12735                           
 12736                           	psect	text48
 12737  005020                     __ptext48:
 12738                           	opt stack 0
 12739  005020                     _RF24_get_status:
 12740                           	opt stack 21
 12741                           
 12742                           ;RF24_c.c: 354: return RF24_spiTrans(rf,0xFF);
 12743                           
 12744                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 12745                           ;incstack = 0
 12746  005020  0EFF               	movlw	255
 12747  005022  6EE6               	movwf	postinc1,c
 12748                           
 12749                           ;stkvar	_rf @ sp[(-1)+-2]
 12750  005024  0EFD               	movlw	-3
 12751  005026  CFE3 FFE6          	movff	plusw1,postinc1
 12752  00502A  CFE3 FFE6          	movff	plusw1,postinc1
 12753  00502E  EC6B  F027         	call	_RF24_spiTrans	;wreg free
 12754                           
 12755                           ; _RF24_get_status: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 
      +                          2, argsize = 2, vargsize = 0
 12756  005032  52E5               	movf	postdec1,f,c
 12757  005034  52E5               	movf	postdec1,f,c
 12758  005036  0012               	return		;funcret
 12759  005038                     __end_of_RF24_get_status:
 12760                           	opt stack 0
 12761                           tblptru	equ	0xFF8
 12762                           tblptrh	equ	0xFF7
 12763                           tblptrl	equ	0xFF6
 12764                           tablat	equ	0xFF5
 12765                           prodh	equ	0xFF4
 12766                           prodl	equ	0xFF3
 12767                           intcon	equ	0xFF2
 12768                           indf0	equ	0xFEF
 12769                           postinc0	equ	0xFEE
 12770                           postdec0	equ	0xFED
 12771                           fsr0h	equ	0xFEA
 12772                           fsr0l	equ	0xFE9
 12773                           wreg	equ	0xFE8
 12774                           postinc1	equ	0xFE6
 12775                           postdec1	equ	0xFE5
 12776                           plusw1	equ	0xFE3
 12777                           fsr1h	equ	0xFE2
 12778                           fsr1l	equ	0xFE1
 12779                           indf2	equ	0xFDF
 12780                           postinc2	equ	0xFDE
 12781                           postdec2	equ	0xFDD
 12782                           plusw2	equ	0xFDB
 12783                           fsr2h	equ	0xFDA
 12784                           fsr2l	equ	0xFD9
 12785                           status	equ	0xFD8
 12786                           
 12787 ;; *************** function _digitalWrite *****************
 12788 ;; Defined at:
 12789 ;;		line 56 in file "../../../RF24_c/utility/XC8/spi.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;  pin             1  [STACK] unsigned char 
 12792 ;;  mode            1  [STACK] unsigned char 
 12793 ;; Auto vars:     Size  Location     Type
 12794 ;;		None
 12795 ;; Return value:  Size  Location     Type
 12796 ;;                  1  [STACK] void 
 12797 ;; Registers used:
 12798 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12799 ;; Tracked objects:
 12800 ;;		On entry : 0/0
 12801 ;;		On exit  : 0/0
 12802 ;;		Unchanged: 0/0
 12803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;Total ram usage:        0 bytes
 12809 ;; Hardware stack levels used:    1
 12810 ;; Hardware stack levels required when called:    1
 12811 ;; This function calls:
 12812 ;;		Nothing
 12813 ;; This function is called by:
 12814 ;;		_RF24_csn_d
 12815 ;;		_RF24_ce_d
 12816 ;; This function uses a reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text49
 12820  0022EC                     __ptext49:
 12821                           	opt stack 0
 12822  0022EC                     _digitalWrite:
 12823                           	opt stack 24
 12824                           
 12825                           ;spi.c: 58: switch(pin)
 12826                           
 12827                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 12828                           ;incstack = 0
 12829  0022EC  D0F5               	goto	l1994
 12830  0022EE                     l1922:
 12831                           
 12832                           ;stkvar	_mode @ sp[(0)+-2]
 12833  0022EE  0EFE               	movlw	-2
 12834  0022F0  B0E3               	btfsc	plusw1,0,c
 12835  0022F2  D002               	bra	u35
 12836  0022F4  9089               	bcf	3977,0,c	;volatile
 12837  0022F6  D001               	bra	u36
 12838  0022F8                     u35:
 12839  0022F8  8089               	bsf	3977,0,c	;volatile
 12840  0022FA                     u36:
 12841  0022FA  D159               	goto	l983
 12842  0022FC                     l1924:
 12843                           
 12844                           ;stkvar	_mode @ sp[(0)+-2]
 12845  0022FC  0EFE               	movlw	-2
 12846  0022FE  B0E3               	btfsc	plusw1,0,c
 12847  002300  D002               	bra	u45
 12848  002302  9289               	bcf	3977,1,c	;volatile
 12849  002304  D001               	bra	u46
 12850  002306                     u45:
 12851  002306  8289               	bsf	3977,1,c	;volatile
 12852  002308                     u46:
 12853  002308  D152               	goto	l983
 12854  00230A                     l1926:
 12855                           
 12856                           ;stkvar	_mode @ sp[(0)+-2]
 12857  00230A  0EFE               	movlw	-2
 12858  00230C  B0E3               	btfsc	plusw1,0,c
 12859  00230E  D002               	bra	u55
 12860  002310  9489               	bcf	3977,2,c	;volatile
 12861  002312  D001               	bra	u56
 12862  002314                     u55:
 12863  002314  8489               	bsf	3977,2,c	;volatile
 12864  002316                     u56:
 12865  002316  D14B               	goto	l983
 12866  002318                     l1928:
 12867                           
 12868                           ;stkvar	_mode @ sp[(0)+-2]
 12869  002318  0EFE               	movlw	-2
 12870  00231A  B0E3               	btfsc	plusw1,0,c
 12871  00231C  D002               	bra	u65
 12872  00231E  9689               	bcf	3977,3,c	;volatile
 12873  002320  D001               	bra	u66
 12874  002322                     u65:
 12875  002322  8689               	bsf	3977,3,c	;volatile
 12876  002324                     u66:
 12877  002324  D144               	goto	l983
 12878  002326                     l1930:
 12879                           
 12880                           ;stkvar	_mode @ sp[(0)+-2]
 12881  002326  0EFE               	movlw	-2
 12882  002328  B0E3               	btfsc	plusw1,0,c
 12883  00232A  D002               	bra	u75
 12884  00232C  9889               	bcf	3977,4,c	;volatile
 12885  00232E  D001               	bra	u76
 12886  002330                     u75:
 12887  002330  8889               	bsf	3977,4,c	;volatile
 12888  002332                     u76:
 12889  002332  D13D               	goto	l983
 12890  002334                     l1932:
 12891                           
 12892                           ;stkvar	_mode @ sp[(0)+-2]
 12893  002334  0EFE               	movlw	-2
 12894  002336  B0E3               	btfsc	plusw1,0,c
 12895  002338  D002               	bra	u85
 12896  00233A  9A89               	bcf	3977,5,c	;volatile
 12897  00233C  D001               	bra	u86
 12898  00233E                     u85:
 12899  00233E  8A89               	bsf	3977,5,c	;volatile
 12900  002340                     u86:
 12901  002340  D136               	goto	l983
 12902  002342                     l1934:
 12903                           
 12904                           ;stkvar	_mode @ sp[(0)+-2]
 12905  002342  0EFE               	movlw	-2
 12906  002344  B0E3               	btfsc	plusw1,0,c
 12907  002346  D002               	bra	u95
 12908  002348  908D               	bcf	3981,0,c	;volatile
 12909  00234A  D001               	bra	u96
 12910  00234C                     u95:
 12911  00234C  808D               	bsf	3981,0,c	;volatile
 12912  00234E                     u96:
 12913  00234E  D12F               	goto	l983
 12914  002350                     l1936:
 12915                           
 12916                           ;stkvar	_mode @ sp[(0)+-2]
 12917  002350  0EFE               	movlw	-2
 12918  002352  B0E3               	btfsc	plusw1,0,c
 12919  002354  D002               	bra	u105
 12920  002356  928D               	bcf	3981,1,c	;volatile
 12921  002358  D001               	bra	u106
 12922  00235A                     u105:
 12923  00235A  828D               	bsf	3981,1,c	;volatile
 12924  00235C                     u106:
 12925  00235C  D128               	goto	l983
 12926  00235E                     l1938:
 12927                           
 12928                           ;stkvar	_mode @ sp[(0)+-2]
 12929  00235E  0EFE               	movlw	-2
 12930  002360  B0E3               	btfsc	plusw1,0,c
 12931  002362  D002               	bra	u115
 12932  002364  948D               	bcf	3981,2,c	;volatile
 12933  002366  D001               	bra	u116
 12934  002368                     u115:
 12935  002368  848D               	bsf	3981,2,c	;volatile
 12936  00236A                     u116:
 12937  00236A  D121               	goto	l983
 12938  00236C                     l1940:
 12939                           
 12940                           ;stkvar	_mode @ sp[(0)+-2]
 12941  00236C  0EFE               	movlw	-2
 12942  00236E  B0E3               	btfsc	plusw1,0,c
 12943  002370  D002               	bra	u125
 12944  002372  9E89               	bcf	3977,7,c	;volatile
 12945  002374  D001               	bra	u126
 12946  002376                     u125:
 12947  002376  8E89               	bsf	3977,7,c	;volatile
 12948  002378                     u126:
 12949  002378  D11A               	goto	l983
 12950  00237A                     l1942:
 12951                           
 12952                           ;stkvar	_mode @ sp[(0)+-2]
 12953  00237A  0EFE               	movlw	-2
 12954  00237C  B0E3               	btfsc	plusw1,0,c
 12955  00237E  D002               	bra	u135
 12956  002380  9C89               	bcf	3977,6,c	;volatile
 12957  002382  D001               	bra	u136
 12958  002384                     u135:
 12959  002384  8C89               	bsf	3977,6,c	;volatile
 12960  002386                     u136:
 12961  002386  D113               	goto	l983
 12962  002388                     l1944:
 12963                           
 12964                           ;stkvar	_mode @ sp[(0)+-2]
 12965  002388  0EFE               	movlw	-2
 12966  00238A  B0E3               	btfsc	plusw1,0,c
 12967  00238C  D002               	bra	u145
 12968  00238E  908B               	bcf	3979,0,c	;volatile
 12969  002390  D001               	bra	u146
 12970  002392                     u145:
 12971  002392  808B               	bsf	3979,0,c	;volatile
 12972  002394                     u146:
 12973  002394  D10C               	goto	l983
 12974  002396                     l1946:
 12975                           
 12976                           ;stkvar	_mode @ sp[(0)+-2]
 12977  002396  0EFE               	movlw	-2
 12978  002398  B0E3               	btfsc	plusw1,0,c
 12979  00239A  D002               	bra	u155
 12980  00239C  928B               	bcf	3979,1,c	;volatile
 12981  00239E  D001               	bra	u156
 12982  0023A0                     u155:
 12983  0023A0  828B               	bsf	3979,1,c	;volatile
 12984  0023A2                     u156:
 12985  0023A2  D105               	goto	l983
 12986  0023A4                     l1948:
 12987                           
 12988                           ;stkvar	_mode @ sp[(0)+-2]
 12989  0023A4  0EFE               	movlw	-2
 12990  0023A6  B0E3               	btfsc	plusw1,0,c
 12991  0023A8  D002               	bra	u165
 12992  0023AA  948B               	bcf	3979,2,c	;volatile
 12993  0023AC  D001               	bra	u166
 12994  0023AE                     u165:
 12995  0023AE  848B               	bsf	3979,2,c	;volatile
 12996  0023B0                     u166:
 12997  0023B0  D0FE               	goto	l983
 12998  0023B2                     l1950:
 12999                           
 13000                           ;stkvar	_mode @ sp[(0)+-2]
 13001  0023B2  0EFE               	movlw	-2
 13002  0023B4  B0E3               	btfsc	plusw1,0,c
 13003  0023B6  D002               	bra	u175
 13004  0023B8  968B               	bcf	3979,3,c	;volatile
 13005  0023BA  D001               	bra	u176
 13006  0023BC                     u175:
 13007  0023BC  868B               	bsf	3979,3,c	;volatile
 13008  0023BE                     u176:
 13009  0023BE  D0F7               	goto	l983
 13010  0023C0                     l1952:
 13011                           
 13012                           ;stkvar	_mode @ sp[(0)+-2]
 13013  0023C0  0EFE               	movlw	-2
 13014  0023C2  B0E3               	btfsc	plusw1,0,c
 13015  0023C4  D002               	bra	u185
 13016  0023C6  908C               	bcf	3980,0,c	;volatile
 13017  0023C8  D001               	bra	u186
 13018  0023CA                     u185:
 13019  0023CA  808C               	bsf	3980,0,c	;volatile
 13020  0023CC                     u186:
 13021  0023CC  D0F0               	goto	l983
 13022  0023CE                     l1954:
 13023                           
 13024                           ;stkvar	_mode @ sp[(0)+-2]
 13025  0023CE  0EFE               	movlw	-2
 13026  0023D0  B0E3               	btfsc	plusw1,0,c
 13027  0023D2  D002               	bra	u195
 13028  0023D4  928C               	bcf	3980,1,c	;volatile
 13029  0023D6  D001               	bra	u196
 13030  0023D8                     u195:
 13031  0023D8  828C               	bsf	3980,1,c	;volatile
 13032  0023DA                     u196:
 13033  0023DA  D0E9               	goto	l983
 13034  0023DC                     l1956:
 13035                           
 13036                           ;stkvar	_mode @ sp[(0)+-2]
 13037  0023DC  0EFE               	movlw	-2
 13038  0023DE  B0E3               	btfsc	plusw1,0,c
 13039  0023E0  D002               	bra	u205
 13040  0023E2  948C               	bcf	3980,2,c	;volatile
 13041  0023E4  D001               	bra	u206
 13042  0023E6                     u205:
 13043  0023E6  848C               	bsf	3980,2,c	;volatile
 13044  0023E8                     u206:
 13045  0023E8  D0E2               	goto	l983
 13046  0023EA                     l1958:
 13047                           
 13048                           ;stkvar	_mode @ sp[(0)+-2]
 13049  0023EA  0EFE               	movlw	-2
 13050  0023EC  B0E3               	btfsc	plusw1,0,c
 13051  0023EE  D002               	bra	u215
 13052  0023F0  968C               	bcf	3980,3,c	;volatile
 13053  0023F2  D001               	bra	u216
 13054  0023F4                     u215:
 13055  0023F4  868C               	bsf	3980,3,c	;volatile
 13056  0023F6                     u216:
 13057  0023F6  D0DB               	goto	l983
 13058  0023F8                     l1960:
 13059                           
 13060                           ;stkvar	_mode @ sp[(0)+-2]
 13061  0023F8  0EFE               	movlw	-2
 13062  0023FA  B0E3               	btfsc	plusw1,0,c
 13063  0023FC  D002               	bra	u225
 13064  0023FE  988B               	bcf	3979,4,c	;volatile
 13065  002400  D001               	bra	u226
 13066  002402                     u225:
 13067  002402  888B               	bsf	3979,4,c	;volatile
 13068  002404                     u226:
 13069  002404  D0D4               	goto	l983
 13070  002406                     l1962:
 13071                           
 13072                           ;stkvar	_mode @ sp[(0)+-2]
 13073  002406  0EFE               	movlw	-2
 13074  002408  B0E3               	btfsc	plusw1,0,c
 13075  00240A  D002               	bra	u235
 13076  00240C  9A8B               	bcf	3979,5,c	;volatile
 13077  00240E  D001               	bra	u236
 13078  002410                     u235:
 13079  002410  8A8B               	bsf	3979,5,c	;volatile
 13080  002412                     u236:
 13081  002412  D0CD               	goto	l983
 13082  002414                     l1964:
 13083                           
 13084                           ;stkvar	_mode @ sp[(0)+-2]
 13085  002414  0EFE               	movlw	-2
 13086  002416  B0E3               	btfsc	plusw1,0,c
 13087  002418  D002               	bra	u245
 13088  00241A  9C8B               	bcf	3979,6,c	;volatile
 13089  00241C  D001               	bra	u246
 13090  00241E                     u245:
 13091  00241E  8C8B               	bsf	3979,6,c	;volatile
 13092  002420                     u246:
 13093  002420  D0C6               	goto	l983
 13094  002422                     l1966:
 13095                           
 13096                           ;stkvar	_mode @ sp[(0)+-2]
 13097  002422  0EFE               	movlw	-2
 13098  002424  B0E3               	btfsc	plusw1,0,c
 13099  002426  D002               	bra	u255
 13100  002428  9E8B               	bcf	3979,7,c	;volatile
 13101  00242A  D001               	bra	u256
 13102  00242C                     u255:
 13103  00242C  8E8B               	bsf	3979,7,c	;volatile
 13104  00242E                     u256:
 13105  00242E  D0BF               	goto	l983
 13106  002430                     l1968:
 13107                           
 13108                           ;stkvar	_mode @ sp[(0)+-2]
 13109  002430  0EFE               	movlw	-2
 13110  002432  B0E3               	btfsc	plusw1,0,c
 13111  002434  D002               	bra	u265
 13112  002436  988C               	bcf	3980,4,c	;volatile
 13113  002438  D001               	bra	u266
 13114  00243A                     u265:
 13115  00243A  888C               	bsf	3980,4,c	;volatile
 13116  00243C                     u266:
 13117  00243C  D0B8               	goto	l983
 13118  00243E                     l1970:
 13119                           
 13120                           ;stkvar	_mode @ sp[(0)+-2]
 13121  00243E  0EFE               	movlw	-2
 13122  002440  B0E3               	btfsc	plusw1,0,c
 13123  002442  D002               	bra	u275
 13124  002444  9A8C               	bcf	3980,5,c	;volatile
 13125  002446  D001               	bra	u276
 13126  002448                     u275:
 13127  002448  8A8C               	bsf	3980,5,c	;volatile
 13128  00244A                     u276:
 13129  00244A  D0B1               	goto	l983
 13130  00244C                     l1972:
 13131                           
 13132                           ;stkvar	_mode @ sp[(0)+-2]
 13133  00244C  0EFE               	movlw	-2
 13134  00244E  B0E3               	btfsc	plusw1,0,c
 13135  002450  D002               	bra	u285
 13136  002452  9C8C               	bcf	3980,6,c	;volatile
 13137  002454  D001               	bra	u286
 13138  002456                     u285:
 13139  002456  8C8C               	bsf	3980,6,c	;volatile
 13140  002458                     u286:
 13141  002458  D0AA               	goto	l983
 13142  00245A                     l1974:
 13143                           
 13144                           ;stkvar	_mode @ sp[(0)+-2]
 13145  00245A  0EFE               	movlw	-2
 13146  00245C  B0E3               	btfsc	plusw1,0,c
 13147  00245E  D002               	bra	u295
 13148  002460  9E8C               	bcf	3980,7,c	;volatile
 13149  002462  D001               	bra	u296
 13150  002464                     u295:
 13151  002464  8E8C               	bsf	3980,7,c	;volatile
 13152  002466                     u296:
 13153  002466  D0A3               	goto	l983
 13154  002468                     l1976:
 13155                           
 13156                           ;stkvar	_mode @ sp[(0)+-2]
 13157  002468  0EFE               	movlw	-2
 13158  00246A  B0E3               	btfsc	plusw1,0,c
 13159  00246C  D002               	bra	u305
 13160  00246E  908A               	bcf	3978,0,c	;volatile
 13161  002470  D001               	bra	u306
 13162  002472                     u305:
 13163  002472  808A               	bsf	3978,0,c	;volatile
 13164  002474                     u306:
 13165  002474  D09C               	goto	l983
 13166  002476                     l1978:
 13167                           
 13168                           ;stkvar	_mode @ sp[(0)+-2]
 13169  002476  0EFE               	movlw	-2
 13170  002478  B0E3               	btfsc	plusw1,0,c
 13171  00247A  D002               	bra	u315
 13172  00247C  928A               	bcf	3978,1,c	;volatile
 13173  00247E  D001               	bra	u316
 13174  002480                     u315:
 13175  002480  828A               	bsf	3978,1,c	;volatile
 13176  002482                     u316:
 13177  002482  D095               	goto	l983
 13178  002484                     l1980:
 13179                           
 13180                           ;stkvar	_mode @ sp[(0)+-2]
 13181  002484  0EFE               	movlw	-2
 13182  002486  B0E3               	btfsc	plusw1,0,c
 13183  002488  D002               	bra	u325
 13184  00248A  948A               	bcf	3978,2,c	;volatile
 13185  00248C  D001               	bra	u326
 13186  00248E                     u325:
 13187  00248E  848A               	bsf	3978,2,c	;volatile
 13188  002490                     u326:
 13189  002490  D08E               	goto	l983
 13190  002492                     l1982:
 13191                           
 13192                           ;stkvar	_mode @ sp[(0)+-2]
 13193  002492  0EFE               	movlw	-2
 13194  002494  B0E3               	btfsc	plusw1,0,c
 13195  002496  D002               	bra	u335
 13196  002498  968A               	bcf	3978,3,c	;volatile
 13197  00249A  D001               	bra	u336
 13198  00249C                     u335:
 13199  00249C  868A               	bsf	3978,3,c	;volatile
 13200  00249E                     u336:
 13201  00249E  D087               	goto	l983
 13202  0024A0                     l1984:
 13203                           
 13204                           ;stkvar	_mode @ sp[(0)+-2]
 13205  0024A0  0EFE               	movlw	-2
 13206  0024A2  B0E3               	btfsc	plusw1,0,c
 13207  0024A4  D002               	bra	u345
 13208  0024A6  988A               	bcf	3978,4,c	;volatile
 13209  0024A8  D001               	bra	u346
 13210  0024AA                     u345:
 13211  0024AA  888A               	bsf	3978,4,c	;volatile
 13212  0024AC                     u346:
 13213  0024AC  D080               	goto	l983
 13214  0024AE                     l1986:
 13215                           
 13216                           ;stkvar	_mode @ sp[(0)+-2]
 13217  0024AE  0EFE               	movlw	-2
 13218  0024B0  B0E3               	btfsc	plusw1,0,c
 13219  0024B2  D002               	bra	u355
 13220  0024B4  9A8A               	bcf	3978,5,c	;volatile
 13221  0024B6  D001               	bra	u356
 13222  0024B8                     u355:
 13223  0024B8  8A8A               	bsf	3978,5,c	;volatile
 13224  0024BA                     u356:
 13225  0024BA  D079               	goto	l983
 13226  0024BC                     l1988:
 13227                           
 13228                           ;stkvar	_mode @ sp[(0)+-2]
 13229  0024BC  0EFE               	movlw	-2
 13230  0024BE  B0E3               	btfsc	plusw1,0,c
 13231  0024C0  D002               	bra	u365
 13232  0024C2  9C8A               	bcf	3978,6,c	;volatile
 13233  0024C4  D001               	bra	u366
 13234  0024C6                     u365:
 13235  0024C6  8C8A               	bsf	3978,6,c	;volatile
 13236  0024C8                     u366:
 13237  0024C8  D072               	goto	l983
 13238  0024CA                     l1990:
 13239                           
 13240                           ;stkvar	_mode @ sp[(0)+-2]
 13241  0024CA  0EFE               	movlw	-2
 13242  0024CC  B0E3               	btfsc	plusw1,0,c
 13243  0024CE  D002               	bra	u375
 13244  0024D0  9E8A               	bcf	3978,7,c	;volatile
 13245  0024D2  D001               	bra	u376
 13246  0024D4                     u375:
 13247  0024D4  8E8A               	bsf	3978,7,c	;volatile
 13248  0024D6                     u376:
 13249  0024D6  D06B               	goto	l983
 13250  0024D8                     l1994:
 13251                           
 13252                           ;stkvar	_pin @ sp[(0)+-1]
 13253  0024D8  0EFF               	movlw	-1
 13254  0024DA  50E3               	movf	plusw1,w,c
 13255                           
 13256                           ; Switch size 1, requested type "space"
 13257                           ; Number of cases is 35, Range of values is 2 to 40
 13258                           ; switch strategies available:
 13259                           ; Name         Instructions Cycles
 13260                           ; simple_byte          106    54 (average)
 13261                           ;	Chosen strategy is simple_byte
 13262  0024DC  0A02               	xorlw	2	; case 2
 13263  0024DE  B4D8               	btfsc	status,2,c
 13264  0024E0  D706               	goto	l1922
 13265  0024E2  0A01               	xorlw	1	; case 3
 13266  0024E4  B4D8               	btfsc	status,2,c
 13267  0024E6  D70A               	goto	l1924
 13268  0024E8  0A07               	xorlw	7	; case 4
 13269  0024EA  B4D8               	btfsc	status,2,c
 13270  0024EC  D70E               	goto	l1926
 13271  0024EE  0A01               	xorlw	1	; case 5
 13272  0024F0  B4D8               	btfsc	status,2,c
 13273  0024F2  D712               	goto	l1928
 13274  0024F4  0A03               	xorlw	3	; case 6
 13275  0024F6  B4D8               	btfsc	status,2,c
 13276  0024F8  D716               	goto	l1930
 13277  0024FA  0A01               	xorlw	1	; case 7
 13278  0024FC  B4D8               	btfsc	status,2,c
 13279  0024FE  D71A               	goto	l1932
 13280  002500  0A0F               	xorlw	15	; case 8
 13281  002502  B4D8               	btfsc	status,2,c
 13282  002504  D71E               	goto	l1934
 13283  002506  0A01               	xorlw	1	; case 9
 13284  002508  B4D8               	btfsc	status,2,c
 13285  00250A  D722               	goto	l1936
 13286  00250C  0A03               	xorlw	3	; case 10
 13287  00250E  B4D8               	btfsc	status,2,c
 13288  002510  D726               	goto	l1938
 13289  002512  0A07               	xorlw	7	; case 13
 13290  002514  B4D8               	btfsc	status,2,c
 13291  002516  D72A               	goto	l1940
 13292  002518  0A03               	xorlw	3	; case 14
 13293  00251A  B4D8               	btfsc	status,2,c
 13294  00251C  D72E               	goto	l1942
 13295  00251E  0A01               	xorlw	1	; case 15
 13296  002520  B4D8               	btfsc	status,2,c
 13297  002522  D732               	goto	l1944
 13298  002524  0A1F               	xorlw	31	; case 16
 13299  002526  B4D8               	btfsc	status,2,c
 13300  002528  D736               	goto	l1946
 13301  00252A  0A01               	xorlw	1	; case 17
 13302  00252C  B4D8               	btfsc	status,2,c
 13303  00252E  D73A               	goto	l1948
 13304  002530  0A03               	xorlw	3	; case 18
 13305  002532  B4D8               	btfsc	status,2,c
 13306  002534  D73E               	goto	l1950
 13307  002536  0A01               	xorlw	1	; case 19
 13308  002538  B4D8               	btfsc	status,2,c
 13309  00253A  D742               	goto	l1952
 13310  00253C  0A07               	xorlw	7	; case 20
 13311  00253E  B4D8               	btfsc	status,2,c
 13312  002540  D746               	goto	l1954
 13313  002542  0A01               	xorlw	1	; case 21
 13314  002544  B4D8               	btfsc	status,2,c
 13315  002546  D74A               	goto	l1956
 13316  002548  0A03               	xorlw	3	; case 22
 13317  00254A  B4D8               	btfsc	status,2,c
 13318  00254C  D74E               	goto	l1958
 13319  00254E  0A01               	xorlw	1	; case 23
 13320  002550  B4D8               	btfsc	status,2,c
 13321  002552  D752               	goto	l1960
 13322  002554  0A0F               	xorlw	15	; case 24
 13323  002556  B4D8               	btfsc	status,2,c
 13324  002558  D756               	goto	l1962
 13325  00255A  0A01               	xorlw	1	; case 25
 13326  00255C  B4D8               	btfsc	status,2,c
 13327  00255E  D75A               	goto	l1964
 13328  002560  0A03               	xorlw	3	; case 26
 13329  002562  B4D8               	btfsc	status,2,c
 13330  002564  D75E               	goto	l1966
 13331  002566  0A01               	xorlw	1	; case 27
 13332  002568  B4D8               	btfsc	status,2,c
 13333  00256A  D762               	goto	l1968
 13334  00256C  0A07               	xorlw	7	; case 28
 13335  00256E  B4D8               	btfsc	status,2,c
 13336  002570  D766               	goto	l1970
 13337  002572  0A01               	xorlw	1	; case 29
 13338  002574  B4D8               	btfsc	status,2,c
 13339  002576  D76A               	goto	l1972
 13340  002578  0A03               	xorlw	3	; case 30
 13341  00257A  B4D8               	btfsc	status,2,c
 13342  00257C  D76E               	goto	l1974
 13343  00257E  0A3F               	xorlw	63	; case 33
 13344  002580  B4D8               	btfsc	status,2,c
 13345  002582  D772               	goto	l1976
 13346  002584  0A03               	xorlw	3	; case 34
 13347  002586  B4D8               	btfsc	status,2,c
 13348  002588  D776               	goto	l1978
 13349  00258A  0A01               	xorlw	1	; case 35
 13350  00258C  B4D8               	btfsc	status,2,c
 13351  00258E  D77A               	goto	l1980
 13352  002590  0A07               	xorlw	7	; case 36
 13353  002592  B4D8               	btfsc	status,2,c
 13354  002594  D77E               	goto	l1982
 13355  002596  0A01               	xorlw	1	; case 37
 13356  002598  B4D8               	btfsc	status,2,c
 13357  00259A  D782               	goto	l1984
 13358  00259C  0A03               	xorlw	3	; case 38
 13359  00259E  B4D8               	btfsc	status,2,c
 13360  0025A0  D786               	goto	l1986
 13361  0025A2  0A01               	xorlw	1	; case 39
 13362  0025A4  B4D8               	btfsc	status,2,c
 13363  0025A6  D78A               	goto	l1988
 13364  0025A8  0A0F               	xorlw	15	; case 40
 13365  0025AA  B4D8               	btfsc	status,2,c
 13366  0025AC  D78E               	goto	l1990
 13367  0025AE                     l983:
 13368                           
 13369                           ; _digitalWrite: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, 
      +                          argsize = 2, vargsize = 0
 13370  0025AE  52E5               	movf	postdec1,f,c
 13371  0025B0  52E5               	movf	postdec1,f,c
 13372  0025B2  0012               	return		;funcret
 13373  0025B4                     __end_of_digitalWrite:
 13374                           	opt stack 0
 13375                           tblptru	equ	0xFF8
 13376                           tblptrh	equ	0xFF7
 13377                           tblptrl	equ	0xFF6
 13378                           tablat	equ	0xFF5
 13379                           prodh	equ	0xFF4
 13380                           prodl	equ	0xFF3
 13381                           intcon	equ	0xFF2
 13382                           indf0	equ	0xFEF
 13383                           postinc0	equ	0xFEE
 13384                           postdec0	equ	0xFED
 13385                           fsr0h	equ	0xFEA
 13386                           fsr0l	equ	0xFE9
 13387                           wreg	equ	0xFE8
 13388                           postinc1	equ	0xFE6
 13389                           postdec1	equ	0xFE5
 13390                           plusw1	equ	0xFE3
 13391                           fsr1h	equ	0xFE2
 13392                           fsr1l	equ	0xFE1
 13393                           indf2	equ	0xFDF
 13394                           postinc2	equ	0xFDE
 13395                           postdec2	equ	0xFDD
 13396                           plusw2	equ	0xFDB
 13397                           fsr2h	equ	0xFDA
 13398                           fsr2l	equ	0xFD9
 13399                           status	equ	0xFD8
 13400                           
 13401 ;; *************** function _RF24_spiTrans *****************
 13402 ;; Defined at:
 13403 ;;		line 324 in file "../../../RF24_c/RF24_c.c"
 13404 ;; Parameters:    Size  Location     Type
 13405 ;;  rf              2  [STACK] PTR struct RF24
 13406 ;;		 -> radio(22), 
 13407 ;;  cmd             1  [STACK] unsigned char 
 13408 ;; Auto vars:     Size  Location     Type
 13409 ;;  status          1  [STACK] unsigned char 
 13410 ;; Return value:  Size  Location     Type
 13411 ;;                  1  [STACK] unsigned char 
 13412 ;; Registers used:
 13413 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 13414 ;; Tracked objects:
 13415 ;;		On entry : 0/0
 13416 ;;		On exit  : 0/0
 13417 ;;		Unchanged: 0/0
 13418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13423 ;;Total ram usage:        0 bytes
 13424 ;; Hardware stack levels used:    1
 13425 ;; Hardware stack levels required when called:    4
 13426 ;; This function calls:
 13427 ;;		_RF24_beginTransaction
 13428 ;;		_RF24_endTransaction
 13429 ;;		_SPI_transfer
 13430 ;; This function is called by:
 13431 ;;		_RF24_flush_rx
 13432 ;;		_RF24_flush_tx
 13433 ;;		_RF24_get_status
 13434 ;; This function uses a reentrant model
 13435 ;;
 13436                           
 13437                           	psect	text50
 13438  004ED6                     __ptext50:
 13439                           	opt stack 0
 13440  004ED6                     _RF24_spiTrans:
 13441                           	opt stack 0
 13442                           
 13443                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 13444  004ED6  52E6               	movf	postinc1,f,c
 13445                           
 13446                           ;RF24_c.c: 326: uint8_t status;
 13447                           ;RF24_c.c: 328: RF24_beginTransaction(rf);
 13448                           ;stkvar	_rf @ sp[(-1)+-2]
 13449                           
 13450                           ;incstack = 0
 13451  004ED8  0EFD               	movlw	-3
 13452  004EDA  CFE3 FFE6          	movff	plusw1,postinc1
 13453  004EDE  CFE3 FFE6          	movff	plusw1,postinc1
 13454  004EE2  EC28  F028         	call	_RF24_beginTransaction	;wreg free
 13455                           
 13456                           ;RF24_c.c: 329: status = SPI_transfer( cmd );
 13457                           ;stkvar	_cmd @ sp[(-1)+-3]
 13458  004EE6  0EFC               	movlw	-4
 13459  004EE8  50E3               	movf	plusw1,w,c
 13460  004EEA  6EE6               	movwf	postinc1,c
 13461  004EEC  EC40  F028         	call	_SPI_transfer	;wreg free
 13462                           
 13463                           ;stkvar	_status @ sp[(-1)+0]
 13464  004EF0  0EFF               	movlw	-1
 13465  004EF2  C050  FFE3         	movff	btemp,plusw1
 13466                           
 13467                           ;RF24_c.c: 330: RF24_endTransaction(rf);
 13468                           ;stkvar	_rf @ sp[(-1)+-2]
 13469  004EF6  0EFD               	movlw	-3
 13470  004EF8  CFE3 FFE6          	movff	plusw1,postinc1
 13471  004EFC  CFE3 FFE6          	movff	plusw1,postinc1
 13472  004F00  EC1C  F028         	call	_RF24_endTransaction	;wreg free
 13473                           
 13474                           ;RF24_c.c: 332: return status;
 13475                           ;stkvar	_status @ sp[(-1)+0]
 13476  004F04  0EFF               	movlw	-1
 13477  004F06  CFE3 F050          	movff	plusw1,btemp
 13478                           
 13479                           ; _RF24_spiTrans: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3,
      +                           argsize = 3, vargsize = 0
 13480  004F0A  52E5               	movf	postdec1,f,c
 13481  004F0C  52E5               	movf	postdec1,f,c
 13482  004F0E  52E5               	movf	postdec1,f,c
 13483  004F10  52E5               	movf	postdec1,f,c
 13484  004F12  0012               	return		;funcret
 13485  004F14                     __end_of_RF24_spiTrans:
 13486                           	opt stack 0
 13487                           tblptru	equ	0xFF8
 13488                           tblptrh	equ	0xFF7
 13489                           tblptrl	equ	0xFF6
 13490                           tablat	equ	0xFF5
 13491                           prodh	equ	0xFF4
 13492                           prodl	equ	0xFF3
 13493                           intcon	equ	0xFF2
 13494                           indf0	equ	0xFEF
 13495                           postinc0	equ	0xFEE
 13496                           postdec0	equ	0xFED
 13497                           fsr0h	equ	0xFEA
 13498                           fsr0l	equ	0xFE9
 13499                           wreg	equ	0xFE8
 13500                           postinc1	equ	0xFE6
 13501                           postdec1	equ	0xFE5
 13502                           plusw1	equ	0xFE3
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           indf2	equ	0xFDF
 13506                           postinc2	equ	0xFDE
 13507                           postdec2	equ	0xFDD
 13508                           plusw2	equ	0xFDB
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _SPI_transfer *****************
 13514 ;; Defined at:
 13515 ;;		line 225 in file "../../../RF24_c/utility/XC8/spi.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;  data            1  [STACK] unsigned char 
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;		None
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  1  [STACK] unsigned char 
 13522 ;; Registers used:
 13523 ;;		fsr1l, fsr1h, btemp
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13533 ;;Total ram usage:        0 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:    1
 13536 ;; This function calls:
 13537 ;;		Nothing
 13538 ;; This function is called by:
 13539 ;;		_RF24_read_register_d
 13540 ;;		_RF24_write_register_c_d
 13541 ;;		_RF24_write_register_d
 13542 ;;		_RF24_write_payload
 13543 ;;		_RF24_read_payload
 13544 ;;		_RF24_spiTrans
 13545 ;;		_RF24_getDynamicPayloadSize
 13546 ;;		_RF24_toggle_features_d
 13547 ;; This function uses a reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text51
 13551  005080                     __ptext51:
 13552                           	opt stack 0
 13553  005080                     _SPI_transfer:
 13554                           	opt stack 26
 13555                           
 13556                           ;spi.c: 227: SSPSTATbits.BF = 0;
 13557                           
 13558                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
 13559                           ;incstack = 0
 13560  005080  90C7               	bcf	4039,0,c	;volatile
 13561                           
 13562                           ;spi.c: 228: SSPBUF = data;
 13563                           ;stkvar	_data @ sp[(0)+-1]
 13564  005082  0EFF               	movlw	-1
 13565  005084  CFE3 FFC9          	movff	plusw1,4041	;volatile
 13566  005088                     l1050:
 13567  005088  A0C7               	btfss	4039,0,c	;volatile
 13568  00508A  D7FE               	goto	l1050
 13569                           
 13570                           ;spi.c: 230: return SSPBUF;
 13571  00508C  CFC9 F050          	movff	4041,btemp	;volatile
 13572                           
 13573                           ; _SPI_transfer: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, 
      +                          argsize = 1, vargsize = 0
 13574  005090  52E5               	movf	postdec1,f,c
 13575  005092  0012               	return		;funcret
 13576  005094                     __end_of_SPI_transfer:
 13577                           	opt stack 0
 13578                           tblptru	equ	0xFF8
 13579                           tblptrh	equ	0xFF7
 13580                           tblptrl	equ	0xFF6
 13581                           tablat	equ	0xFF5
 13582                           prodh	equ	0xFF4
 13583                           prodl	equ	0xFF3
 13584                           intcon	equ	0xFF2
 13585                           indf0	equ	0xFEF
 13586                           postinc0	equ	0xFEE
 13587                           postdec0	equ	0xFED
 13588                           fsr0h	equ	0xFEA
 13589                           fsr0l	equ	0xFE9
 13590                           wreg	equ	0xFE8
 13591                           postinc1	equ	0xFE6
 13592                           postdec1	equ	0xFE5
 13593                           plusw1	equ	0xFE3
 13594                           fsr1h	equ	0xFE2
 13595                           fsr1l	equ	0xFE1
 13596                           indf2	equ	0xFDF
 13597                           postinc2	equ	0xFDE
 13598                           postdec2	equ	0xFDD
 13599                           plusw2	equ	0xFDB
 13600                           fsr2h	equ	0xFDA
 13601                           fsr2l	equ	0xFD9
 13602                           status	equ	0xFD8
 13603                           
 13604 ;; *************** function _RF24_endTransaction *****************
 13605 ;; Defined at:
 13606 ;;		line 81 in file "../../../RF24_c/RF24_c.c"
 13607 ;; Parameters:    Size  Location     Type
 13608 ;;  rf              2  [STACK] PTR struct RF24
 13609 ;;		 -> radio(22), 
 13610 ;; Auto vars:     Size  Location     Type
 13611 ;;		None
 13612 ;; Return value:  Size  Location     Type
 13613 ;;                  1  [STACK] void 
 13614 ;; Registers used:
 13615 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 13616 ;; Tracked objects:
 13617 ;;		On entry : 0/0
 13618 ;;		On exit  : 0/0
 13619 ;;		Unchanged: 0/0
 13620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13625 ;;Total ram usage:        0 bytes
 13626 ;; Hardware stack levels used:    1
 13627 ;; Hardware stack levels required when called:    3
 13628 ;; This function calls:
 13629 ;;		_RF24_csn_d
 13630 ;; This function is called by:
 13631 ;;		_RF24_read_register_d
 13632 ;;		_RF24_write_register_c_d
 13633 ;;		_RF24_write_register_d
 13634 ;;		_RF24_write_payload
 13635 ;;		_RF24_read_payload
 13636 ;;		_RF24_spiTrans
 13637 ;;		_RF24_getDynamicPayloadSize
 13638 ;;		_RF24_toggle_features_d
 13639 ;; This function uses a reentrant model
 13640 ;;
 13641                           
 13642                           	psect	text52
 13643  005038                     __ptext52:
 13644                           	opt stack 0
 13645  005038                     _RF24_endTransaction:
 13646                           	opt stack 24
 13647                           
 13648                           ;RF24_c.c: 82: RF24_csn_d(rf,1);
 13649                           
 13650                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 13651                           ;incstack = 0
 13652  005038  0E01               	movlw	1
 13653  00503A  6EE6               	movwf	postinc1,c
 13654                           
 13655                           ;stkvar	_rf @ sp[(-1)+-2]
 13656  00503C  0EFD               	movlw	-3
 13657  00503E  CFE3 FFE6          	movff	plusw1,postinc1
 13658  005042  CFE3 FFE6          	movff	plusw1,postinc1
 13659  005046  EC03  F026         	call	_RF24_csn_d	;wreg free
 13660                           
 13661                           ; _RF24_endTransaction: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsiz
      +                          e = 2, argsize = 2, vargsize = 0
 13662  00504A  52E5               	movf	postdec1,f,c
 13663  00504C  52E5               	movf	postdec1,f,c
 13664  00504E  0012               	return		;funcret
 13665  005050                     __end_of_RF24_endTransaction:
 13666                           	opt stack 0
 13667                           tblptru	equ	0xFF8
 13668                           tblptrh	equ	0xFF7
 13669                           tblptrl	equ	0xFF6
 13670                           tablat	equ	0xFF5
 13671                           prodh	equ	0xFF4
 13672                           prodl	equ	0xFF3
 13673                           intcon	equ	0xFF2
 13674                           indf0	equ	0xFEF
 13675                           postinc0	equ	0xFEE
 13676                           postdec0	equ	0xFED
 13677                           fsr0h	equ	0xFEA
 13678                           fsr0l	equ	0xFE9
 13679                           wreg	equ	0xFE8
 13680                           postinc1	equ	0xFE6
 13681                           postdec1	equ	0xFE5
 13682                           plusw1	equ	0xFE3
 13683                           fsr1h	equ	0xFE2
 13684                           fsr1l	equ	0xFE1
 13685                           indf2	equ	0xFDF
 13686                           postinc2	equ	0xFDE
 13687                           postdec2	equ	0xFDD
 13688                           plusw2	equ	0xFDB
 13689                           fsr2h	equ	0xFDA
 13690                           fsr2l	equ	0xFD9
 13691                           status	equ	0xFD8
 13692                           
 13693 ;; *************** function _RF24_beginTransaction *****************
 13694 ;; Defined at:
 13695 ;;		line 72 in file "../../../RF24_c/RF24_c.c"
 13696 ;; Parameters:    Size  Location     Type
 13697 ;;  rf              2  [STACK] PTR struct RF24
 13698 ;;		 -> radio(22), 
 13699 ;; Auto vars:     Size  Location     Type
 13700 ;;		None
 13701 ;; Return value:  Size  Location     Type
 13702 ;;                  1  [STACK] void 
 13703 ;; Registers used:
 13704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 13705 ;; Tracked objects:
 13706 ;;		On entry : 0/0
 13707 ;;		On exit  : 0/0
 13708 ;;		Unchanged: 0/0
 13709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13711 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13714 ;;Total ram usage:        0 bytes
 13715 ;; Hardware stack levels used:    1
 13716 ;; Hardware stack levels required when called:    3
 13717 ;; This function calls:
 13718 ;;		_RF24_csn_d
 13719 ;; This function is called by:
 13720 ;;		_RF24_read_register_d
 13721 ;;		_RF24_write_register_c_d
 13722 ;;		_RF24_write_register_d
 13723 ;;		_RF24_write_payload
 13724 ;;		_RF24_read_payload
 13725 ;;		_RF24_spiTrans
 13726 ;;		_RF24_getDynamicPayloadSize
 13727 ;;		_RF24_toggle_features_d
 13728 ;; This function uses a reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text53
 13732  005050                     __ptext53:
 13733                           	opt stack 0
 13734  005050                     _RF24_beginTransaction:
 13735                           	opt stack 24
 13736                           
 13737                           ;RF24_c.c: 76: RF24_csn_d(rf,0);
 13738                           
 13739                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 13740                           ;incstack = 0
 13741  005050  0E00               	movlw	0
 13742  005052  6EE6               	movwf	postinc1,c
 13743                           
 13744                           ;stkvar	_rf @ sp[(-1)+-2]
 13745  005054  0EFD               	movlw	-3
 13746  005056  CFE3 FFE6          	movff	plusw1,postinc1
 13747  00505A  CFE3 FFE6          	movff	plusw1,postinc1
 13748  00505E  EC03  F026         	call	_RF24_csn_d	;wreg free
 13749                           
 13750                           ; _RF24_beginTransaction: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 2, argsize = 2, vargsize = 0
 13751  005062  52E5               	movf	postdec1,f,c
 13752  005064  52E5               	movf	postdec1,f,c
 13753  005066  0012               	return		;funcret
 13754  005068                     __end_of_RF24_beginTransaction:
 13755                           	opt stack 0
 13756                           tblptru	equ	0xFF8
 13757                           tblptrh	equ	0xFF7
 13758                           tblptrl	equ	0xFF6
 13759                           tablat	equ	0xFF5
 13760                           prodh	equ	0xFF4
 13761                           prodl	equ	0xFF3
 13762                           intcon	equ	0xFF2
 13763                           indf0	equ	0xFEF
 13764                           postinc0	equ	0xFEE
 13765                           postdec0	equ	0xFED
 13766                           fsr0h	equ	0xFEA
 13767                           fsr0l	equ	0xFE9
 13768                           wreg	equ	0xFE8
 13769                           postinc1	equ	0xFE6
 13770                           postdec1	equ	0xFE5
 13771                           plusw1	equ	0xFE3
 13772                           fsr1h	equ	0xFE2
 13773                           fsr1l	equ	0xFE1
 13774                           indf2	equ	0xFDF
 13775                           postinc2	equ	0xFDE
 13776                           postdec2	equ	0xFDD
 13777                           plusw2	equ	0xFDB
 13778                           fsr2h	equ	0xFDA
 13779                           fsr2l	equ	0xFD9
 13780                           status	equ	0xFD8
 13781                           
 13782 ;; *************** function _RF24_csn_d *****************
 13783 ;; Defined at:
 13784 ;;		line 19 in file "../../../RF24_c/RF24_c.c"
 13785 ;; Parameters:    Size  Location     Type
 13786 ;;  rf              2  [STACK] PTR struct RF24
 13787 ;;		 -> radio(22), 
 13788 ;;  mode            1  [STACK] unsigned char 
 13789 ;; Auto vars:     Size  Location     Type
 13790 ;;		None
 13791 ;; Return value:  Size  Location     Type
 13792 ;;                  1  [STACK] void 
 13793 ;; Registers used:
 13794 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 13795 ;; Tracked objects:
 13796 ;;		On entry : 0/0
 13797 ;;		On exit  : 0/0
 13798 ;;		Unchanged: 0/0
 13799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13804 ;;Total ram usage:        0 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    2
 13807 ;; This function calls:
 13808 ;;		_delayMicroseconds
 13809 ;;		_digitalWrite
 13810 ;; This function is called by:
 13811 ;;		_RF24_beginTransaction
 13812 ;;		_RF24_endTransaction
 13813 ;;		_RF24_begin
 13814 ;; This function uses a reentrant model
 13815 ;;
 13816                           
 13817                           	psect	text54
 13818  004C06                     __ptext54:
 13819                           	opt stack 0
 13820  004C06                     _RF24_csn_d:
 13821                           	opt stack 24
 13822                           
 13823                           ;RF24_c.c: 56: digitalWrite(rf->csn_pin,mode);
 13824                           ;stkvar	_mode @ sp[(0)+-3]
 13825                           
 13826                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 13827                           ;incstack = 0
 13828  004C06  0EFD               	movlw	-3
 13829  004C08  50E3               	movf	plusw1,w,c
 13830  004C0A  6EE6               	movwf	postinc1,c
 13831                           
 13832                           ;stkvar	_rf @ sp[(-1)+-2]
 13833  004C0C  0EFD               	movlw	-3
 13834  004C0E  CFE3 F051          	movff	plusw1,btemp+1
 13835  004C12  0EFE               	movlw	-2
 13836  004C14  CFE3 F052          	movff	plusw1,btemp+2
 13837  004C18  0E01               	movlw	1
 13838  004C1A  2451               	addwf	btemp+1,w,c
 13839  004C1C  6ED9               	movwf	fsr2l,c
 13840  004C1E  0E00               	movlw	0
 13841  004C20  2052               	addwfc	btemp+2,w,c
 13842  004C22  6EDA               	movwf	fsr2h,c
 13843  004C24  50DF               	movf	indf2,w,c
 13844  004C26  6EE6               	movwf	postinc1,c
 13845  004C28  EC76  F011         	call	_digitalWrite	;wreg free
 13846                           
 13847                           ;RF24_c.c: 57: delayMicroseconds(rf->csDelay);
 13848                           ;stkvar	_rf @ sp[(0)+-2]
 13849  004C2C  0EFE               	movlw	-2
 13850  004C2E  CFE3 F051          	movff	plusw1,btemp+1
 13851  004C32  0EFF               	movlw	-1
 13852  004C34  CFE3 F052          	movff	plusw1,btemp+2
 13853  004C38  0E11               	movlw	17
 13854  004C3A  2451               	addwf	btemp+1,w,c
 13855  004C3C  6ED9               	movwf	fsr2l,c
 13856  004C3E  0E00               	movlw	0
 13857  004C40  2052               	addwfc	btemp+2,w,c
 13858  004C42  6EDA               	movwf	fsr2h,c
 13859  004C44  50DF               	movf	indf2,w,c
 13860  004C46  6EE6               	movwf	postinc1,c
 13861  004C48  EC7B  F022         	call	_delayMicroseconds	;wreg free
 13862                           
 13863                           ; _RF24_csn_d: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, ar
      +                          gsize = 3, vargsize = 0
 13864  004C4C  52E5               	movf	postdec1,f,c
 13865  004C4E  52E5               	movf	postdec1,f,c
 13866  004C50  52E5               	movf	postdec1,f,c
 13867  004C52  0012               	return		;funcret
 13868  004C54                     __end_of_RF24_csn_d:
 13869                           	opt stack 0
 13870                           tblptru	equ	0xFF8
 13871                           tblptrh	equ	0xFF7
 13872                           tblptrl	equ	0xFF6
 13873                           tablat	equ	0xFF5
 13874                           prodh	equ	0xFF4
 13875                           prodl	equ	0xFF3
 13876                           intcon	equ	0xFF2
 13877                           indf0	equ	0xFEF
 13878                           postinc0	equ	0xFEE
 13879                           postdec0	equ	0xFED
 13880                           fsr0h	equ	0xFEA
 13881                           fsr0l	equ	0xFE9
 13882                           wreg	equ	0xFE8
 13883                           postinc1	equ	0xFE6
 13884                           postdec1	equ	0xFE5
 13885                           plusw1	equ	0xFE3
 13886                           fsr1h	equ	0xFE2
 13887                           fsr1l	equ	0xFE1
 13888                           indf2	equ	0xFDF
 13889                           postinc2	equ	0xFDE
 13890                           postdec2	equ	0xFDD
 13891                           plusw2	equ	0xFDB
 13892                           fsr2h	equ	0xFDA
 13893                           fsr2l	equ	0xFD9
 13894                           status	equ	0xFD8
 13895                           
 13896 ;; *************** function _RF24_closeReadingPipe *****************
 13897 ;; Defined at:
 13898 ;;		line 1246 in file "../../../RF24_c/RF24_c.c"
 13899 ;; Parameters:    Size  Location     Type
 13900 ;;  rf              2  [STACK] PTR struct RF24
 13901 ;;		 -> radio(22), 
 13902 ;;  pipe            1  [STACK] unsigned char 
 13903 ;; Auto vars:     Size  Location     Type
 13904 ;;		None
 13905 ;; Return value:  Size  Location     Type
 13906 ;;                  1  [STACK] void 
 13907 ;; Registers used:
 13908 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tblptrl, tblptrh,
      + tblptru
 13909 ;; Tracked objects:
 13910 ;;		On entry : 0/0
 13911 ;;		On exit  : 0/0
 13912 ;;		Unchanged: 0/0
 13913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13918 ;;Total ram usage:        0 bytes
 13919 ;; Hardware stack levels used:    1
 13920 ;; Hardware stack levels required when called:    5
 13921 ;; This function calls:
 13922 ;;		_RF24_read_register_d
 13923 ;;		_RF24_write_register_d
 13924 ;; This function is called by:
 13925 ;;		_RF24_startListening
 13926 ;; This function uses a reentrant model
 13927 ;;
 13928                           
 13929                           	psect	text55
 13930  004AE8                     __ptext55:
 13931                           	opt stack 0
 13932  004AE8                     _RF24_closeReadingPipe:
 13933                           	opt stack 22
 13934                           
 13935                           ;RF24_c.c: 1248: RF24_write_register_d(rf,0x02,RF24_read_register_d(rf,0x02) & ~(1<<((*(
      +                          &child_pipe_enable[pipe])))));
 13936                           ;stkvar	_pipe @ sp[(0)+-3]
 13937                           
 13938                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 13939                           ;incstack = 0
 13940  004AE8  0EFD               	movlw	-3
 13941  004AEA  50E3               	movf	plusw1,w,c
 13942  004AEC  6E51               	movwf	btemp+1,c
 13943  004AEE  6A52               	clrf	btemp+2,c
 13944  004AF0  0ED7               	movlw	low _child_pipe_enable
 13945  004AF2  2451               	addwf	btemp+1,w,c
 13946  004AF4  6EF6               	movwf	tblptrl,c
 13947  004AF6  0EFD               	movlw	high _child_pipe_enable
 13948  004AF8  2052               	addwfc	btemp+2,w,c
 13949  004AFA  6EF7               	movwf	tblptrh,c
 13950  004AFC                     	if	1	;There are 3 active tblptr bytes
 13951  004AFC  6AF8               	clrf	tblptru,c
 13952  004AFE  0E00               	movlw	low (__mediumconst shr (0+16))
 13953  004B00  22F8               	addwfc	tblptru,f,c
 13954  004B02                     	endif
 13955  004B02  0008               	tblrd		*
 13956  004B04  CFF5 F05B          	movff	tablat,btemp+11
 13957  004B08  0E01               	movlw	1
 13958  004B0A  6E5A               	movwf	btemp+10,c
 13959  004B0C  2A5B               	incf	btemp+11,f,c
 13960  004B0E  D002               	goto	u684
 13961  004B10                     u685:
 13962  004B10  90D8               	bcf	status,0,c
 13963  004B12  365A               	rlcf	btemp+10,f,c
 13964  004B14                     u684:
 13965  004B14  2E5B               	decfsz	btemp+11,f,c
 13966  004B16  D7FC               	goto	u685
 13967  004B18  505A               	movf	btemp+10,w,c
 13968  004B1A  0AFF               	xorlw	255
 13969  004B1C  6E5B               	movwf	btemp+11,c
 13970  004B1E  0E02               	movlw	2
 13971  004B20  6EE6               	movwf	postinc1,c
 13972                           
 13973                           ;stkvar	_rf @ sp[(-1)+-2]
 13974  004B22  0EFD               	movlw	-3
 13975  004B24  CFE3 FFE6          	movff	plusw1,postinc1
 13976  004B28  CFE3 FFE6          	movff	plusw1,postinc1
 13977  004B2C  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 13978  004B30  5050               	movf	btemp,w,c
 13979  004B32  145B               	andwf	btemp+11,w,c
 13980  004B34  6EE6               	movwf	postinc1,c
 13981  004B36  0E02               	movlw	2
 13982  004B38  6EE6               	movwf	postinc1,c
 13983                           
 13984                           ;stkvar	_rf @ sp[(-2)+-2]
 13985  004B3A  0EFC               	movlw	-4
 13986  004B3C  CFE3 FFE6          	movff	plusw1,postinc1
 13987  004B40  CFE3 FFE6          	movff	plusw1,postinc1
 13988  004B44  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 13989                           
 13990                           ; _RF24_closeReadingPipe: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 3, argsize = 3, vargsize = 0
 13991  004B48  52E5               	movf	postdec1,f,c
 13992  004B4A  52E5               	movf	postdec1,f,c
 13993  004B4C  52E5               	movf	postdec1,f,c
 13994  004B4E  0012               	return		;funcret
 13995  004B50                     __end_of_RF24_closeReadingPipe:
 13996                           	opt stack 0
 13997                           tblptru	equ	0xFF8
 13998                           tblptrh	equ	0xFF7
 13999                           tblptrl	equ	0xFF6
 14000                           tablat	equ	0xFF5
 14001                           prodh	equ	0xFF4
 14002                           prodl	equ	0xFF3
 14003                           intcon	equ	0xFF2
 14004                           indf0	equ	0xFEF
 14005                           postinc0	equ	0xFEE
 14006                           postdec0	equ	0xFED
 14007                           fsr0h	equ	0xFEA
 14008                           fsr0l	equ	0xFE9
 14009                           wreg	equ	0xFE8
 14010                           postinc1	equ	0xFE6
 14011                           postdec1	equ	0xFE5
 14012                           plusw1	equ	0xFE3
 14013                           fsr1h	equ	0xFE2
 14014                           fsr1l	equ	0xFE1
 14015                           indf2	equ	0xFDF
 14016                           postinc2	equ	0xFDE
 14017                           postdec2	equ	0xFDD
 14018                           plusw2	equ	0xFDB
 14019                           fsr2h	equ	0xFDA
 14020                           fsr2l	equ	0xFD9
 14021                           status	equ	0xFD8
 14022                           
 14023 ;; *************** function _RF24N_is_valid_address *****************
 14024 ;; Defined at:
 14025 ;;		line 1291 in file "../../RF24Network_c.c"
 14026 ;; Parameters:    Size  Location     Type
 14027 ;;  rn              2  [STACK] PTR struct .
 14028 ;;		 -> network(372), 
 14029 ;;  node            2  [STACK] unsigned int 
 14030 ;; Auto vars:     Size  Location     Type
 14031 ;;  digit           1  [STACK] unsigned char 
 14032 ;;  result          1  [STACK] unsigned char 
 14033 ;; Return value:  Size  Location     Type
 14034 ;;                  1  [STACK] unsigned char 
 14035 ;; Registers used:
 14036 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+11, prodl
 14037 ;; Tracked objects:
 14038 ;;		On entry : 0/0
 14039 ;;		On exit  : 0/0
 14040 ;;		Unchanged: 0/0
 14041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14046 ;;Total ram usage:        0 bytes
 14047 ;; Hardware stack levels used:    1
 14048 ;; Hardware stack levels required when called:    1
 14049 ;; This function calls:
 14050 ;;		Nothing
 14051 ;; This function is called by:
 14052 ;;		_RF24N_begin_d
 14053 ;;		_RF24N_update
 14054 ;;		_RF24N_write
 14055 ;; This function uses a reentrant model
 14056 ;;
 14057                           
 14058                           	psect	text56
 14059  0047F0                     __ptext56:
 14060                           	opt stack 0
 14061  0047F0                     _RF24N_is_valid_address:
 14062                           	opt stack 0
 14063                           
 14064                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 14065  0047F0  52E6               	movf	postinc1,f,c
 14066  0047F2  52E6               	movf	postinc1,f,c
 14067                           
 14068                           ;RF24Network_c.c: 1293: uint8_t result = 1;
 14069                           ;stkvar	_result @ sp[(-2)+1]
 14070                           
 14071                           ;incstack = 0
 14072  0047F4  0EFF               	movlw	-1
 14073  0047F6  6AE3               	clrf	plusw1,c
 14074  0047F8  2AE3               	incf	plusw1,f,c
 14075                           
 14076                           ;RF24Network_c.c: 1295: while(node)
 14077  0047FA  D022               	goto	l2386
 14078  0047FC                     l2378:
 14079                           
 14080                           ;RF24Network_c.c: 1296: {
 14081                           ;RF24Network_c.c: 1297: uint8_t digit = node & 0x07;
 14082                           ;stkvar	_node @ sp[(-2)+-4]
 14083  0047FC  0EFA               	movlw	-6
 14084  0047FE  CFE3 F05B          	movff	plusw1,btemp+11
 14085  004802  0E07               	movlw	7
 14086  004804  165B               	andwf	btemp+11,f,c
 14087                           
 14088                           ;stkvar	_digit @ sp[(-2)+0]
 14089  004806  0EFE               	movlw	-2
 14090  004808  C05B  FFE3         	movff	btemp+11,plusw1
 14091                           
 14092                           ;RF24Network_c.c: 1301: if ((digit < 0) || (digit > 5))
 14093                           ;stkvar	_digit @ sp[(-2)+0]
 14094  00480C  0EFE               	movlw	-2
 14095  00480E  CFE3 F050          	movff	plusw1,btemp
 14096  004812  0E05               	movlw	5
 14097  004814  6450               	cpfsgt	btemp,c
 14098  004816  D003               	goto	l2384
 14099                           
 14100                           ;RF24Network_c.c: 1303: {
 14101                           ;RF24Network_c.c: 1304: result = 0;
 14102                           ;stkvar	_result @ sp[(-2)+1]
 14103  004818  0EFF               	movlw	-1
 14104  00481A  6AE3               	clrf	plusw1,c
 14105                           
 14106                           ;RF24Network_c.c: 1305: ;
 14107                           ;RF24Network_c.c: 1306: break;
 14108  00481C  D019               	goto	l2388
 14109  00481E                     l2384:
 14110                           
 14111                           ;RF24Network_c.c: 1307: }
 14112                           ;RF24Network_c.c: 1308: node >>= 3;
 14113  00481E  0E03               	movlw	3
 14114  004820  6E5B               	movwf	btemp+11,c
 14115                           
 14116                           ;stkvar	_node @ sp[(-2)+-4]
 14117  004822  50E1               	movf	fsr1l,w,c
 14118  004824  0FFA               	addlw	-6
 14119  004826  6ED9               	movwf	fsr2l,c
 14120  004828  50E2               	movf	fsr1h,w,c
 14121  00482A  6EDA               	movwf	fsr2h,c
 14122  00482C  0EFF               	movlw	255
 14123  00482E  22DA               	addwfc	fsr2h,f,c
 14124  004830  285B               	incf	btemp+11,w,c
 14125  004832  D004               	goto	u860
 14126  004834                     u865:
 14127  004834  2AD9               	incf	fsr2l,f,c
 14128  004836  90D8               	bcf	status,0,c
 14129  004838  32DD               	rrcf	postdec2,f,c
 14130  00483A  32DF               	rrcf	indf2,f,c
 14131  00483C                     u860:
 14132  00483C  2EE8               	decfsz	wreg,f,c
 14133  00483E  D7FA               	goto	u865
 14134  004840                     l2386:
 14135                           
 14136                           ;stkvar	_node @ sp[(-2)+-4]
 14137  004840  0EFA               	movlw	-6
 14138  004842  CFE3 F050          	movff	plusw1,btemp
 14139  004846  0EFB               	movlw	-5
 14140  004848  50E3               	movf	plusw1,w,c
 14141  00484A  1050               	iorwf	btemp,w,c
 14142  00484C  A4D8               	btfss	status,2,c
 14143  00484E  D7D6               	goto	l2378
 14144  004850                     l2388:
 14145                           
 14146                           ;RF24Network_c.c: 1309: }
 14147                           ;RF24Network_c.c: 1311: return result;
 14148                           ;stkvar	_result @ sp[(-2)+1]
 14149  004850  0EFF               	movlw	-1
 14150  004852  CFE3 F050          	movff	plusw1,btemp
 14151                           
 14152                           ; _RF24N_is_valid_address: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 par
      +                          size = 4, argsize = 4, vargsize = 0
 14153  004856  0EFA               	movlw	250
 14154  004858  26E1               	addwf	fsr1l,f,c
 14155  00485A  0EFF               	movlw	255
 14156  00485C  22E2               	addwfc	fsr1h,f,c
 14157  00485E  0012               	return		;funcret
 14158  004860                     __end_of_RF24N_is_valid_address:
 14159                           	opt stack 0
 14160                           tblptru	equ	0xFF8
 14161                           tblptrh	equ	0xFF7
 14162                           tblptrl	equ	0xFF6
 14163                           tablat	equ	0xFF5
 14164                           prodh	equ	0xFF4
 14165                           prodl	equ	0xFF3
 14166                           intcon	equ	0xFF2
 14167                           indf0	equ	0xFEF
 14168                           postinc0	equ	0xFEE
 14169                           postdec0	equ	0xFED
 14170                           fsr0h	equ	0xFEA
 14171                           fsr0l	equ	0xFE9
 14172                           wreg	equ	0xFE8
 14173                           postinc1	equ	0xFE6
 14174                           postdec1	equ	0xFE5
 14175                           plusw1	equ	0xFE3
 14176                           fsr1h	equ	0xFE2
 14177                           fsr1l	equ	0xFE1
 14178                           indf2	equ	0xFDF
 14179                           postinc2	equ	0xFDE
 14180                           postdec2	equ	0xFDD
 14181                           plusw2	equ	0xFDB
 14182                           fsr2h	equ	0xFDA
 14183                           fsr2l	equ	0xFD9
 14184                           status	equ	0xFD8
 14185                           
 14186 ;; *************** function _RF24_isValid *****************
 14187 ;; Defined at:
 14188 ;;		line 1407 in file "../../../RF24_c/RF24_c.c"
 14189 ;; Parameters:    Size  Location     Type
 14190 ;;  rf              2  [STACK] PTR struct RF24
 14191 ;;		 -> radio(22), 
 14192 ;; Auto vars:     Size  Location     Type
 14193 ;;		None
 14194 ;; Return value:  Size  Location     Type
 14195 ;;                  1  [STACK] unsigned char 
 14196 ;; Registers used:
 14197 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 14198 ;; Tracked objects:
 14199 ;;		On entry : 0/0
 14200 ;;		On exit  : 0/0
 14201 ;;		Unchanged: 0/0
 14202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14207 ;;Total ram usage:        0 bytes
 14208 ;; Hardware stack levels used:    1
 14209 ;; Hardware stack levels required when called:    1
 14210 ;; This function calls:
 14211 ;;		Nothing
 14212 ;; This function is called by:
 14213 ;;		_RF24N_begin_d
 14214 ;;		_RF24N_update
 14215 ;; This function uses a reentrant model
 14216 ;;
 14217                           
 14218                           	psect	text57
 14219  004CF0                     __ptext57:
 14220                           	opt stack 0
 14221  004CF0                     _RF24_isValid:
 14222                           	opt stack 0
 14223                           
 14224                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 14225  004CF0  52E6               	movf	postinc1,f,c
 14226                           
 14227                           ;RF24_c.c: 1409: return rf->ce_pin != 0xff && rf->csn_pin != 0xff;
 14228                           ;stkvar	_RF24_isValid$2293 @ sp[(-1)+0]
 14229                           
 14230                           ;incstack = 0
 14231  004CF2  0EFF               	movlw	-1
 14232  004CF4  6AE3               	clrf	plusw1,c
 14233                           
 14234                           ;stkvar	_rf @ sp[(-1)+-2]
 14235  004CF6  0EFD               	movlw	-3
 14236  004CF8  CFE3 FFD9          	movff	plusw1,fsr2l
 14237  004CFC  0EFE               	movlw	-2
 14238  004CFE  CFE3 FFDA          	movff	plusw1,fsr2h
 14239  004D02  50DF               	movf	indf2,w,c
 14240  004D04  0AFF               	xorlw	255
 14241  004D06  B4D8               	btfsc	status,2,c
 14242  004D08  D012               	goto	l2400
 14243                           
 14244                           ;stkvar	_rf @ sp[(-1)+-2]
 14245  004D0A  0EFD               	movlw	-3
 14246  004D0C  CFE3 F051          	movff	plusw1,btemp+1
 14247  004D10  0EFE               	movlw	-2
 14248  004D12  CFE3 F052          	movff	plusw1,btemp+2
 14249  004D16  0E01               	movlw	1
 14250  004D18  2451               	addwf	btemp+1,w,c
 14251  004D1A  6ED9               	movwf	fsr2l,c
 14252  004D1C  0E00               	movlw	0
 14253  004D1E  2052               	addwfc	btemp+2,w,c
 14254  004D20  6EDA               	movwf	fsr2h,c
 14255  004D22  28DE               	incf	postinc2,w,c
 14256  004D24  B4D8               	btfsc	status,2,c
 14257  004D26  D003               	goto	l2400
 14258                           
 14259                           ;stkvar	_RF24_isValid$2293 @ sp[(-1)+0]
 14260  004D28  0EFF               	movlw	-1
 14261  004D2A  6AE3               	clrf	plusw1,c
 14262  004D2C  2AE3               	incf	plusw1,f,c
 14263  004D2E                     l2400:
 14264                           
 14265                           ;stkvar	_RF24_isValid$2293 @ sp[(-1)+0]
 14266  004D2E  0EFF               	movlw	-1
 14267  004D30  CFE3 F050          	movff	plusw1,btemp
 14268                           
 14269                           ; _RF24_isValid: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, 
      +                          argsize = 2, vargsize = 0
 14270  004D34  52E5               	movf	postdec1,f,c
 14271  004D36  52E5               	movf	postdec1,f,c
 14272  004D38  52E5               	movf	postdec1,f,c
 14273  004D3A  0012               	return		;funcret
 14274  004D3C                     __end_of_RF24_isValid:
 14275                           	opt stack 0
 14276                           tblptru	equ	0xFF8
 14277                           tblptrh	equ	0xFF7
 14278                           tblptrl	equ	0xFF6
 14279                           tablat	equ	0xFF5
 14280                           prodh	equ	0xFF4
 14281                           prodl	equ	0xFF3
 14282                           intcon	equ	0xFF2
 14283                           indf0	equ	0xFEF
 14284                           postinc0	equ	0xFEE
 14285                           postdec0	equ	0xFED
 14286                           fsr0h	equ	0xFEA
 14287                           fsr0l	equ	0xFE9
 14288                           wreg	equ	0xFE8
 14289                           postinc1	equ	0xFE6
 14290                           postdec1	equ	0xFE5
 14291                           plusw1	equ	0xFE3
 14292                           fsr1h	equ	0xFE2
 14293                           fsr1l	equ	0xFE1
 14294                           indf2	equ	0xFDF
 14295                           postinc2	equ	0xFDE
 14296                           postdec2	equ	0xFDD
 14297                           plusw2	equ	0xFDB
 14298                           fsr2h	equ	0xFDA
 14299                           fsr2l	equ	0xFD9
 14300                           status	equ	0xFD8
 14301                           
 14302 ;; *************** function _delayMicroseconds *****************
 14303 ;; Defined at:
 14304 ;;		line 194 in file "../../../RF24_c/utility/XC8/spi.c"
 14305 ;; Parameters:    Size  Location     Type
 14306 ;;  d               1  [STACK] unsigned char 
 14307 ;; Auto vars:     Size  Location     Type
 14308 ;;  j               2  [STACK] unsigned int 
 14309 ;;  i               2  [STACK] unsigned int 
 14310 ;; Return value:  Size  Location     Type
 14311 ;;                  1  [STACK] void 
 14312 ;; Registers used:
 14313 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2
 14314 ;; Tracked objects:
 14315 ;;		On entry : 0/0
 14316 ;;		On exit  : 0/0
 14317 ;;		Unchanged: 0/0
 14318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14323 ;;Total ram usage:        0 bytes
 14324 ;; Hardware stack levels used:    1
 14325 ;; Hardware stack levels required when called:    1
 14326 ;; This function calls:
 14327 ;;		Nothing
 14328 ;; This function is called by:
 14329 ;;		_RF24N_write_
 14330 ;;		_RF24_csn_d
 14331 ;;		_RF24_stopListening
 14332 ;; This function uses a reentrant model
 14333 ;;
 14334                           
 14335                           	psect	text58
 14336  0044F6                     __ptext58:
 14337                           	opt stack 0
 14338  0044F6                     _delayMicroseconds:
 14339                           	opt stack 0
 14340                           
 14341                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 1, argsize = 1 var
      +                          gsize = 0, retsize = 0
 14342  0044F6  52E6               	movf	postinc1,f,c
 14343  0044F8  52E6               	movf	postinc1,f,c
 14344  0044FA  52E6               	movf	postinc1,f,c
 14345  0044FC  52E6               	movf	postinc1,f,c
 14346                           
 14347                           ;spi.c: 196: unsigned int i,j;
 14348                           ;spi.c: 197: for(i=0;i<d;i++)
 14349                           ;stkvar	_i @ sp[(-4)+2]
 14350                           
 14351                           ;incstack = 0
 14352  0044FE  0EFE               	movlw	-2
 14353  004500  6AE3               	clrf	plusw1,c
 14354  004502  0EFF               	movlw	-1
 14355  004504  6AE3               	clrf	plusw1,c
 14356  004506  D02D               	goto	l1918
 14357  004508                     l1908:
 14358                           
 14359                           ;spi.c: 198: for (j =0 ; j < (32000000/(4000000l)); j++)
 14360                           ;stkvar	_j @ sp[(-4)+0]
 14361  004508  0EFC               	movlw	-4
 14362  00450A  6AE3               	clrf	plusw1,c
 14363  00450C  0EFD               	movlw	-3
 14364  00450E  6AE3               	clrf	plusw1,c
 14365  004510                     l1041:
 14366  004510  F000               	nop		;# 
 14367                           
 14368                           ;stkvar	_j @ sp[(-4)+0]
 14369  004512  0EFC               	movlw	-4
 14370  004514  50E3               	movf	plusw1,w,c
 14371  004516  0F01               	addlw	1
 14372  004518  6E50               	movwf	btemp,c
 14373  00451A  0EFC               	movlw	-4
 14374  00451C  C050  FFE3         	movff	btemp,plusw1
 14375  004520  6A50               	clrf	btemp,c
 14376  004522  0EFD               	movlw	-3
 14377  004524  50E3               	movf	plusw1,w,c
 14378  004526  2050               	addwfc	btemp,w,c
 14379  004528  6E50               	movwf	btemp,c
 14380  00452A  0EFD               	movlw	-3
 14381  00452C  C050  FFE3         	movff	btemp,plusw1
 14382                           
 14383                           ;stkvar	_j @ sp[(-4)+0]
 14384  004530  0EFD               	movlw	-3
 14385  004532  50E3               	movf	plusw1,w,c
 14386  004534  E107               	bnz	u10
 14387  004536  0EFC               	movlw	-4
 14388  004538  CFE3 F050          	movff	plusw1,btemp
 14389  00453C  0E08               	movlw	8
 14390  00453E  5E50               	subwf	btemp,f,c
 14391  004540  A0D8               	btfss	status,0,c
 14392  004542  D7E6               	goto	l1041
 14393  004544                     u10:
 14394                           
 14395                           ;stkvar	_i @ sp[(-4)+2]
 14396  004544  0EFE               	movlw	-2
 14397  004546  50E3               	movf	plusw1,w,c
 14398  004548  0F01               	addlw	1
 14399  00454A  6E50               	movwf	btemp,c
 14400  00454C  0EFE               	movlw	-2
 14401  00454E  C050  FFE3         	movff	btemp,plusw1
 14402  004552  6A50               	clrf	btemp,c
 14403  004554  0EFF               	movlw	-1
 14404  004556  50E3               	movf	plusw1,w,c
 14405  004558  2050               	addwfc	btemp,w,c
 14406  00455A  6E50               	movwf	btemp,c
 14407  00455C  0EFF               	movlw	-1
 14408  00455E  C050  FFE3         	movff	btemp,plusw1
 14409  004562                     l1918:
 14410                           
 14411                           ;stkvar	_d @ sp[(-4)+-1]
 14412  004562  0EFB               	movlw	-5
 14413  004564  50E3               	movf	plusw1,w,c
 14414  004566  6E51               	movwf	btemp+1,c
 14415  004568  6A52               	clrf	btemp+2,c
 14416                           
 14417                           ;stkvar	_i @ sp[(-4)+2]
 14418  00456A  0EFE               	movlw	-2
 14419  00456C  CFE3 F050          	movff	plusw1,btemp
 14420  004570  5051               	movf	btemp+1,w,c
 14421  004572  5C50               	subwf	btemp,w,c
 14422  004574  0EFF               	movlw	-1
 14423  004576  CFE3 F050          	movff	plusw1,btemp
 14424  00457A  5052               	movf	btemp+2,w,c
 14425  00457C  5850               	subwfb	btemp,w,c
 14426  00457E  A0D8               	btfss	status,0,c
 14427  004580  D7C3               	goto	l1908
 14428                           
 14429                           ; _delayMicroseconds: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 1, argsize = 1, vargsize = 0
 14430  004582  0EFB               	movlw	251
 14431  004584  26E1               	addwf	fsr1l,f,c
 14432  004586  0EFF               	movlw	255
 14433  004588  22E2               	addwfc	fsr1h,f,c
 14434  00458A  0012               	return		;funcret
 14435  00458C                     __end_of_delayMicroseconds:
 14436                           	opt stack 0
 14437                           tblptru	equ	0xFF8
 14438                           tblptrh	equ	0xFF7
 14439                           tblptrl	equ	0xFF6
 14440                           tablat	equ	0xFF5
 14441                           prodh	equ	0xFF4
 14442                           prodl	equ	0xFF3
 14443                           intcon	equ	0xFF2
 14444                           indf0	equ	0xFEF
 14445                           postinc0	equ	0xFEE
 14446                           postdec0	equ	0xFED
 14447                           fsr0h	equ	0xFEA
 14448                           fsr0l	equ	0xFE9
 14449                           wreg	equ	0xFE8
 14450                           postinc1	equ	0xFE6
 14451                           postdec1	equ	0xFE5
 14452                           plusw1	equ	0xFE3
 14453                           fsr1h	equ	0xFE2
 14454                           fsr1l	equ	0xFE1
 14455                           indf2	equ	0xFDF
 14456                           postinc2	equ	0xFDE
 14457                           postdec2	equ	0xFDD
 14458                           plusw2	equ	0xFDB
 14459                           fsr2h	equ	0xFDA
 14460                           fsr2l	equ	0xFD9
 14461                           status	equ	0xFD8
 14462                           
 14463 ;; *************** function _RF24_ce_d *****************
 14464 ;; Defined at:
 14465 ;;		line 64 in file "../../../RF24_c/RF24_c.c"
 14466 ;; Parameters:    Size  Location     Type
 14467 ;;  rf              2  [STACK] PTR struct RF24
 14468 ;;		 -> radio(22), 
 14469 ;;  level           1  [STACK] unsigned char 
 14470 ;; Auto vars:     Size  Location     Type
 14471 ;;		None
 14472 ;; Return value:  Size  Location     Type
 14473 ;;                  1  [STACK] void 
 14474 ;; Registers used:
 14475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 14476 ;; Tracked objects:
 14477 ;;		On entry : 0/0
 14478 ;;		On exit  : 0/0
 14479 ;;		Unchanged: 0/0
 14480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14485 ;;Total ram usage:        0 bytes
 14486 ;; Hardware stack levels used:    1
 14487 ;; Hardware stack levels required when called:    2
 14488 ;; This function calls:
 14489 ;;		_digitalWrite
 14490 ;; This function is called by:
 14491 ;;		_RF24_begin
 14492 ;;		_RF24_startListening
 14493 ;;		_RF24_stopListening
 14494 ;;		_RF24_startFastWrite
 14495 ;;		_RF24_txStandBy_t
 14496 ;; This function uses a reentrant model
 14497 ;;
 14498                           
 14499                           	psect	text59
 14500  004C54                     __ptext59:
 14501                           	opt stack 0
 14502  004C54                     _RF24_ce_d:
 14503                           	opt stack 26
 14504                           
 14505                           ;RF24_c.c: 67: if (rf->ce_pin != rf->csn_pin) digitalWrite(rf->ce_pin,level);
 14506                           ;stkvar	_rf @ sp[(0)+-2]
 14507                           
 14508                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 14509                           ;incstack = 0
 14510  004C54  0EFE               	movlw	-2
 14511  004C56  CFE3 F051          	movff	plusw1,btemp+1
 14512  004C5A  0EFF               	movlw	-1
 14513  004C5C  CFE3 F052          	movff	plusw1,btemp+2
 14514  004C60  0E01               	movlw	1
 14515  004C62  2451               	addwf	btemp+1,w,c
 14516  004C64  6ED9               	movwf	fsr2l,c
 14517  004C66  0E00               	movlw	0
 14518  004C68  2052               	addwfc	btemp+2,w,c
 14519  004C6A  6EDA               	movwf	fsr2h,c
 14520                           
 14521                           ;stkvar	_rf @ sp[(0)+-2]
 14522  004C6C  0EFE               	movlw	-2
 14523  004C6E  CFE3 FFE9          	movff	plusw1,fsr0l
 14524  004C72  0EFF               	movlw	-1
 14525  004C74  CFE3 FFEA          	movff	plusw1,fsr0h
 14526  004C78  50DE               	movf	postinc2,w,c
 14527  004C7A  18EE               	xorwf	postinc0,w,c
 14528  004C7C  B4D8               	btfsc	status,2,c
 14529  004C7E  D00D               	goto	l479
 14530                           
 14531                           ;stkvar	_level @ sp[(0)+-3]
 14532  004C80  0EFD               	movlw	-3
 14533  004C82  50E3               	movf	plusw1,w,c
 14534  004C84  6EE6               	movwf	postinc1,c
 14535                           
 14536                           ;stkvar	_rf @ sp[(-1)+-2]
 14537  004C86  0EFD               	movlw	-3
 14538  004C88  CFE3 FFD9          	movff	plusw1,fsr2l
 14539  004C8C  0EFE               	movlw	-2
 14540  004C8E  CFE3 FFDA          	movff	plusw1,fsr2h
 14541  004C92  50DF               	movf	indf2,w,c
 14542  004C94  6EE6               	movwf	postinc1,c
 14543  004C96  EC76  F011         	call	_digitalWrite	;wreg free
 14544  004C9A                     l479:
 14545                           
 14546                           ; _RF24_ce_d: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, arg
      +                          size = 3, vargsize = 0
 14547  004C9A  52E5               	movf	postdec1,f,c
 14548  004C9C  52E5               	movf	postdec1,f,c
 14549  004C9E  52E5               	movf	postdec1,f,c
 14550  004CA0  0012               	return		;funcret
 14551  004CA2                     __end_of_RF24_ce_d:
 14552                           	opt stack 0
 14553                           tblptru	equ	0xFF8
 14554                           tblptrh	equ	0xFF7
 14555                           tblptrl	equ	0xFF6
 14556                           tablat	equ	0xFF5
 14557                           prodh	equ	0xFF4
 14558                           prodl	equ	0xFF3
 14559                           intcon	equ	0xFF2
 14560                           indf0	equ	0xFEF
 14561                           postinc0	equ	0xFEE
 14562                           postdec0	equ	0xFED
 14563                           fsr0h	equ	0xFEA
 14564                           fsr0l	equ	0xFE9
 14565                           wreg	equ	0xFE8
 14566                           postinc1	equ	0xFE6
 14567                           postdec1	equ	0xFE5
 14568                           plusw1	equ	0xFE3
 14569                           fsr1h	equ	0xFE2
 14570                           fsr1l	equ	0xFE1
 14571                           indf2	equ	0xFDF
 14572                           postinc2	equ	0xFDE
 14573                           postdec2	equ	0xFDD
 14574                           plusw2	equ	0xFDB
 14575                           fsr2h	equ	0xFDA
 14576                           fsr2l	equ	0xFD9
 14577                           status	equ	0xFD8
 14578                           
 14579 ;; *************** function _RF24_flush_tx *****************
 14580 ;; Defined at:
 14581 ;;		line 345 in file "../../../RF24_c/RF24_c.c"
 14582 ;; Parameters:    Size  Location     Type
 14583 ;;  rf              2  [STACK] PTR struct RF24
 14584 ;;		 -> radio(22), 
 14585 ;; Auto vars:     Size  Location     Type
 14586 ;;		None
 14587 ;; Return value:  Size  Location     Type
 14588 ;;                  1  [STACK] unsigned char 
 14589 ;; Registers used:
 14590 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 14591 ;; Tracked objects:
 14592 ;;		On entry : 0/0
 14593 ;;		On exit  : 0/0
 14594 ;;		Unchanged: 0/0
 14595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14600 ;;Total ram usage:        0 bytes
 14601 ;; Hardware stack levels used:    1
 14602 ;; Hardware stack levels required when called:    5
 14603 ;; This function calls:
 14604 ;;		_RF24_spiTrans
 14605 ;; This function is called by:
 14606 ;;		_RF24_begin
 14607 ;;		_RF24_startListening
 14608 ;;		_RF24_stopListening
 14609 ;;		_RF24_txStandBy_t
 14610 ;; This function uses a reentrant model
 14611 ;;
 14612                           
 14613                           	psect	text60
 14614  005068                     __ptext60:
 14615                           	opt stack 0
 14616  005068                     _RF24_flush_tx:
 14617                           	opt stack 23
 14618                           
 14619                           ;RF24_c.c: 347: return RF24_spiTrans(rf, 0xE1 );
 14620                           ;	Return value of _RF24_flush_tx is never used
 14621                           
 14622                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 14623                           ;incstack = 0
 14624  005068  0EE1               	movlw	225
 14625  00506A  6EE6               	movwf	postinc1,c
 14626                           
 14627                           ;stkvar	_rf @ sp[(-1)+-2]
 14628  00506C  0EFD               	movlw	-3
 14629  00506E  CFE3 FFE6          	movff	plusw1,postinc1
 14630  005072  CFE3 FFE6          	movff	plusw1,postinc1
 14631  005076  EC6B  F027         	call	_RF24_spiTrans	;wreg free
 14632                           
 14633                           ; _RF24_flush_tx: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2,
      +                           argsize = 2, vargsize = 0
 14634  00507A  52E5               	movf	postdec1,f,c
 14635  00507C  52E5               	movf	postdec1,f,c
 14636  00507E  0012               	return		;funcret
 14637  005080                     __end_of_RF24_flush_tx:
 14638                           	opt stack 0
 14639                           tblptru	equ	0xFF8
 14640                           tblptrh	equ	0xFF7
 14641                           tblptrl	equ	0xFF6
 14642                           tablat	equ	0xFF5
 14643                           prodh	equ	0xFF4
 14644                           prodl	equ	0xFF3
 14645                           intcon	equ	0xFF2
 14646                           indf0	equ	0xFEF
 14647                           postinc0	equ	0xFEE
 14648                           postdec0	equ	0xFED
 14649                           fsr0h	equ	0xFEA
 14650                           fsr0l	equ	0xFE9
 14651                           wreg	equ	0xFE8
 14652                           postinc1	equ	0xFE6
 14653                           postdec1	equ	0xFE5
 14654                           plusw1	equ	0xFE3
 14655                           fsr1h	equ	0xFE2
 14656                           fsr1l	equ	0xFE1
 14657                           indf2	equ	0xFDF
 14658                           postinc2	equ	0xFDE
 14659                           postdec2	equ	0xFDD
 14660                           plusw2	equ	0xFDB
 14661                           fsr2h	equ	0xFDA
 14662                           fsr2l	equ	0xFD9
 14663                           status	equ	0xFD8
 14664                           
 14665 ;; *************** function _RF24_powerUp *****************
 14666 ;; Defined at:
 14667 ;;		line 788 in file "../../../RF24_c/RF24_c.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  rf              2  [STACK] PTR struct RF24
 14670 ;;		 -> radio(22), 
 14671 ;; Auto vars:     Size  Location     Type
 14672 ;;  cfg             1  [STACK] unsigned char 
 14673 ;; Return value:  Size  Location     Type
 14674 ;;                  1  [STACK] void 
 14675 ;; Registers used:
 14676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
 14677 ;; Tracked objects:
 14678 ;;		On entry : 0/0
 14679 ;;		On exit  : 0/0
 14680 ;;		Unchanged: 0/0
 14681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14686 ;;Total ram usage:        0 bytes
 14687 ;; Hardware stack levels used:    1
 14688 ;; Hardware stack levels required when called:    5
 14689 ;; This function calls:
 14690 ;;		_RF24_read_register_d
 14691 ;;		_RF24_write_register_d
 14692 ;;		_delay
 14693 ;; This function is called by:
 14694 ;;		_RF24_begin
 14695 ;;		_RF24_startListening
 14696 ;; This function uses a reentrant model
 14697 ;;
 14698                           
 14699                           	psect	text61
 14700  004CA2                     __ptext61:
 14701                           	opt stack 0
 14702  004CA2                     _RF24_powerUp:
 14703                           	opt stack 0
 14704                           
 14705                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 14706  004CA2  52E6               	movf	postinc1,f,c
 14707                           
 14708                           ;RF24_c.c: 790: uint8_t cfg = RF24_read_register_d(rf,0x00);
 14709                           
 14710                           ;incstack = 0
 14711  004CA4  0E00               	movlw	0
 14712  004CA6  6EE6               	movwf	postinc1,c
 14713                           
 14714                           ;stkvar	_rf @ sp[(-2)+-2]
 14715  004CA8  0EFC               	movlw	-4
 14716  004CAA  CFE3 FFE6          	movff	plusw1,postinc1
 14717  004CAE  CFE3 FFE6          	movff	plusw1,postinc1
 14718  004CB2  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 14719                           
 14720                           ;stkvar	_cfg @ sp[(-1)+0]
 14721  004CB6  0EFF               	movlw	-1
 14722  004CB8  C050  FFE3         	movff	btemp,plusw1
 14723                           
 14724                           ;RF24_c.c: 793: if (!(cfg & (1<<(1)))){
 14725                           ;stkvar	_cfg @ sp[(-1)+0]
 14726  004CBC  0EFF               	movlw	-1
 14727  004CBE  B2E3               	btfsc	plusw1,1,c
 14728  004CC0  D013               	goto	l652
 14729                           
 14730                           ;RF24_c.c: 794: RF24_write_register_d(rf,0x00, cfg | (1<<(1)));
 14731                           ;stkvar	_cfg @ sp[(-1)+0]
 14732  004CC2  0EFF               	movlw	-1
 14733  004CC4  50E3               	movf	plusw1,w,c
 14734  004CC6  0902               	iorlw	2
 14735  004CC8  6EE6               	movwf	postinc1,c
 14736  004CCA  0E00               	movlw	0
 14737  004CCC  6EE6               	movwf	postinc1,c
 14738                           
 14739                           ;stkvar	_rf @ sp[(-3)+-2]
 14740  004CCE  0EFB               	movlw	-5
 14741  004CD0  CFE3 FFE6          	movff	plusw1,postinc1
 14742  004CD4  CFE3 FFE6          	movff	plusw1,postinc1
 14743  004CD8  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 14744                           
 14745                           ;RF24_c.c: 799: delay(5);
 14746  004CDC  0E05               	movlw	5
 14747  004CDE  6EE6               	movwf	postinc1,c
 14748  004CE0  0E00               	movlw	0
 14749  004CE2  6EE6               	movwf	postinc1,c
 14750  004CE4  ECD8  F020         	call	_delay	;wreg free
 14751  004CE8                     l652:
 14752                           
 14753                           ; _RF24_powerUp: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, 
      +                          argsize = 2, vargsize = 0
 14754  004CE8  52E5               	movf	postdec1,f,c
 14755  004CEA  52E5               	movf	postdec1,f,c
 14756  004CEC  52E5               	movf	postdec1,f,c
 14757  004CEE  0012               	return		;funcret
 14758  004CF0                     __end_of_RF24_powerUp:
 14759                           	opt stack 0
 14760                           tblptru	equ	0xFF8
 14761                           tblptrh	equ	0xFF7
 14762                           tblptrl	equ	0xFF6
 14763                           tablat	equ	0xFF5
 14764                           prodh	equ	0xFF4
 14765                           prodl	equ	0xFF3
 14766                           intcon	equ	0xFF2
 14767                           indf0	equ	0xFEF
 14768                           postinc0	equ	0xFEE
 14769                           postdec0	equ	0xFED
 14770                           fsr0h	equ	0xFEA
 14771                           fsr0l	equ	0xFE9
 14772                           wreg	equ	0xFE8
 14773                           postinc1	equ	0xFE6
 14774                           postdec1	equ	0xFE5
 14775                           plusw1	equ	0xFE3
 14776                           fsr1h	equ	0xFE2
 14777                           fsr1l	equ	0xFE1
 14778                           indf2	equ	0xFDF
 14779                           postinc2	equ	0xFDE
 14780                           postdec2	equ	0xFDD
 14781                           plusw2	equ	0xFDB
 14782                           fsr2h	equ	0xFDA
 14783                           fsr2l	equ	0xFD9
 14784                           status	equ	0xFD8
 14785                           
 14786 ;; *************** function _RF24N_update *****************
 14787 ;; Defined at:
 14788 ;;		line 222 in file "../../RF24Network_c.c"
 14789 ;; Parameters:    Size  Location     Type
 14790 ;;  rn              2  [STACK] PTR struct .
 14791 ;;		 -> network(372), 
 14792 ;; Auto vars:     Size  Location     Type
 14793 ;;  val             1  [STACK] unsigned char 
 14794 ;;  requester       2    0        unsigned int 
 14795 ;;  header          2  [STACK] PTR struct .
 14796 ;;		 -> network.frame_buffer(32), network(372), 
 14797 ;;  returnVal       1  [STACK] unsigned char 
 14798 ;;  pipe_num        1  [STACK] unsigned char 
 14799 ;; Return value:  Size  Location     Type
 14800 ;;                  1  [STACK] unsigned char 
 14801 ;; Registers used:
 14802 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
 14803 ;; Tracked objects:
 14804 ;;		On entry : 0/0
 14805 ;;		On exit  : 0/0
 14806 ;;		Unchanged: 0/0
 14807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14812 ;;Total ram usage:        0 bytes
 14813 ;; Hardware stack levels used:    1
 14814 ;; Hardware stack levels required when called:   10
 14815 ;; This function calls:
 14816 ;;		_RF24N_available
 14817 ;;		_RF24N_enqueue
 14818 ;;		_RF24N_is_valid_address
 14819 ;;		_RF24N_levelToAddress
 14820 ;;		_RF24N_write
 14821 ;;		_RF24_available_p
 14822 ;;		_RF24_getDynamicPayloadSize
 14823 ;;		_RF24_isValid
 14824 ;;		_RF24_read
 14825 ;;		_delay
 14826 ;; This function is called by:
 14827 ;;		_loop
 14828 ;;		_RF24N_write_
 14829 ;;		_RF24N_write
 14830 ;; This function uses a recursive model
 14831 ;;
 14832                           
 14833                           	psect	text62
 14834  000B48                     __ptext62:
 14835                           	opt stack 0
 14836  000B48                     _RF24N_update:
 14837                           	opt stack 0
 14838                           
 14839                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 14840  000B48  0E05               	movlw	5
 14841  000B4A  26E1               	addwf	fsr1l,f,c
 14842  000B4C  0E00               	movlw	0
 14843  000B4E  22E2               	addwfc	fsr1h,f,c
 14844                           
 14845                           ;RF24Network_c.c: 225: uint8_t pipe_num;
 14846                           ;RF24Network_c.c: 226: uint8_t returnVal = 0;
 14847                           ;stkvar	_returnVal @ sp[(-5)+3]
 14848                           
 14849                           ;incstack = 0
 14850  000B50  0EFE               	movlw	-2
 14851  000B52  6AE3               	clrf	plusw1,c
 14852                           
 14853                           ;RF24Network_c.c: 233: if(!(rn->networkFlags & 2)){
 14854                           ;stkvar	_rn @ sp[(-5)+-2]
 14855  000B54  0EF9               	movlw	-7
 14856  000B56  CFE3 F051          	movff	plusw1,btemp+1
 14857  000B5A  0EFA               	movlw	-6
 14858  000B5C  CFE3 F052          	movff	plusw1,btemp+2
 14859  000B60  0E2A               	movlw	42
 14860  000B62  2451               	addwf	btemp+1,w,c
 14861  000B64  6ED9               	movwf	fsr2l,c
 14862  000B66  0E00               	movlw	0
 14863  000B68  2052               	addwfc	btemp+2,w,c
 14864  000B6A  6EDA               	movwf	fsr2h,c
 14865  000B6C  B2DF               	btfsc	indf2,1,c
 14866  000B6E  D38E               	goto	l2854
 14867                           
 14868                           ;RF24Network_c.c: 234: if( (rn->networkFlags & 1) || (rn->next_frame-rn->frame_queue) + 
      +                          34 > 144 + 10 ){
 14869                           ;stkvar	_rn @ sp[(-5)+-2]
 14870  000B70  0EF9               	movlw	-7
 14871  000B72  CFE3 F051          	movff	plusw1,btemp+1
 14872  000B76  0EFA               	movlw	-6
 14873  000B78  CFE3 F052          	movff	plusw1,btemp+2
 14874  000B7C  0E2A               	movlw	42
 14875  000B7E  2451               	addwf	btemp+1,w,c
 14876  000B80  6ED9               	movwf	fsr2l,c
 14877  000B82  0E00               	movlw	0
 14878  000B84  2052               	addwfc	btemp+2,w,c
 14879  000B86  6EDA               	movwf	fsr2h,c
 14880  000B88  B0DF               	btfsc	indf2,0,c
 14881  000B8A  D02A               	goto	l2748
 14882  000B8C  0EE6               	movlw	230
 14883  000B8E  6E51               	movwf	btemp+1,c
 14884  000B90  0EFF               	movlw	255
 14885  000B92  6E52               	movwf	btemp+2,c
 14886                           
 14887                           ;stkvar	_rn @ sp[(-5)+-2]
 14888  000B94  0EF9               	movlw	-7
 14889  000B96  CFE3 F05A          	movff	plusw1,btemp+10
 14890  000B9A  0EFA               	movlw	-6
 14891  000B9C  CFE3 F05B          	movff	plusw1,btemp+11
 14892                           
 14893                           ;stkvar	_rn @ sp[(-5)+-2]
 14894  000BA0  0EF9               	movlw	-7
 14895  000BA2  CFE3 F058          	movff	plusw1,btemp+8
 14896  000BA6  0EFA               	movlw	-6
 14897  000BA8  CFE3 F059          	movff	plusw1,btemp+9
 14898  000BAC  0ED6               	movlw	214
 14899  000BAE  2458               	addwf	btemp+8,w,c
 14900  000BB0  6ED9               	movwf	fsr2l,c
 14901  000BB2  0E00               	movlw	0
 14902  000BB4  2059               	addwfc	btemp+9,w,c
 14903  000BB6  6EDA               	movwf	fsr2h,c
 14904  000BB8  CFDE F058          	movff	postinc2,btemp+8
 14905  000BBC  CFDD F059          	movff	postdec2,btemp+9
 14906  000BC0  505A               	movf	btemp+10,w,c
 14907  000BC2  5E58               	subwf	btemp+8,f,c
 14908  000BC4  505B               	movf	btemp+11,w,c
 14909  000BC6  5A59               	subwfb	btemp+9,f,c
 14910  000BC8  5051               	movf	btemp+1,w,c
 14911  000BCA  2658               	addwf	btemp+8,f,c
 14912  000BCC  5052               	movf	btemp+2,w,c
 14913  000BCE  2259               	addwfc	btemp+9,f,c
 14914  000BD0  BE59               	btfsc	btemp+9,7,c
 14915  000BD2  D35C               	goto	l2854
 14916  000BD4  5059               	movf	btemp+9,w,c
 14917  000BD6  E104               	bnz	u1430
 14918  000BD8  0E9B               	movlw	155
 14919  000BDA  5C58               	subwf	btemp+8,w,c
 14920  000BDC  A0D8               	btfss	status,0,c
 14921  000BDE  D356               	goto	l2854
 14922  000BE0                     u1430:
 14923  000BE0                     l2748:
 14924                           
 14925                           ;RF24Network_c.c: 235: if(!RF24N_available(rn)){
 14926                           ;stkvar	_rn @ sp[(-5)+-2]
 14927  000BE0  0EF9               	movlw	-7
 14928  000BE2  CFE3 FFE6          	movff	plusw1,postinc1
 14929  000BE6  CFE3 FFE6          	movff	plusw1,postinc1
 14930  000BEA  EC0B  F027         	call	_RF24N_available	;wreg free
 14931  000BEE  5050               	movf	btemp,w,c
 14932  000BF0  A4D8               	btfss	status,2,c
 14933  000BF2  D00F               	goto	l2752
 14934                           
 14935                           ;RF24Network_c.c: 236: rn->networkFlags &= ~1;
 14936                           ;stkvar	_rn @ sp[(-5)+-2]
 14937  000BF4  0EF9               	movlw	-7
 14938  000BF6  CFE3 F051          	movff	plusw1,btemp+1
 14939  000BFA  0EFA               	movlw	-6
 14940  000BFC  CFE3 F052          	movff	plusw1,btemp+2
 14941  000C00  0E2A               	movlw	42
 14942  000C02  2451               	addwf	btemp+1,w,c
 14943  000C04  6ED9               	movwf	fsr2l,c
 14944  000C06  0E00               	movlw	0
 14945  000C08  2052               	addwfc	btemp+2,w,c
 14946  000C0A  6EDA               	movwf	fsr2h,c
 14947  000C0C  0EFE               	movlw	254
 14948  000C0E  16DF               	andwf	indf2,f,c
 14949                           
 14950                           ;RF24Network_c.c: 237: }else{
 14951  000C10  D33D               	goto	l2854
 14952  000C12                     l2752:
 14953                           
 14954                           ;RF24Network_c.c: 238: return 0;
 14955  000C12  0E00               	movlw	0
 14956  000C14  D237               	goto	L18
 14957  000C16                     l2756:
 14958                           
 14959                           ;RF24Network_c.c: 247: if( (rn->frame_size = RF24_getDynamicPayloadSize(rn->radio) ) < s
      +                          izeof(RF24NetworkHeader)){
 14960                           ;stkvar	_rn @ sp[(-5)+-2]
 14961  000C16  0EF9               	movlw	-7
 14962  000C18  CFE3 F051          	movff	plusw1,btemp+1
 14963  000C1C  0EFA               	movlw	-6
 14964  000C1E  CFE3 F052          	movff	plusw1,btemp+2
 14965  000C22  0E2F               	movlw	47
 14966  000C24  2451               	addwf	btemp+1,w,c
 14967  000C26  6ED9               	movwf	fsr2l,c
 14968  000C28  0E00               	movlw	0
 14969  000C2A  2052               	addwfc	btemp+2,w,c
 14970  000C2C  6EDA               	movwf	fsr2h,c
 14971  000C2E  CFDE F051          	movff	postinc2,btemp+1
 14972  000C32  CFDD F052          	movff	postdec2,btemp+2
 14973  000C36  C051  FFE6         	movff	btemp+1,postinc1
 14974  000C3A  C052  FFE6         	movff	btemp+2,postinc1
 14975  000C3E  EC67  F024         	call	_RF24_getDynamicPayloadSize	;wreg free
 14976                           
 14977                           ;stkvar	_rn @ sp[(-5)+-2]
 14978  000C42  0EF9               	movlw	-7
 14979  000C44  CFE3 F051          	movff	plusw1,btemp+1
 14980  000C48  0EFA               	movlw	-6
 14981  000C4A  CFE3 F052          	movff	plusw1,btemp+2
 14982  000C4E  0E34               	movlw	52
 14983  000C50  2451               	addwf	btemp+1,w,c
 14984  000C52  6ED9               	movwf	fsr2l,c
 14985  000C54  0E00               	movlw	0
 14986  000C56  2052               	addwfc	btemp+2,w,c
 14987  000C58  6EDA               	movwf	fsr2h,c
 14988  000C5A  C050  FFDF         	movff	btemp,indf2
 14989  000C5E  0E08               	movlw	8
 14990  000C60  60DF               	cpfslt	indf2,c
 14991  000C62  D007               	goto	l2760
 14992                           
 14993                           ;RF24Network_c.c: 248: delay(10);
 14994  000C64  0E0A               	movlw	10
 14995  000C66  6EE6               	movwf	postinc1,c
 14996  000C68  0E00               	movlw	0
 14997  000C6A  6EE6               	movwf	postinc1,c
 14998  000C6C  ECD8  F020         	call	_delay	;wreg free
 14999                           
 15000                           ;RF24Network_c.c: 249: continue;
 15001  000C70  D30D               	goto	l2854
 15002  000C72                     l2760:
 15003                           
 15004                           ;RF24Network_c.c: 250: }
 15005                           ;RF24Network_c.c: 256: RF24_read(rn->radio, rn->frame_buffer, rn->frame_size );
 15006                           ;stkvar	_rn @ sp[(-5)+-2]
 15007  000C72  0EF9               	movlw	-7
 15008  000C74  CFE3 F051          	movff	plusw1,btemp+1
 15009  000C78  0EFA               	movlw	-6
 15010  000C7A  CFE3 F052          	movff	plusw1,btemp+2
 15011  000C7E  0E34               	movlw	52
 15012  000C80  2451               	addwf	btemp+1,w,c
 15013  000C82  6ED9               	movwf	fsr2l,c
 15014  000C84  0E00               	movlw	0
 15015  000C86  2052               	addwfc	btemp+2,w,c
 15016  000C88  6EDA               	movwf	fsr2h,c
 15017  000C8A  50DF               	movf	indf2,w,c
 15018  000C8C  6EE6               	movwf	postinc1,c
 15019                           
 15020                           ;stkvar	_rn @ sp[(-6)+-2]
 15021  000C8E  0EF8               	movlw	-8
 15022  000C90  50E3               	movf	plusw1,w,c
 15023  000C92  0F07               	addlw	7
 15024  000C94  6E51               	movwf	btemp+1,c
 15025  000C96  0EF9               	movlw	-7
 15026  000C98  CFE3 F052          	movff	plusw1,btemp+2
 15027  000C9C  0E00               	movlw	0
 15028  000C9E  2252               	addwfc	btemp+2,f,c
 15029  000CA0  C051  FFE6         	movff	btemp+1,postinc1
 15030  000CA4  C052  FFE6         	movff	btemp+2,postinc1
 15031                           
 15032                           ;stkvar	_rn @ sp[(-8)+-2]
 15033  000CA8  0EF6               	movlw	-10
 15034  000CAA  CFE3 F051          	movff	plusw1,btemp+1
 15035  000CAE  0EF7               	movlw	-9
 15036  000CB0  CFE3 F052          	movff	plusw1,btemp+2
 15037  000CB4  0E2F               	movlw	47
 15038  000CB6  2451               	addwf	btemp+1,w,c
 15039  000CB8  6ED9               	movwf	fsr2l,c
 15040  000CBA  0E00               	movlw	0
 15041  000CBC  2052               	addwfc	btemp+2,w,c
 15042  000CBE  6EDA               	movwf	fsr2h,c
 15043  000CC0  CFDE F051          	movff	postinc2,btemp+1
 15044  000CC4  CFDD F052          	movff	postdec2,btemp+2
 15045  000CC8  C051  FFE6         	movff	btemp+1,postinc1
 15046  000CCC  C052  FFE6         	movff	btemp+2,postinc1
 15047  000CD0  EC4C  F027         	call	_RF24_read	;wreg free
 15048                           
 15049                           ;RF24Network_c.c: 259: RF24NetworkHeader *header = (RF24NetworkHeader*)(rn->frame_buffer
      +                          );
 15050                           ;stkvar	_rn @ sp[(-5)+-2]
 15051  000CD4  0EF9               	movlw	-7
 15052  000CD6  50E3               	movf	plusw1,w,c
 15053  000CD8  0F07               	addlw	7
 15054  000CDA  6E51               	movwf	btemp+1,c
 15055  000CDC  0EFA               	movlw	-6
 15056  000CDE  CFE3 F052          	movff	plusw1,btemp+2
 15057  000CE2  0E00               	movlw	0
 15058  000CE4  2252               	addwfc	btemp+2,f,c
 15059                           
 15060                           ;stkvar	_header @ sp[(-5)+1]
 15061  000CE6  0EFD               	movlw	-3
 15062  000CE8  C052  FFE3         	movff	btemp+2,plusw1
 15063  000CEC  0EFC               	movlw	-4
 15064  000CEE  C051  FFE3         	movff	btemp+1,plusw1
 15065                           
 15066                           ;RF24Network_c.c: 268: ;
 15067                           ;RF24Network_c.c: 269: ;
 15068                           ;RF24Network_c.c: 273: if ( !RF24N_is_valid_address(rn, header->to_node) ){
 15069                           ;stkvar	_header @ sp[(-5)+1]
 15070  000CF2  0EFC               	movlw	-4
 15071  000CF4  CFE3 F051          	movff	plusw1,btemp+1
 15072  000CF8  0EFD               	movlw	-3
 15073  000CFA  CFE3 F052          	movff	plusw1,btemp+2
 15074  000CFE  0E02               	movlw	2
 15075  000D00  2451               	addwf	btemp+1,w,c
 15076  000D02  6ED9               	movwf	fsr2l,c
 15077  000D04  0E00               	movlw	0
 15078  000D06  2052               	addwfc	btemp+2,w,c
 15079  000D08  6EDA               	movwf	fsr2h,c
 15080  000D0A  CFDE F051          	movff	postinc2,btemp+1
 15081  000D0E  CFDD F052          	movff	postdec2,btemp+2
 15082  000D12  C051  FFE6         	movff	btemp+1,postinc1
 15083  000D16  C052  FFE6         	movff	btemp+2,postinc1
 15084                           
 15085                           ;stkvar	_rn @ sp[(-7)+-2]
 15086  000D1A  0EF7               	movlw	-9
 15087  000D1C  CFE3 FFE6          	movff	plusw1,postinc1
 15088  000D20  CFE3 FFE6          	movff	plusw1,postinc1
 15089  000D24  ECF8  F023         	call	_RF24N_is_valid_address	;wreg free
 15090  000D28  5050               	movf	btemp,w,c
 15091  000D2A  B4D8               	btfsc	status,2,c
 15092  000D2C  D2AF               	goto	l2854
 15093                           
 15094                           ;RF24Network_c.c: 275: }
 15095                           ;RF24Network_c.c: 277: returnVal = header->type;
 15096                           ;stkvar	_header @ sp[(-5)+1]
 15097  000D2E  0EFC               	movlw	-4
 15098  000D30  CFE3 F051          	movff	plusw1,btemp+1
 15099  000D34  0EFD               	movlw	-3
 15100  000D36  CFE3 F052          	movff	plusw1,btemp+2
 15101  000D3A  0E06               	movlw	6
 15102  000D3C  2451               	addwf	btemp+1,w,c
 15103  000D3E  6ED9               	movwf	fsr2l,c
 15104  000D40  0E00               	movlw	0
 15105  000D42  2052               	addwfc	btemp+2,w,c
 15106  000D44  6EDA               	movwf	fsr2h,c
 15107  000D46  50DF               	movf	indf2,w,c
 15108  000D48  6E5B               	movwf	btemp+11,c
 15109                           
 15110                           ;stkvar	_returnVal @ sp[(-5)+3]
 15111  000D4A  0EFE               	movlw	-2
 15112  000D4C  C05B  FFE3         	movff	btemp+11,plusw1
 15113                           
 15114                           ;RF24Network_c.c: 280: if ( header->to_node == rn->node_address ){
 15115                           ;stkvar	_rn @ sp[(-5)+-2]
 15116  000D50  0EF9               	movlw	-7
 15117  000D52  CFE3 F051          	movff	plusw1,btemp+1
 15118  000D56  0EFA               	movlw	-6
 15119  000D58  CFE3 F052          	movff	plusw1,btemp+2
 15120  000D5C  0E32               	movlw	50
 15121  000D5E  2451               	addwf	btemp+1,w,c
 15122  000D60  6ED9               	movwf	fsr2l,c
 15123  000D62  0E00               	movlw	0
 15124  000D64  2052               	addwfc	btemp+2,w,c
 15125  000D66  6EDA               	movwf	fsr2h,c
 15126                           
 15127                           ;stkvar	_header @ sp[(-5)+1]
 15128  000D68  0EFC               	movlw	-4
 15129  000D6A  CFE3 F051          	movff	plusw1,btemp+1
 15130  000D6E  0EFD               	movlw	-3
 15131  000D70  CFE3 F052          	movff	plusw1,btemp+2
 15132  000D74  0E02               	movlw	2
 15133  000D76  2451               	addwf	btemp+1,w,c
 15134  000D78  6EE9               	movwf	fsr0l,c
 15135  000D7A  0E00               	movlw	0
 15136  000D7C  2052               	addwfc	btemp+2,w,c
 15137  000D7E  6EEA               	movwf	fsr0h,c
 15138  000D80  50DE               	movf	postinc2,w,c
 15139  000D82  18EE               	xorwf	postinc0,w,c
 15140  000D84  E103               	bnz	u1471
 15141  000D86  50DE               	movf	postinc2,w,c
 15142  000D88  18EE               	xorwf	postinc0,w,c
 15143  000D8A  A4D8               	btfss	status,2,c
 15144  000D8C                     u1471:
 15145  000D8C  D17D               	goto	l2826
 15146                           
 15147                           ;RF24Network_c.c: 282: if(header->type == 130){
 15148                           ;stkvar	_header @ sp[(-5)+1]
 15149  000D8E  0EFC               	movlw	-4
 15150  000D90  CFE3 F051          	movff	plusw1,btemp+1
 15151  000D94  0EFD               	movlw	-3
 15152  000D96  CFE3 F052          	movff	plusw1,btemp+2
 15153  000D9A  0E06               	movlw	6
 15154  000D9C  2451               	addwf	btemp+1,w,c
 15155  000D9E  6ED9               	movwf	fsr2l,c
 15156  000DA0  0E00               	movlw	0
 15157  000DA2  2052               	addwfc	btemp+2,w,c
 15158  000DA4  6EDA               	movwf	fsr2h,c
 15159  000DA6  0E82               	movlw	130
 15160  000DA8  18DE               	xorwf	postinc2,w,c
 15161  000DAA  B4D8               	btfsc	status,2,c
 15162  000DAC  D26F               	goto	l2854
 15163                           
 15164                           ;RF24Network_c.c: 284: }
 15165                           ;RF24Network_c.c: 285: if(header->type == 128 ){
 15166                           ;stkvar	_header @ sp[(-5)+1]
 15167  000DAE  0EFC               	movlw	-4
 15168  000DB0  CFE3 F051          	movff	plusw1,btemp+1
 15169  000DB4  0EFD               	movlw	-3
 15170  000DB6  CFE3 F052          	movff	plusw1,btemp+2
 15171  000DBA  0E06               	movlw	6
 15172  000DBC  2451               	addwf	btemp+1,w,c
 15173  000DBE  6ED9               	movwf	fsr2l,c
 15174  000DC0  0E00               	movlw	0
 15175  000DC2  2052               	addwfc	btemp+2,w,c
 15176  000DC4  6EDA               	movwf	fsr2h,c
 15177  000DC6  0E80               	movlw	128
 15178  000DC8  18DE               	xorwf	postinc2,w,c
 15179  000DCA  A4D8               	btfss	status,2,c
 15180  000DCC  D064               	goto	l2790
 15181                           
 15182                           ;RF24Network_c.c: 287: if(requester != rn->node_address){
 15183                           ;stkvar	_rn @ sp[(-5)+-2]
 15184  000DCE  0EF9               	movlw	-7
 15185  000DD0  CFE3 F051          	movff	plusw1,btemp+1
 15186  000DD4  0EFA               	movlw	-6
 15187  000DD6  CFE3 F052          	movff	plusw1,btemp+2
 15188  000DDA  0E32               	movlw	50
 15189  000DDC  2451               	addwf	btemp+1,w,c
 15190  000DDE  6ED9               	movwf	fsr2l,c
 15191  000DE0  0E00               	movlw	0
 15192  000DE2  2052               	addwfc	btemp+2,w,c
 15193  000DE4  6EDA               	movwf	fsr2h,c
 15194  000DE6  0E24               	movlw	36
 15195  000DE8  18DE               	xorwf	postinc2,w,c
 15196  000DEA  E104               	bnz	u1500
 15197  000DEC  0E09               	movlw	9
 15198  000DEE  18DE               	xorwf	postinc2,w,c
 15199  000DF0  B4D8               	btfsc	status,2,c
 15200  000DF2  D051               	goto	l2790
 15201  000DF4                     u1500:
 15202                           
 15203                           ;RF24Network_c.c: 288: header->to_node = requester;
 15204                           ;stkvar	_header @ sp[(-5)+1]
 15205  000DF4  0EFC               	movlw	-4
 15206  000DF6  CFE3 F051          	movff	plusw1,btemp+1
 15207  000DFA  0EFD               	movlw	-3
 15208  000DFC  CFE3 F052          	movff	plusw1,btemp+2
 15209  000E00  0E02               	movlw	2
 15210  000E02  2451               	addwf	btemp+1,w,c
 15211  000E04  6ED9               	movwf	fsr2l,c
 15212  000E06  0E00               	movlw	0
 15213  000E08  2052               	addwfc	btemp+2,w,c
 15214  000E0A  6EDA               	movwf	fsr2h,c
 15215  000E0C  0E24               	movlw	36
 15216  000E0E  6EDE               	movwf	postinc2,c
 15217  000E10  0E09               	movlw	9
 15218  000E12  6EDD               	movwf	postdec2,c
 15219                           
 15220                           ;RF24Network_c.c: 289: RF24N_write(rn,header->to_node,2);
 15221  000E14  0E02               	movlw	2
 15222  000E16  6EE6               	movwf	postinc1,c
 15223                           
 15224                           ;stkvar	_header @ sp[(-6)+1]
 15225  000E18  0EFB               	movlw	-5
 15226  000E1A  CFE3 F051          	movff	plusw1,btemp+1
 15227  000E1E  0EFC               	movlw	-4
 15228  000E20  CFE3 F052          	movff	plusw1,btemp+2
 15229  000E24  0E02               	movlw	2
 15230  000E26  2451               	addwf	btemp+1,w,c
 15231  000E28  6ED9               	movwf	fsr2l,c
 15232  000E2A  0E00               	movlw	0
 15233  000E2C  2052               	addwfc	btemp+2,w,c
 15234  000E2E  6EDA               	movwf	fsr2h,c
 15235  000E30  CFDE F051          	movff	postinc2,btemp+1
 15236  000E34  CFDD F052          	movff	postdec2,btemp+2
 15237  000E38  C051  FFE6         	movff	btemp+1,postinc1
 15238  000E3C  C052  FFE6         	movff	btemp+2,postinc1
 15239                           
 15240                           ;stkvar	_rn @ sp[(-8)+-2]
 15241  000E40  0EF6               	movlw	-10
 15242  000E42  CFE3 FFE6          	movff	plusw1,postinc1
 15243  000E46  CFE3 FFE6          	movff	plusw1,postinc1
 15244  000E4A  EC6B  F00C         	call	_RF24N_write	;wreg free
 15245                           
 15246                           ;RF24Network_c.c: 290: delay(10);
 15247  000E4E  0E0A               	movlw	10
 15248  000E50  6EE6               	movwf	postinc1,c
 15249  000E52  0E00               	movlw	0
 15250  000E54  6EE6               	movwf	postinc1,c
 15251  000E56  ECD8  F020         	call	_delay	;wreg free
 15252                           
 15253                           ;RF24Network_c.c: 291: RF24N_write(rn,header->to_node,2);
 15254  000E5A  0E02               	movlw	2
 15255  000E5C  6EE6               	movwf	postinc1,c
 15256                           
 15257                           ;stkvar	_header @ sp[(-6)+1]
 15258  000E5E  0EFB               	movlw	-5
 15259  000E60  CFE3 F051          	movff	plusw1,btemp+1
 15260  000E64  0EFC               	movlw	-4
 15261  000E66  CFE3 F052          	movff	plusw1,btemp+2
 15262  000E6A  0E02               	movlw	2
 15263  000E6C  2451               	addwf	btemp+1,w,c
 15264  000E6E  6ED9               	movwf	fsr2l,c
 15265  000E70  0E00               	movlw	0
 15266  000E72  2052               	addwfc	btemp+2,w,c
 15267  000E74  6EDA               	movwf	fsr2h,c
 15268  000E76  CFDE F051          	movff	postinc2,btemp+1
 15269  000E7A  CFDD F052          	movff	postdec2,btemp+2
 15270  000E7E  C051  FFE6         	movff	btemp+1,postinc1
 15271  000E82  C052  FFE6         	movff	btemp+2,postinc1
 15272                           
 15273                           ;stkvar	_rn @ sp[(-8)+-2]
 15274  000E86  0EF6               	movlw	-10
 15275  000E88  CFE3 FFE6          	movff	plusw1,postinc1
 15276  000E8C  CFE3 FFE6          	movff	plusw1,postinc1
 15277  000E90  EC6B  F00C         	call	_RF24N_write	;wreg free
 15278                           
 15279                           ;RF24Network_c.c: 293: continue;
 15280  000E94  D1FB               	goto	l2854
 15281  000E96                     l2790:
 15282                           
 15283                           ;RF24Network_c.c: 294: }
 15284                           ;RF24Network_c.c: 295: }
 15285                           ;RF24Network_c.c: 296: if(header->type == 195 && rn->node_address){
 15286                           ;stkvar	_header @ sp[(-5)+1]
 15287  000E96  0EFC               	movlw	-4
 15288  000E98  CFE3 F051          	movff	plusw1,btemp+1
 15289  000E9C  0EFD               	movlw	-3
 15290  000E9E  CFE3 F052          	movff	plusw1,btemp+2
 15291  000EA2  0E06               	movlw	6
 15292  000EA4  2451               	addwf	btemp+1,w,c
 15293  000EA6  6ED9               	movwf	fsr2l,c
 15294  000EA8  0E00               	movlw	0
 15295  000EAA  2052               	addwfc	btemp+2,w,c
 15296  000EAC  6EDA               	movwf	fsr2h,c
 15297  000EAE  0EC3               	movlw	195
 15298  000EB0  18DE               	xorwf	postinc2,w,c
 15299  000EB2  A4D8               	btfss	status,2,c
 15300  000EB4  D054               	goto	l2800
 15301                           
 15302                           ;stkvar	_rn @ sp[(-5)+-2]
 15303  000EB6  0EF9               	movlw	-7
 15304  000EB8  CFE3 F051          	movff	plusw1,btemp+1
 15305  000EBC  0EFA               	movlw	-6
 15306  000EBE  CFE3 F052          	movff	plusw1,btemp+2
 15307  000EC2  0E32               	movlw	50
 15308  000EC4  2451               	addwf	btemp+1,w,c
 15309  000EC6  6ED9               	movwf	fsr2l,c
 15310  000EC8  0E00               	movlw	0
 15311  000ECA  2052               	addwfc	btemp+2,w,c
 15312  000ECC  6EDA               	movwf	fsr2h,c
 15313  000ECE  50DE               	movf	postinc2,w,c
 15314  000ED0  10DE               	iorwf	postinc2,w,c
 15315  000ED2  B4D8               	btfsc	status,2,c
 15316  000ED4  D044               	goto	l2800
 15317                           
 15318                           ;RF24Network_c.c: 298: header->from_node = rn->node_address;
 15319                           ;stkvar	_rn @ sp[(-5)+-2]
 15320  000ED6  0EF9               	movlw	-7
 15321  000ED8  CFE3 F051          	movff	plusw1,btemp+1
 15322  000EDC  0EFA               	movlw	-6
 15323  000EDE  CFE3 F052          	movff	plusw1,btemp+2
 15324  000EE2  0E32               	movlw	50
 15325  000EE4  2451               	addwf	btemp+1,w,c
 15326  000EE6  6ED9               	movwf	fsr2l,c
 15327  000EE8  0E00               	movlw	0
 15328  000EEA  2052               	addwfc	btemp+2,w,c
 15329  000EEC  6EDA               	movwf	fsr2h,c
 15330                           
 15331                           ;stkvar	_header @ sp[(-5)+1]
 15332  000EEE  0EFC               	movlw	-4
 15333  000EF0  CFE3 FFE9          	movff	plusw1,fsr0l
 15334  000EF4  0EFD               	movlw	-3
 15335  000EF6  CFE3 FFEA          	movff	plusw1,fsr0h
 15336  000EFA  CFDE FFEE          	movff	postinc2,postinc0
 15337  000EFE  CFDD FFED          	movff	postdec2,postdec0
 15338                           
 15339                           ;RF24Network_c.c: 299: header->to_node = 0;
 15340                           ;stkvar	_header @ sp[(-5)+1]
 15341  000F02  0EFC               	movlw	-4
 15342  000F04  CFE3 F051          	movff	plusw1,btemp+1
 15343  000F08  0EFD               	movlw	-3
 15344  000F0A  CFE3 F052          	movff	plusw1,btemp+2
 15345  000F0E  0E02               	movlw	2
 15346  000F10  2451               	addwf	btemp+1,w,c
 15347  000F12  6ED9               	movwf	fsr2l,c
 15348  000F14  0E00               	movlw	0
 15349  000F16  2052               	addwfc	btemp+2,w,c
 15350  000F18  6EDA               	movwf	fsr2h,c
 15351  000F1A  0E00               	movlw	0
 15352  000F1C  6EDE               	movwf	postinc2,c
 15353  000F1E  0E00               	movlw	0
 15354  000F20  6EDD               	movwf	postdec2,c
 15355                           
 15356                           ;RF24Network_c.c: 300: RF24N_write(rn,header->to_node,0);
 15357  000F22  0E00               	movlw	0
 15358  000F24  6EE6               	movwf	postinc1,c
 15359                           
 15360                           ;stkvar	_header @ sp[(-6)+1]
 15361  000F26  0EFB               	movlw	-5
 15362  000F28  CFE3 F051          	movff	plusw1,btemp+1
 15363  000F2C  0EFC               	movlw	-4
 15364  000F2E  CFE3 F052          	movff	plusw1,btemp+2
 15365  000F32  0E02               	movlw	2
 15366  000F34  2451               	addwf	btemp+1,w,c
 15367  000F36  6ED9               	movwf	fsr2l,c
 15368  000F38  0E00               	movlw	0
 15369  000F3A  2052               	addwfc	btemp+2,w,c
 15370  000F3C  6EDA               	movwf	fsr2h,c
 15371  000F3E  CFDE F051          	movff	postinc2,btemp+1
 15372  000F42  CFDD F052          	movff	postdec2,btemp+2
 15373  000F46  C051  FFE6         	movff	btemp+1,postinc1
 15374  000F4A  C052  FFE6         	movff	btemp+2,postinc1
 15375                           
 15376                           ;stkvar	_rn @ sp[(-8)+-2]
 15377  000F4E  0EF6               	movlw	-10
 15378  000F50  CFE3 FFE6          	movff	plusw1,postinc1
 15379  000F54  CFE3 FFE6          	movff	plusw1,postinc1
 15380  000F58  EC6B  F00C         	call	_RF24N_write	;wreg free
 15381                           
 15382                           ;RF24Network_c.c: 301: continue;
 15383  000F5C  D197               	goto	l2854
 15384  000F5E                     l2800:
 15385                           
 15386                           ;RF24Network_c.c: 302: }
 15387                           ;RF24Network_c.c: 304: if( (rn->returnSysMsgs && header->type > 127) || header->type == 
      +                          193 ){
 15388                           ;stkvar	_rn @ sp[(-5)+-2]
 15389  000F5E  0EF9               	movlw	-7
 15390  000F60  CFE3 F051          	movff	plusw1,btemp+1
 15391  000F64  0EFA               	movlw	-6
 15392  000F66  CFE3 F052          	movff	plusw1,btemp+2
 15393  000F6A  0E29               	movlw	41
 15394  000F6C  2451               	addwf	btemp+1,w,c
 15395  000F6E  6ED9               	movwf	fsr2l,c
 15396  000F70  0E00               	movlw	0
 15397  000F72  2052               	addwfc	btemp+2,w,c
 15398  000F74  6EDA               	movwf	fsr2h,c
 15399  000F76  50DF               	movf	indf2,w,c
 15400  000F78  B4D8               	btfsc	status,2,c
 15401  000F7A  D00F               	goto	l2804
 15402                           
 15403                           ;stkvar	_header @ sp[(-5)+1]
 15404  000F7C  0EFC               	movlw	-4
 15405  000F7E  CFE3 F051          	movff	plusw1,btemp+1
 15406  000F82  0EFD               	movlw	-3
 15407  000F84  CFE3 F052          	movff	plusw1,btemp+2
 15408  000F88  0E06               	movlw	6
 15409  000F8A  2451               	addwf	btemp+1,w,c
 15410  000F8C  6ED9               	movwf	fsr2l,c
 15411  000F8E  0E00               	movlw	0
 15412  000F90  2052               	addwfc	btemp+2,w,c
 15413  000F92  6EDA               	movwf	fsr2h,c
 15414  000F94  0E80               	movlw	128
 15415  000F96  60DF               	cpfslt	indf2,c
 15416  000F98  D010               	goto	l2806
 15417  000F9A                     l2804:
 15418                           
 15419                           ;stkvar	_header @ sp[(-5)+1]
 15420  000F9A  0EFC               	movlw	-4
 15421  000F9C  CFE3 F051          	movff	plusw1,btemp+1
 15422  000FA0  0EFD               	movlw	-3
 15423  000FA2  CFE3 F052          	movff	plusw1,btemp+2
 15424  000FA6  0E06               	movlw	6
 15425  000FA8  2451               	addwf	btemp+1,w,c
 15426  000FAA  6ED9               	movwf	fsr2l,c
 15427  000FAC  0E00               	movlw	0
 15428  000FAE  2052               	addwfc	btemp+2,w,c
 15429  000FB0  6EDA               	movwf	fsr2h,c
 15430  000FB2  0EC1               	movlw	193
 15431  000FB4  18DE               	xorwf	postinc2,w,c
 15432  000FB6  A4D8               	btfss	status,2,c
 15433  000FB8  D054               	goto	l2820
 15434  000FBA                     l2806:
 15435                           
 15436                           ;RF24Network_c.c: 305: ;
 15437                           ;RF24Network_c.c: 307: if( header->type != 148 && header->type != 149 && header->type !=
      +                           200 && header->type != 131 && header->type!= 150){
 15438                           ;stkvar	_header @ sp[(-5)+1]
 15439  000FBA  0EFC               	movlw	-4
 15440  000FBC  CFE3 F051          	movff	plusw1,btemp+1
 15441  000FC0  0EFD               	movlw	-3
 15442  000FC2  CFE3 F052          	movff	plusw1,btemp+2
 15443  000FC6  0E06               	movlw	6
 15444  000FC8  2451               	addwf	btemp+1,w,c
 15445  000FCA  6ED9               	movwf	fsr2l,c
 15446  000FCC  0E00               	movlw	0
 15447  000FCE  2052               	addwfc	btemp+2,w,c
 15448  000FD0  6EDA               	movwf	fsr2h,c
 15449  000FD2  0E94               	movlw	148
 15450  000FD4  18DE               	xorwf	postinc2,w,c
 15451  000FD6  B4D8               	btfsc	status,2,c
 15452  000FD8  D044               	goto	l2820
 15453                           
 15454                           ;stkvar	_header @ sp[(-5)+1]
 15455  000FDA  0EFC               	movlw	-4
 15456  000FDC  CFE3 F051          	movff	plusw1,btemp+1
 15457  000FE0  0EFD               	movlw	-3
 15458  000FE2  CFE3 F052          	movff	plusw1,btemp+2
 15459  000FE6  0E06               	movlw	6
 15460  000FE8  2451               	addwf	btemp+1,w,c
 15461  000FEA  6ED9               	movwf	fsr2l,c
 15462  000FEC  0E00               	movlw	0
 15463  000FEE  2052               	addwfc	btemp+2,w,c
 15464  000FF0  6EDA               	movwf	fsr2h,c
 15465  000FF2  0E95               	movlw	149
 15466  000FF4  18DE               	xorwf	postinc2,w,c
 15467  000FF6  B4D8               	btfsc	status,2,c
 15468  000FF8  D034               	goto	l2820
 15469                           
 15470                           ;stkvar	_header @ sp[(-5)+1]
 15471  000FFA  0EFC               	movlw	-4
 15472  000FFC  CFE3 F051          	movff	plusw1,btemp+1
 15473  001000  0EFD               	movlw	-3
 15474  001002  CFE3 F052          	movff	plusw1,btemp+2
 15475  001006  0E06               	movlw	6
 15476  001008  2451               	addwf	btemp+1,w,c
 15477  00100A  6ED9               	movwf	fsr2l,c
 15478  00100C  0E00               	movlw	0
 15479  00100E  2052               	addwfc	btemp+2,w,c
 15480  001010  6EDA               	movwf	fsr2h,c
 15481  001012  0EC8               	movlw	200
 15482  001014  18DE               	xorwf	postinc2,w,c
 15483  001016  B4D8               	btfsc	status,2,c
 15484  001018  D024               	goto	l2820
 15485                           
 15486                           ;stkvar	_header @ sp[(-5)+1]
 15487  00101A  0EFC               	movlw	-4
 15488  00101C  CFE3 F051          	movff	plusw1,btemp+1
 15489  001020  0EFD               	movlw	-3
 15490  001022  CFE3 F052          	movff	plusw1,btemp+2
 15491  001026  0E06               	movlw	6
 15492  001028  2451               	addwf	btemp+1,w,c
 15493  00102A  6ED9               	movwf	fsr2l,c
 15494  00102C  0E00               	movlw	0
 15495  00102E  2052               	addwfc	btemp+2,w,c
 15496  001030  6EDA               	movwf	fsr2h,c
 15497  001032  0E83               	movlw	131
 15498  001034  18DE               	xorwf	postinc2,w,c
 15499  001036  B4D8               	btfsc	status,2,c
 15500  001038  D014               	goto	l2820
 15501                           
 15502                           ;stkvar	_header @ sp[(-5)+1]
 15503  00103A  0EFC               	movlw	-4
 15504  00103C  CFE3 F051          	movff	plusw1,btemp+1
 15505  001040  0EFD               	movlw	-3
 15506  001042  CFE3 F052          	movff	plusw1,btemp+2
 15507  001046  0E06               	movlw	6
 15508  001048  2451               	addwf	btemp+1,w,c
 15509  00104A  6ED9               	movwf	fsr2l,c
 15510  00104C  0E00               	movlw	0
 15511  00104E  2052               	addwfc	btemp+2,w,c
 15512  001050  6EDA               	movwf	fsr2h,c
 15513  001052  0E96               	movlw	150
 15514  001054  18DE               	xorwf	postinc2,w,c
 15515  001056  B4D8               	btfsc	status,2,c
 15516  001058  D004               	goto	l2820
 15517  00105A                     l2816:
 15518                           
 15519                           ;RF24Network_c.c: 308: return returnVal;
 15520                           ;stkvar	_returnVal @ sp[(-5)+3]
 15521  00105A  0EFE               	movlw	-2
 15522  00105C  CFE3 F050          	movff	plusw1,btemp
 15523  001060  D14E               	goto	l216
 15524  001062                     l2820:
 15525                           
 15526                           ;RF24Network_c.c: 309: }
 15527                           ;RF24Network_c.c: 310: }
 15528                           ;RF24Network_c.c: 312: if( RF24N_enqueue(rn,header) == 2 ){
 15529                           ;stkvar	_header @ sp[(-5)+1]
 15530  001062  0EFC               	movlw	-4
 15531  001064  CFE3 FFE6          	movff	plusw1,postinc1
 15532  001068  CFE3 FFE6          	movff	plusw1,postinc1
 15533                           
 15534                           ;stkvar	_rn @ sp[(-7)+-2]
 15535  00106C  0EF7               	movlw	-9
 15536  00106E  CFE3 FFE6          	movff	plusw1,postinc1
 15537  001072  CFE3 FFE6          	movff	plusw1,postinc1
 15538  001076  EC0E  F000         	call	_RF24N_enqueue	;wreg free
 15539  00107A  0E02               	movlw	2
 15540  00107C  1850               	xorwf	btemp,w,c
 15541  00107E  A4D8               	btfss	status,2,c
 15542  001080  D105               	goto	l2854
 15543                           
 15544                           ;RF24Network_c.c: 316: return 131;
 15545  001082  0E83               	movlw	131
 15546  001084                     L18:
 15547  001084  6E50               	movwf	btemp,c
 15548  001086  D13B               	goto	l216
 15549  001088                     l2826:
 15550                           
 15551                           ;RF24Network_c.c: 322: if( header->to_node == 0100){
 15552                           ;stkvar	_header @ sp[(-5)+1]
 15553  001088  0EFC               	movlw	-4
 15554  00108A  CFE3 F051          	movff	plusw1,btemp+1
 15555  00108E  0EFD               	movlw	-3
 15556  001090  CFE3 F052          	movff	plusw1,btemp+2
 15557  001094  0E02               	movlw	2
 15558  001096  2451               	addwf	btemp+1,w,c
 15559  001098  6ED9               	movwf	fsr2l,c
 15560  00109A  0E00               	movlw	0
 15561  00109C  2052               	addwfc	btemp+2,w,c
 15562  00109E  6EDA               	movwf	fsr2h,c
 15563  0010A0  0E40               	movlw	64
 15564  0010A2  18DE               	xorwf	postinc2,w,c
 15565  0010A4  10DE               	iorwf	postinc2,w,c
 15566  0010A6  A4D8               	btfss	status,2,c
 15567  0010A8  D0D4               	goto	l2852
 15568                           
 15569                           ;RF24Network_c.c: 325: if(header->type == 194 ){
 15570                           ;stkvar	_header @ sp[(-5)+1]
 15571  0010AA  0EFC               	movlw	-4
 15572  0010AC  CFE3 F051          	movff	plusw1,btemp+1
 15573  0010B0  0EFD               	movlw	-3
 15574  0010B2  CFE3 F052          	movff	plusw1,btemp+2
 15575  0010B6  0E06               	movlw	6
 15576  0010B8  2451               	addwf	btemp+1,w,c
 15577  0010BA  6ED9               	movwf	fsr2l,c
 15578  0010BC  0E00               	movlw	0
 15579  0010BE  2052               	addwfc	btemp+2,w,c
 15580  0010C0  6EDA               	movwf	fsr2h,c
 15581  0010C2  0EC2               	movlw	194
 15582  0010C4  18DE               	xorwf	postinc2,w,c
 15583  0010C6  A4D8               	btfss	status,2,c
 15584  0010C8  D07D               	goto	l2840
 15585                           
 15586                           ;RF24Network_c.c: 326: if( !(rn->networkFlags & 8) && rn->node_address != 04444 ){
 15587                           ;stkvar	_rn @ sp[(-5)+-2]
 15588  0010CA  0EF9               	movlw	-7
 15589  0010CC  CFE3 F051          	movff	plusw1,btemp+1
 15590  0010D0  0EFA               	movlw	-6
 15591  0010D2  CFE3 F052          	movff	plusw1,btemp+2
 15592  0010D6  0E2A               	movlw	42
 15593  0010D8  2451               	addwf	btemp+1,w,c
 15594  0010DA  6ED9               	movwf	fsr2l,c
 15595  0010DC  0E00               	movlw	0
 15596  0010DE  2052               	addwfc	btemp+2,w,c
 15597  0010E0  6EDA               	movwf	fsr2h,c
 15598  0010E2  B6DF               	btfsc	indf2,3,c
 15599  0010E4  D0D3               	goto	l2854
 15600                           
 15601                           ;stkvar	_rn @ sp[(-5)+-2]
 15602  0010E6  0EF9               	movlw	-7
 15603  0010E8  CFE3 F051          	movff	plusw1,btemp+1
 15604  0010EC  0EFA               	movlw	-6
 15605  0010EE  CFE3 F052          	movff	plusw1,btemp+2
 15606  0010F2  0E32               	movlw	50
 15607  0010F4  2451               	addwf	btemp+1,w,c
 15608  0010F6  6ED9               	movwf	fsr2l,c
 15609  0010F8  0E00               	movlw	0
 15610  0010FA  2052               	addwfc	btemp+2,w,c
 15611  0010FC  6EDA               	movwf	fsr2h,c
 15612  0010FE  0E24               	movlw	36
 15613  001100  18DE               	xorwf	postinc2,w,c
 15614  001102  E104               	bnz	u1650
 15615  001104  0E09               	movlw	9
 15616  001106  18DE               	xorwf	postinc2,w,c
 15617  001108  B4D8               	btfsc	status,2,c
 15618  00110A  D0C0               	goto	l2854
 15619  00110C                     u1650:
 15620                           
 15621                           ;RF24Network_c.c: 327: header->to_node = header->from_node;
 15622                           ;stkvar	_header @ sp[(-5)+1]
 15623  00110C  0EFC               	movlw	-4
 15624  00110E  CFE3 FFD9          	movff	plusw1,fsr2l
 15625  001112  0EFD               	movlw	-3
 15626  001114  CFE3 FFDA          	movff	plusw1,fsr2h
 15627                           
 15628                           ;stkvar	_header @ sp[(-5)+1]
 15629  001118  0EFC               	movlw	-4
 15630  00111A  CFE3 F051          	movff	plusw1,btemp+1
 15631  00111E  0EFD               	movlw	-3
 15632  001120  CFE3 F052          	movff	plusw1,btemp+2
 15633  001124  0E02               	movlw	2
 15634  001126  2451               	addwf	btemp+1,w,c
 15635  001128  6EE9               	movwf	fsr0l,c
 15636  00112A  0E00               	movlw	0
 15637  00112C  2052               	addwfc	btemp+2,w,c
 15638  00112E  6EEA               	movwf	fsr0h,c
 15639  001130  CFDE FFEE          	movff	postinc2,postinc0
 15640  001134  CFDD FFED          	movff	postdec2,postdec0
 15641                           
 15642                           ;RF24Network_c.c: 328: header->from_node = rn->node_address;
 15643                           ;stkvar	_rn @ sp[(-5)+-2]
 15644  001138  0EF9               	movlw	-7
 15645  00113A  CFE3 F051          	movff	plusw1,btemp+1
 15646  00113E  0EFA               	movlw	-6
 15647  001140  CFE3 F052          	movff	plusw1,btemp+2
 15648  001144  0E32               	movlw	50
 15649  001146  2451               	addwf	btemp+1,w,c
 15650  001148  6ED9               	movwf	fsr2l,c
 15651  00114A  0E00               	movlw	0
 15652  00114C  2052               	addwfc	btemp+2,w,c
 15653  00114E  6EDA               	movwf	fsr2h,c
 15654                           
 15655                           ;stkvar	_header @ sp[(-5)+1]
 15656  001150  0EFC               	movlw	-4
 15657  001152  CFE3 FFE9          	movff	plusw1,fsr0l
 15658  001156  0EFD               	movlw	-3
 15659  001158  CFE3 FFEA          	movff	plusw1,fsr0h
 15660  00115C  CFDE FFEE          	movff	postinc2,postinc0
 15661  001160  CFDD FFED          	movff	postdec2,postdec0
 15662                           
 15663                           ;RF24Network_c.c: 329: delay(rn->parent_pipe);
 15664                           ;stkvar	_rn @ sp[(-5)+-2]
 15665  001164  0EF9               	movlw	-7
 15666  001166  CFE3 F051          	movff	plusw1,btemp+1
 15667  00116A  0EFA               	movlw	-6
 15668  00116C  CFE3 F052          	movff	plusw1,btemp+2
 15669  001170  0E39               	movlw	57
 15670  001172  2451               	addwf	btemp+1,w,c
 15671  001174  6ED9               	movwf	fsr2l,c
 15672  001176  0E00               	movlw	0
 15673  001178  2052               	addwfc	btemp+2,w,c
 15674  00117A  6EDA               	movwf	fsr2h,c
 15675  00117C  50DF               	movf	indf2,w,c
 15676  00117E  6EE6               	movwf	postinc1,c
 15677  001180  0E00               	movlw	0
 15678  001182  6EE6               	movwf	postinc1,c
 15679  001184  ECD8  F020         	call	_delay	;wreg free
 15680                           
 15681                           ;RF24Network_c.c: 330: RF24N_write(rn,header->to_node,2);
 15682  001188  0E02               	movlw	2
 15683  00118A  6EE6               	movwf	postinc1,c
 15684                           
 15685                           ;stkvar	_header @ sp[(-6)+1]
 15686  00118C  0EFB               	movlw	-5
 15687  00118E  CFE3 F051          	movff	plusw1,btemp+1
 15688  001192  0EFC               	movlw	-4
 15689  001194  CFE3 F052          	movff	plusw1,btemp+2
 15690  001198  0E02               	movlw	2
 15691  00119A  2451               	addwf	btemp+1,w,c
 15692  00119C  6ED9               	movwf	fsr2l,c
 15693  00119E  0E00               	movlw	0
 15694  0011A0  2052               	addwfc	btemp+2,w,c
 15695  0011A2  6EDA               	movwf	fsr2h,c
 15696  0011A4  CFDE F051          	movff	postinc2,btemp+1
 15697  0011A8  CFDD F052          	movff	postdec2,btemp+2
 15698  0011AC  C051  FFE6         	movff	btemp+1,postinc1
 15699  0011B0  C052  FFE6         	movff	btemp+2,postinc1
 15700                           
 15701                           ;stkvar	_rn @ sp[(-8)+-2]
 15702  0011B4  0EF6               	movlw	-10
 15703  0011B6  CFE3 FFE6          	movff	plusw1,postinc1
 15704  0011BA  CFE3 FFE6          	movff	plusw1,postinc1
 15705  0011BE  EC6B  F00C         	call	_RF24N_write	;wreg free
 15706  0011C2  D064               	goto	l2854
 15707  0011C4                     l2840:
 15708                           
 15709                           ;RF24Network_c.c: 333: }
 15710                           ;RF24Network_c.c: 334: uint8_t val = RF24N_enqueue(rn,header);
 15711                           ;stkvar	_header @ sp[(-5)+1]
 15712  0011C4  0EFC               	movlw	-4
 15713  0011C6  CFE3 FFE6          	movff	plusw1,postinc1
 15714  0011CA  CFE3 FFE6          	movff	plusw1,postinc1
 15715                           
 15716                           ;stkvar	_rn @ sp[(-7)+-2]
 15717  0011CE  0EF7               	movlw	-9
 15718  0011D0  CFE3 FFE6          	movff	plusw1,postinc1
 15719  0011D4  CFE3 FFE6          	movff	plusw1,postinc1
 15720  0011D8  EC0E  F000         	call	_RF24N_enqueue	;wreg free
 15721                           
 15722                           ;stkvar	_val @ sp[(-5)+0]
 15723  0011DC  0EFB               	movlw	-5
 15724  0011DE  C050  FFE3         	movff	btemp,plusw1
 15725                           
 15726                           ;RF24Network_c.c: 336: if(rn->multicastRelay){
 15727                           ;stkvar	_rn @ sp[(-5)+-2]
 15728  0011E2  0EF9               	movlw	-7
 15729  0011E4  CFE3 FFD9          	movff	plusw1,fsr2l
 15730  0011E8  0EFA               	movlw	-6
 15731  0011EA  CFE3 FFDA          	movff	plusw1,fsr2h
 15732  0011EE  50DF               	movf	indf2,w,c
 15733  0011F0  B4D8               	btfsc	status,2,c
 15734  0011F2  D02B               	goto	l2846
 15735                           
 15736                           ;RF24Network_c.c: 337: ;
 15737                           ;RF24Network_c.c: 338: RF24N_write(rn,RF24N_levelToAddress(rn,rn->multicast_level)<<3,4)
      +                          ;
 15738  0011F4  0E04               	movlw	4
 15739  0011F6  6EE6               	movwf	postinc1,c
 15740                           
 15741                           ;stkvar	_rn @ sp[(-6)+-2]
 15742  0011F8  0EF8               	movlw	-8
 15743  0011FA  CFE3 F051          	movff	plusw1,btemp+1
 15744  0011FE  0EF9               	movlw	-7
 15745  001200  CFE3 F052          	movff	plusw1,btemp+2
 15746  001204  0E31               	movlw	49
 15747  001206  2451               	addwf	btemp+1,w,c
 15748  001208  6ED9               	movwf	fsr2l,c
 15749  00120A  0E00               	movlw	0
 15750  00120C  2052               	addwfc	btemp+2,w,c
 15751  00120E  6EDA               	movwf	fsr2h,c
 15752  001210  50DF               	movf	indf2,w,c
 15753  001212  6EE6               	movwf	postinc1,c
 15754                           
 15755                           ;stkvar	_rn @ sp[(-7)+-2]
 15756  001214  0EF7               	movlw	-9
 15757  001216  CFE3 FFE6          	movff	plusw1,postinc1
 15758  00121A  CFE3 FFE6          	movff	plusw1,postinc1
 15759  00121E  ECA8  F025         	call	_RF24N_levelToAddress	;wreg free
 15760  001222  90D8               	bcf	status,0,c
 15761  001224  3650               	rlcf	btemp,f,c
 15762  001226  3651               	rlcf	btemp+1,f,c
 15763  001228  90D8               	bcf	status,0,c
 15764  00122A  3650               	rlcf	btemp,f,c
 15765  00122C  3651               	rlcf	btemp+1,f,c
 15766  00122E  90D8               	bcf	status,0,c
 15767  001230  3650               	rlcf	btemp,f,c
 15768  001232  3651               	rlcf	btemp+1,f,c
 15769  001234  C050  FFE6         	movff	btemp,postinc1
 15770  001238  C051  FFE6         	movff	btemp+1,postinc1
 15771                           
 15772                           ;stkvar	_rn @ sp[(-8)+-2]
 15773  00123C  0EF6               	movlw	-10
 15774  00123E  CFE3 FFE6          	movff	plusw1,postinc1
 15775  001242  CFE3 FFE6          	movff	plusw1,postinc1
 15776  001246  EC6B  F00C         	call	_RF24N_write	;wreg free
 15777  00124A                     l2846:
 15778                           
 15779                           ;RF24Network_c.c: 339: }
 15780                           ;RF24Network_c.c: 340: if( val == 2 ){
 15781                           ;stkvar	_val @ sp[(-5)+0]
 15782  00124A  0EFB               	movlw	-5
 15783  00124C  CFE3 F050          	movff	plusw1,btemp
 15784  001250  D714               	goto	L19
 15785  001252                     l2852:
 15786                           
 15787                           ;RF24Network_c.c: 346: RF24N_write(rn,header->to_node,1);
 15788  001252  0E01               	movlw	1
 15789  001254  6EE6               	movwf	postinc1,c
 15790                           
 15791                           ;stkvar	_header @ sp[(-6)+1]
 15792  001256  0EFB               	movlw	-5
 15793  001258  CFE3 F051          	movff	plusw1,btemp+1
 15794  00125C  0EFC               	movlw	-4
 15795  00125E  CFE3 F052          	movff	plusw1,btemp+2
 15796  001262  0E02               	movlw	2
 15797  001264  2451               	addwf	btemp+1,w,c
 15798  001266  6ED9               	movwf	fsr2l,c
 15799  001268  0E00               	movlw	0
 15800  00126A  2052               	addwfc	btemp+2,w,c
 15801  00126C  6EDA               	movwf	fsr2h,c
 15802  00126E  CFDE F051          	movff	postinc2,btemp+1
 15803  001272  CFDD F052          	movff	postdec2,btemp+2
 15804  001276  C051  FFE6         	movff	btemp+1,postinc1
 15805  00127A  C052  FFE6         	movff	btemp+2,postinc1
 15806                           
 15807                           ;stkvar	_rn @ sp[(-8)+-2]
 15808  00127E  0EF6               	movlw	-10
 15809  001280  CFE3 FFE6          	movff	plusw1,postinc1
 15810  001284  CFE3 FFE6          	movff	plusw1,postinc1
 15811  001288  EC6B  F00C         	call	_RF24N_write	;wreg free
 15812  00128C                     l2854:
 15813                           
 15814                           ;stkvar	_rn @ sp[(-5)+-2]
 15815  00128C  0EF9               	movlw	-7
 15816  00128E  CFE3 F051          	movff	plusw1,btemp+1
 15817  001292  0EFA               	movlw	-6
 15818  001294  CFE3 F052          	movff	plusw1,btemp+2
 15819  001298  0E2F               	movlw	47
 15820  00129A  2451               	addwf	btemp+1,w,c
 15821  00129C  6ED9               	movwf	fsr2l,c
 15822  00129E  0E00               	movlw	0
 15823  0012A0  2052               	addwfc	btemp+2,w,c
 15824  0012A2  6EDA               	movwf	fsr2h,c
 15825  0012A4  CFDE F051          	movff	postinc2,btemp+1
 15826  0012A8  CFDD F052          	movff	postdec2,btemp+2
 15827  0012AC  C051  FFE6         	movff	btemp+1,postinc1
 15828  0012B0  C052  FFE6         	movff	btemp+2,postinc1
 15829  0012B4  EC78  F026         	call	_RF24_isValid	;wreg free
 15830  0012B8  5050               	movf	btemp,w,c
 15831  0012BA  B4D8               	btfsc	status,2,c
 15832  0012BC  D6CE               	goto	l2816
 15833                           
 15834                           ;stkvar	_pipe_num @ sp[(-5)+4]
 15835  0012BE  0EFF               	movlw	255
 15836  0012C0  24E1               	addwf	fsr1l,w,c
 15837  0012C2  6EE6               	movwf	postinc1,c
 15838  0012C4  0EFF               	movlw	255
 15839  0012C6  20E2               	addwfc	fsr1h,w,c
 15840  0012C8  6EE6               	movwf	postinc1,c
 15841                           
 15842                           ;stkvar	_rn @ sp[(-7)+-2]
 15843  0012CA  0EF7               	movlw	-9
 15844  0012CC  CFE3 F051          	movff	plusw1,btemp+1
 15845  0012D0  0EF8               	movlw	-8
 15846  0012D2  CFE3 F052          	movff	plusw1,btemp+2
 15847  0012D6  0E2F               	movlw	47
 15848  0012D8  2451               	addwf	btemp+1,w,c
 15849  0012DA  6ED9               	movwf	fsr2l,c
 15850  0012DC  0E00               	movlw	0
 15851  0012DE  2052               	addwfc	btemp+2,w,c
 15852  0012E0  6EDA               	movwf	fsr2h,c
 15853  0012E2  CFDE F051          	movff	postinc2,btemp+1
 15854  0012E6  CFDD F052          	movff	postdec2,btemp+2
 15855  0012EA  C051  FFE6         	movff	btemp+1,postinc1
 15856  0012EE  C052  FFE6         	movff	btemp+2,postinc1
 15857  0012F2  EC40  F025         	call	_RF24_available_p	;wreg free
 15858  0012F6  5050               	movf	btemp,w,c
 15859  0012F8  B4D8               	btfsc	status,2,c
 15860  0012FA  D6AF               	goto	l2816
 15861  0012FC  D48C               	goto	l2756
 15862  0012FE                     l216:
 15863                           
 15864                           ; _RF24N_update: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, 
      +                          argsize = 2, vargsize = 0
 15865  0012FE  0EF9               	movlw	249
 15866  001300  26E1               	addwf	fsr1l,f,c
 15867  001302  0EFF               	movlw	255
 15868  001304  22E2               	addwfc	fsr1h,f,c
 15869  001306  0012               	return		;funcret
 15870  001308                     __end_of_RF24N_update:
 15871                           	opt stack 0
 15872                           tblptru	equ	0xFF8
 15873                           tblptrh	equ	0xFF7
 15874                           tblptrl	equ	0xFF6
 15875                           tablat	equ	0xFF5
 15876                           prodh	equ	0xFF4
 15877                           prodl	equ	0xFF3
 15878                           intcon	equ	0xFF2
 15879                           indf0	equ	0xFEF
 15880                           postinc0	equ	0xFEE
 15881                           postdec0	equ	0xFED
 15882                           fsr0h	equ	0xFEA
 15883                           fsr0l	equ	0xFE9
 15884                           wreg	equ	0xFE8
 15885                           postinc1	equ	0xFE6
 15886                           postdec1	equ	0xFE5
 15887                           plusw1	equ	0xFE3
 15888                           fsr1h	equ	0xFE2
 15889                           fsr1l	equ	0xFE1
 15890                           indf2	equ	0xFDF
 15891                           postinc2	equ	0xFDE
 15892                           postdec2	equ	0xFDD
 15893                           plusw2	equ	0xFDB
 15894                           fsr2h	equ	0xFDA
 15895                           fsr2l	equ	0xFD9
 15896                           status	equ	0xFD8
 15897                           
 15898 ;; *************** function _delay *****************
 15899 ;; Defined at:
 15900 ;;		line 165 in file "../../../RF24_c/utility/XC8/spi.c"
 15901 ;; Parameters:    Size  Location     Type
 15902 ;;  val             2  [STACK] unsigned int 
 15903 ;; Auto vars:     Size  Location     Type
 15904 ;;  j               2  [STACK] unsigned int 
 15905 ;;  i               2  [STACK] unsigned int 
 15906 ;; Return value:  Size  Location     Type
 15907 ;;                  1  [STACK] void 
 15908 ;; Registers used:
 15909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
 15910 ;; Tracked objects:
 15911 ;;		On entry : 0/0
 15912 ;;		On exit  : 0/0
 15913 ;;		Unchanged: 0/0
 15914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15919 ;;Total ram usage:        0 bytes
 15920 ;; Hardware stack levels used:    1
 15921 ;; Hardware stack levels required when called:    1
 15922 ;; This function calls:
 15923 ;;		Nothing
 15924 ;; This function is called by:
 15925 ;;		_RF24N_update
 15926 ;;		_RF24N_write_
 15927 ;;		_RF24_begin
 15928 ;;		_RF24_powerUp
 15929 ;;		_RF24_getDynamicPayloadSize
 15930 ;; This function uses a reentrant model
 15931 ;;
 15932                           
 15933                           	psect	text63
 15934  0041B0                     __ptext63:
 15935                           	opt stack 0
 15936  0041B0                     _delay:
 15937                           	opt stack 0
 15938                           
 15939                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 15940  0041B0  52E6               	movf	postinc1,f,c
 15941  0041B2  52E6               	movf	postinc1,f,c
 15942  0041B4  52E6               	movf	postinc1,f,c
 15943  0041B6  52E6               	movf	postinc1,f,c
 15944                           
 15945                           ;spi.c: 167: unsigned int i;
 15946                           ;spi.c: 168: unsigned int j;
 15947                           ;spi.c: 170: for (i =0; i< val; i++)
 15948                           ;stkvar	_i @ sp[(-4)+2]
 15949                           
 15950                           ;incstack = 0
 15951  0041B8  0EFE               	movlw	-2
 15952  0041BA  6AE3               	clrf	plusw1,c
 15953  0041BC  0EFF               	movlw	-1
 15954  0041BE  6AE3               	clrf	plusw1,c
 15955  0041C0  D038               	goto	l2104
 15956  0041C2                     l2094:
 15957                           
 15958                           ;spi.c: 171: {
 15959                           ;spi.c: 173: for (j =0 ; j < (32000000/(4000l*10)); j++)
 15960                           ;stkvar	_j @ sp[(-4)+0]
 15961  0041C2  0EFC               	movlw	-4
 15962  0041C4  6AE3               	clrf	plusw1,c
 15963  0041C6  0EFD               	movlw	-3
 15964  0041C8  6AE3               	clrf	plusw1,c
 15965  0041CA                     l1033:
 15966  0041CA  F000               	nop		;# 
 15967  0041CC  F000               	nop		;# 
 15968  0041CE  F000               	nop		;# 
 15969  0041D0  F000               	nop		;# 
 15970  0041D2  F000               	nop		;# 
 15971  0041D4  F000               	nop		;# 
 15972  0041D6  F000               	nop		;# 
 15973  0041D8  F000               	nop		;# 
 15974  0041DA  F000               	nop		;# 
 15975  0041DC  F000               	nop		;# 
 15976                           
 15977                           ;stkvar	_j @ sp[(-4)+0]
 15978  0041DE  0EFC               	movlw	-4
 15979  0041E0  50E3               	movf	plusw1,w,c
 15980  0041E2  0F01               	addlw	1
 15981  0041E4  6E50               	movwf	btemp,c
 15982  0041E6  0EFC               	movlw	-4
 15983  0041E8  C050  FFE3         	movff	btemp,plusw1
 15984  0041EC  6A50               	clrf	btemp,c
 15985  0041EE  0EFD               	movlw	-3
 15986  0041F0  50E3               	movf	plusw1,w,c
 15987  0041F2  2050               	addwfc	btemp,w,c
 15988  0041F4  6E50               	movwf	btemp,c
 15989  0041F6  0EFD               	movlw	-3
 15990  0041F8  C050  FFE3         	movff	btemp,plusw1
 15991                           
 15992                           ;stkvar	_j @ sp[(-4)+0]
 15993  0041FC  0EFC               	movlw	-4
 15994  0041FE  CFE3 F050          	movff	plusw1,btemp
 15995  004202  0E20               	movlw	32
 15996  004204  5E50               	subwf	btemp,f,c
 15997  004206  0EFD               	movlw	-3
 15998  004208  CFE3 F050          	movff	plusw1,btemp
 15999  00420C  0E03               	movlw	3
 16000  00420E  5A50               	subwfb	btemp,f,c
 16001  004210  A0D8               	btfss	status,0,c
 16002  004212  D7DB               	goto	l1033
 16003                           
 16004                           ;stkvar	_i @ sp[(-4)+2]
 16005  004214  0EFE               	movlw	-2
 16006  004216  50E3               	movf	plusw1,w,c
 16007  004218  0F01               	addlw	1
 16008  00421A  6E50               	movwf	btemp,c
 16009  00421C  0EFE               	movlw	-2
 16010  00421E  C050  FFE3         	movff	btemp,plusw1
 16011  004222  6A50               	clrf	btemp,c
 16012  004224  0EFF               	movlw	-1
 16013  004226  50E3               	movf	plusw1,w,c
 16014  004228  2050               	addwfc	btemp,w,c
 16015  00422A  6E50               	movwf	btemp,c
 16016  00422C  0EFF               	movlw	-1
 16017  00422E  C050  FFE3         	movff	btemp,plusw1
 16018  004232                     l2104:
 16019                           
 16020                           ;stkvar	_val @ sp[(-4)+-2]
 16021  004232  0EFA               	movlw	-6
 16022  004234  CFE3 F051          	movff	plusw1,btemp+1
 16023  004238  0EFB               	movlw	-5
 16024  00423A  CFE3 F052          	movff	plusw1,btemp+2
 16025                           
 16026                           ;stkvar	_i @ sp[(-4)+2]
 16027  00423E  0EFE               	movlw	-2
 16028  004240  CFE3 F05A          	movff	plusw1,btemp+10
 16029  004244  0EFF               	movlw	-1
 16030  004246  CFE3 F05B          	movff	plusw1,btemp+11
 16031  00424A  5051               	movf	btemp+1,w,c
 16032  00424C  5C5A               	subwf	btemp+10,w,c
 16033  00424E  5052               	movf	btemp+2,w,c
 16034  004250  585B               	subwfb	btemp+11,w,c
 16035  004252  A0D8               	btfss	status,0,c
 16036  004254  D7B6               	goto	l2094
 16037                           
 16038                           ; _delay: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize
      +                           = 2, vargsize = 0
 16039  004256  0EFA               	movlw	250
 16040  004258  26E1               	addwf	fsr1l,f,c
 16041  00425A  0EFF               	movlw	255
 16042  00425C  22E2               	addwfc	fsr1h,f,c
 16043  00425E  0012               	return		;funcret
 16044  004260                     __end_of_delay:
 16045                           	opt stack 0
 16046                           tblptru	equ	0xFF8
 16047                           tblptrh	equ	0xFF7
 16048                           tblptrl	equ	0xFF6
 16049                           tablat	equ	0xFF5
 16050                           prodh	equ	0xFF4
 16051                           prodl	equ	0xFF3
 16052                           intcon	equ	0xFF2
 16053                           indf0	equ	0xFEF
 16054                           postinc0	equ	0xFEE
 16055                           postdec0	equ	0xFED
 16056                           fsr0h	equ	0xFEA
 16057                           fsr0l	equ	0xFE9
 16058                           wreg	equ	0xFE8
 16059                           postinc1	equ	0xFE6
 16060                           postdec1	equ	0xFE5
 16061                           plusw1	equ	0xFE3
 16062                           fsr1h	equ	0xFE2
 16063                           fsr1l	equ	0xFE1
 16064                           indf2	equ	0xFDF
 16065                           postinc2	equ	0xFDE
 16066                           postdec2	equ	0xFDD
 16067                           plusw2	equ	0xFDB
 16068                           fsr2h	equ	0xFDA
 16069                           fsr2l	equ	0xFD9
 16070                           status	equ	0xFD8
 16071                           
 16072 ;; *************** function _RF24N_write *****************
 16073 ;; Defined at:
 16074 ;;		line 966 in file "../../RF24Network_c.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;  rn              2  [STACK] PTR struct .
 16077 ;;		 -> network(372), 
 16078 ;;  to_node         2  [STACK] unsigned int 
 16079 ;;  directTo        1  [STACK] unsigned char 
 16080 ;; Auto vars:     Size  Location     Type
 16081 ;;  reply_time      4  [STACK] unsigned long 
 16082 ;;  header          2  [STACK] PTR struct .
 16083 ;;		 -> network.frame_buffer(32), network(372), 
 16084 ;;  conversion      4  [STACK] struct .
 16085 ;;  ok              1  [STACK] unsigned char 
 16086 ;;  isAckType       1  [STACK] unsigned char 
 16087 ;; Return value:  Size  Location     Type
 16088 ;;                  1  [STACK] unsigned char 
 16089 ;; Registers used:
 16090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, btemp+3, btemp+4
      +, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, tosl, structret, tblptrl, tblptrh, tblptru, prodl, pr
      +odh, bsr, cstack
 16091 ;; Tracked objects:
 16092 ;;		On entry : 0/0
 16093 ;;		On exit  : 0/0
 16094 ;;		Unchanged: 0/0
 16095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16100 ;;Total ram usage:        0 bytes
 16101 ;; Hardware stack levels used:    1
 16102 ;; Hardware stack levels required when called:    9
 16103 ;; This function calls:
 16104 ;;		_RF24N_is_valid_address
 16105 ;;		_RF24N_logicalToPhysicalAddress
 16106 ;;		_RF24N_update
 16107 ;;		_RF24N_write_to_pipe
 16108 ;;		_RF24_setAutoAck_p
 16109 ;;		_RF24_startListening
 16110 ;;		_RF24_txStandBy_t
 16111 ;;		_millis
 16112 ;; This function is called by:
 16113 ;;		_RF24N_update
 16114 ;;		_RF24N__write
 16115 ;; This function uses a recursive model
 16116 ;;
 16117                           
 16118                           	psect	text64
 16119  0018D6                     __ptext64:
 16120                           	opt stack 0
 16121  0018D6                     _RF24N_write:
 16122                           	opt stack 0
 16123                           
 16124                           ; autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, argsize = 5 va
      +                          rgsize = 0, retsize = 0
 16125  0018D6  0E0C               	movlw	12
 16126  0018D8  26E1               	addwf	fsr1l,f,c
 16127  0018DA  0E00               	movlw	0
 16128  0018DC  22E2               	addwfc	fsr1h,f,c
 16129                           
 16130                           ;RF24Network_c.c: 969: uint8_t isAckType = 0;
 16131                           ;stkvar	_isAckType @ sp[(-12)+11]
 16132                           
 16133                           ;incstack = 0
 16134  0018DE  0EFF               	movlw	-1
 16135  0018E0  6AE3               	clrf	plusw1,c
 16136                           
 16137                           ;RF24Network_c.c: 970: if(rn->frame_buffer[6] > 64 && rn->frame_buffer[6] < 192 ){ isAck
      +                          Type=1; }
 16138                           ;stkvar	_rn @ sp[(-12)+-2]
 16139  0018E2  0EF2               	movlw	-14
 16140  0018E4  CFE3 F051          	movff	plusw1,btemp+1
 16141  0018E8  0EF3               	movlw	-13
 16142  0018EA  CFE3 F052          	movff	plusw1,btemp+2
 16143  0018EE  0E0D               	movlw	13
 16144  0018F0  2451               	addwf	btemp+1,w,c
 16145  0018F2  6ED9               	movwf	fsr2l,c
 16146  0018F4  0E00               	movlw	0
 16147  0018F6  2052               	addwfc	btemp+2,w,c
 16148  0018F8  6EDA               	movwf	fsr2h,c
 16149  0018FA  0E40               	movlw	64
 16150  0018FC  64DF               	cpfsgt	indf2,c
 16151  0018FE  D012               	goto	l2444
 16152                           
 16153                           ;stkvar	_rn @ sp[(-12)+-2]
 16154  001900  0EF2               	movlw	-14
 16155  001902  CFE3 F051          	movff	plusw1,btemp+1
 16156  001906  0EF3               	movlw	-13
 16157  001908  CFE3 F052          	movff	plusw1,btemp+2
 16158  00190C  0E0D               	movlw	13
 16159  00190E  2451               	addwf	btemp+1,w,c
 16160  001910  6ED9               	movwf	fsr2l,c
 16161  001912  0E00               	movlw	0
 16162  001914  2052               	addwfc	btemp+2,w,c
 16163  001916  6EDA               	movwf	fsr2h,c
 16164  001918  0EC0               	movlw	192
 16165  00191A  60DF               	cpfslt	indf2,c
 16166  00191C  D003               	goto	l2444
 16167                           
 16168                           ;stkvar	_isAckType @ sp[(-12)+11]
 16169  00191E  0EFF               	movlw	-1
 16170  001920  6AE3               	clrf	plusw1,c
 16171  001922  2AE3               	incf	plusw1,f,c
 16172  001924                     l2444:
 16173                           
 16174                           ;RF24Network_c.c: 977: if ( !RF24N_is_valid_address(rn,to_node) )
 16175                           ;stkvar	_to_node @ sp[(-12)+-4]
 16176  001924  0EF0               	movlw	-16
 16177  001926  CFE3 FFE6          	movff	plusw1,postinc1
 16178  00192A  CFE3 FFE6          	movff	plusw1,postinc1
 16179                           
 16180                           ;stkvar	_rn @ sp[(-14)+-2]
 16181  00192E  0EF0               	movlw	-16
 16182  001930  CFE3 FFE6          	movff	plusw1,postinc1
 16183  001934  CFE3 FFE6          	movff	plusw1,postinc1
 16184  001938  ECF8  F023         	call	_RF24N_is_valid_address	;wreg free
 16185  00193C  5050               	movf	btemp,w,c
 16186  00193E  A4D8               	btfss	status,2,c
 16187  001940  D003               	goto	l2450
 16188                           
 16189                           ;RF24Network_c.c: 978: return 0;
 16190  001942  0E00               	movlw	0
 16191  001944  6E50               	movwf	btemp,c
 16192  001946  D1F8               	goto	l341
 16193  001948                     l2450:
 16194                           
 16195                           ;RF24Network_c.c: 981: logicalToPhysicalStruct conversion;
 16196                           ;RF24Network_c.c: 982: conversion.send_node= to_node;
 16197                           ;stkvar	_to_node @ sp[(-12)+-4]
 16198                           ;stkvar	_conversion @ sp[(-12)+6]
 16199  001948  0EF0               	movlw	-16
 16200  00194A  CFE3 F050          	movff	plusw1,btemp
 16201  00194E  0EFA               	movlw	-6
 16202  001950  C050  FFE3         	movff	btemp,plusw1
 16203  001954  0EF1               	movlw	-15
 16204  001956  CFE3 F050          	movff	plusw1,btemp
 16205  00195A  0EFB               	movlw	-5
 16206  00195C  C050  FFE3         	movff	btemp,plusw1
 16207                           
 16208                           ;RF24Network_c.c: 983: conversion.send_pipe=directTo;
 16209                           ;stkvar	_directTo @ sp[(-12)+-5]
 16210                           ;stkvar	_conversion @ sp[(-12)+6]
 16211  001960  0EFC               	movlw	252
 16212  001962  24E1               	addwf	fsr1l,w,c
 16213  001964  6ED9               	movwf	fsr2l,c
 16214  001966  0EFF               	movlw	255
 16215  001968  20E2               	addwfc	fsr1h,w,c
 16216  00196A  6EDA               	movwf	fsr2h,c
 16217  00196C  0EEF               	movlw	-17
 16218  00196E  CFE3 FFDF          	movff	plusw1,indf2
 16219                           
 16220                           ;RF24Network_c.c: 984: conversion.multicast=0;
 16221                           ;stkvar	_conversion @ sp[(-12)+6]
 16222  001972  0EFD               	movlw	253
 16223  001974  24E1               	addwf	fsr1l,w,c
 16224  001976  6ED9               	movwf	fsr2l,c
 16225  001978  0EFF               	movlw	255
 16226  00197A  20E2               	addwfc	fsr1h,w,c
 16227  00197C  6EDA               	movwf	fsr2h,c
 16228  00197E  0E00               	movlw	0
 16229  001980  6EDF               	movwf	indf2,c
 16230                           
 16231                           ;RF24Network_c.c: 985: RF24N_logicalToPhysicalAddress(rn, &conversion);
 16232                           ;stkvar	_conversion @ sp[(-12)+6]
 16233  001982  0EFA               	movlw	250
 16234  001984  24E1               	addwf	fsr1l,w,c
 16235  001986  6EE6               	movwf	postinc1,c
 16236  001988  0EFF               	movlw	255
 16237  00198A  20E2               	addwfc	fsr1h,w,c
 16238  00198C  6EE6               	movwf	postinc1,c
 16239                           
 16240                           ;stkvar	_rn @ sp[(-14)+-2]
 16241  00198E  0EF0               	movlw	-16
 16242  001990  CFE3 FFE6          	movff	plusw1,postinc1
 16243  001994  CFE3 FFE6          	movff	plusw1,postinc1
 16244  001998  EC30  F016         	call	_RF24N_logicalToPhysicalAddress	;wreg free
 16245                           
 16246                           ;RF24Network_c.c: 990: ;
 16247                           ;RF24Network_c.c: 993: ok=RF24N_write_to_pipe(rn,conversion.send_node, conversion.send_p
      +                          ipe, conversion.multicast);
 16248                           ;stkvar	_conversion @ sp[(-12)+6]
 16249  00199C  0EFD               	movlw	253
 16250  00199E  24E1               	addwf	fsr1l,w,c
 16251  0019A0  6ED9               	movwf	fsr2l,c
 16252  0019A2  0EFF               	movlw	255
 16253  0019A4  20E2               	addwfc	fsr1h,w,c
 16254  0019A6  6EDA               	movwf	fsr2h,c
 16255  0019A8  50DF               	movf	indf2,w,c
 16256  0019AA  6EE6               	movwf	postinc1,c
 16257                           
 16258                           ;stkvar	_conversion @ sp[(-13)+6]
 16259  0019AC  0EFB               	movlw	251
 16260  0019AE  24E1               	addwf	fsr1l,w,c
 16261  0019B0  6ED9               	movwf	fsr2l,c
 16262  0019B2  0EFF               	movlw	255
 16263  0019B4  20E2               	addwfc	fsr1h,w,c
 16264  0019B6  6EDA               	movwf	fsr2h,c
 16265  0019B8  50DF               	movf	indf2,w,c
 16266  0019BA  6EE6               	movwf	postinc1,c
 16267                           
 16268                           ;stkvar	_conversion @ sp[(-14)+6]
 16269  0019BC  0EF8               	movlw	-8
 16270  0019BE  CFE3 FFE6          	movff	plusw1,postinc1
 16271  0019C2  CFE3 FFE6          	movff	plusw1,postinc1
 16272                           
 16273                           ;stkvar	_rn @ sp[(-16)+-2]
 16274  0019C6  0EEE               	movlw	-18
 16275  0019C8  CFE3 FFE6          	movff	plusw1,postinc1
 16276  0019CC  CFE3 FFE6          	movff	plusw1,postinc1
 16277  0019D0  ECDA  F012         	call	_RF24N_write_to_pipe	;wreg free
 16278                           
 16279                           ;stkvar	_ok @ sp[(-12)+10]
 16280  0019D4  0EFE               	movlw	-2
 16281  0019D6  C050  FFE3         	movff	btemp,plusw1
 16282                           
 16283                           ;RF24Network_c.c: 1002: }
 16284                           ;RF24Network_c.c: 1005: if( directTo == 1 && ok && conversion.send_node == to_node && is
      +                          AckType){
 16285                           ;stkvar	_directTo @ sp[(-12)+-5]
 16286  0019DA  0EEF               	movlw	-17
 16287  0019DC  04E3               	decf	plusw1,w,c
 16288  0019DE  A4D8               	btfss	status,2,c
 16289  0019E0  D09E               	goto	l2488
 16290                           
 16291                           ;stkvar	_ok @ sp[(-12)+10]
 16292  0019E2  0EFE               	movlw	-2
 16293  0019E4  50E3               	movf	plusw1,w,c
 16294  0019E6  B4D8               	btfsc	status,2,c
 16295  0019E8  D09A               	goto	l2488
 16296                           
 16297                           ;stkvar	_to_node @ sp[(-12)+-4]
 16298                           ;stkvar	_conversion @ sp[(-12)+6]
 16299  0019EA  50E1               	movf	fsr1l,w,c
 16300  0019EC  0FFA               	addlw	-6
 16301  0019EE  6ED9               	movwf	fsr2l,c
 16302  0019F0  50E2               	movf	fsr1h,w,c
 16303  0019F2  6EDA               	movwf	fsr2h,c
 16304  0019F4  0EFF               	movlw	255
 16305  0019F6  22DA               	addwfc	fsr2h,f,c
 16306  0019F8  0EF0               	movlw	-16
 16307  0019FA  50E3               	movf	plusw1,w,c
 16308  0019FC  18DE               	xorwf	postinc2,w,c
 16309  0019FE  E104               	bnz	u981
 16310  001A00  0EF1               	movlw	-15
 16311  001A02  50E3               	movf	plusw1,w,c
 16312  001A04  18DE               	xorwf	postinc2,w,c
 16313  001A06  A4D8               	btfss	status,2,c
 16314  001A08                     u981:
 16315  001A08  D08A               	goto	l2488
 16316                           
 16317                           ;stkvar	_isAckType @ sp[(-12)+11]
 16318  001A0A  0EFF               	movlw	-1
 16319  001A0C  50E3               	movf	plusw1,w,c
 16320  001A0E  B4D8               	btfsc	status,2,c
 16321  001A10  D086               	goto	l2488
 16322                           
 16323                           ;RF24Network_c.c: 1007: RF24NetworkHeader* header = (RF24NetworkHeader*)rn->frame_buffer
      +                          ;
 16324                           ;stkvar	_rn @ sp[(-12)+-2]
 16325  001A12  0EF2               	movlw	-14
 16326  001A14  50E3               	movf	plusw1,w,c
 16327  001A16  0F07               	addlw	7
 16328  001A18  6E51               	movwf	btemp+1,c
 16329  001A1A  0EF3               	movlw	-13
 16330  001A1C  CFE3 F052          	movff	plusw1,btemp+2
 16331  001A20  0E00               	movlw	0
 16332  001A22  2252               	addwfc	btemp+2,f,c
 16333                           
 16334                           ;stkvar	_header @ sp[(-12)+4]
 16335  001A24  0EF9               	movlw	-7
 16336  001A26  C052  FFE3         	movff	btemp+2,plusw1
 16337  001A2A  0EF8               	movlw	-8
 16338  001A2C  C051  FFE3         	movff	btemp+1,plusw1
 16339                           
 16340                           ;RF24Network_c.c: 1008: header->type = 193;
 16341                           ;stkvar	_header @ sp[(-12)+4]
 16342  001A30  0EF8               	movlw	-8
 16343  001A32  CFE3 F051          	movff	plusw1,btemp+1
 16344  001A36  0EF9               	movlw	-7
 16345  001A38  CFE3 F052          	movff	plusw1,btemp+2
 16346  001A3C  0E06               	movlw	6
 16347  001A3E  2451               	addwf	btemp+1,w,c
 16348  001A40  6ED9               	movwf	fsr2l,c
 16349  001A42  0E00               	movlw	0
 16350  001A44  2052               	addwfc	btemp+2,w,c
 16351  001A46  6EDA               	movwf	fsr2h,c
 16352  001A48  0EC1               	movlw	193
 16353  001A4A  6EDF               	movwf	indf2,c
 16354                           
 16355                           ;RF24Network_c.c: 1009: header->to_node = header->from_node;
 16356                           ;stkvar	_header @ sp[(-12)+4]
 16357  001A4C  0EF8               	movlw	-8
 16358  001A4E  CFE3 FFD9          	movff	plusw1,fsr2l
 16359  001A52  0EF9               	movlw	-7
 16360  001A54  CFE3 FFDA          	movff	plusw1,fsr2h
 16361                           
 16362                           ;stkvar	_header @ sp[(-12)+4]
 16363  001A58  0EF8               	movlw	-8
 16364  001A5A  CFE3 F051          	movff	plusw1,btemp+1
 16365  001A5E  0EF9               	movlw	-7
 16366  001A60  CFE3 F052          	movff	plusw1,btemp+2
 16367  001A64  0E02               	movlw	2
 16368  001A66  2451               	addwf	btemp+1,w,c
 16369  001A68  6EE9               	movwf	fsr0l,c
 16370  001A6A  0E00               	movlw	0
 16371  001A6C  2052               	addwfc	btemp+2,w,c
 16372  001A6E  6EEA               	movwf	fsr0h,c
 16373  001A70  CFDE FFEE          	movff	postinc2,postinc0
 16374  001A74  CFDD FFED          	movff	postdec2,postdec0
 16375                           
 16376                           ;RF24Network_c.c: 1011: conversion.send_node = header->from_node;
 16377                           ;stkvar	_header @ sp[(-12)+4]
 16378                           ;stkvar	_conversion @ sp[(-12)+6]
 16379  001A78  0EF8               	movlw	-8
 16380  001A7A  CFE3 FFE9          	movff	plusw1,fsr0l
 16381  001A7E  0EF9               	movlw	-7
 16382  001A80  CFE3 FFEA          	movff	plusw1,fsr0h
 16383  001A84  0EFA               	movlw	-6
 16384  001A86  CFEE FFE3          	movff	postinc0,plusw1
 16385  001A8A  0EFB               	movlw	-5
 16386  001A8C  CFED FFE3          	movff	postdec0,plusw1
 16387                           
 16388                           ;RF24Network_c.c: 1012: conversion.send_pipe = 1;
 16389                           ;stkvar	_conversion @ sp[(-12)+6]
 16390  001A90  0EFC               	movlw	252
 16391  001A92  24E1               	addwf	fsr1l,w,c
 16392  001A94  6ED9               	movwf	fsr2l,c
 16393  001A96  0EFF               	movlw	255
 16394  001A98  20E2               	addwfc	fsr1h,w,c
 16395  001A9A  6EDA               	movwf	fsr2h,c
 16396  001A9C  0E01               	movlw	1
 16397  001A9E  6EDF               	movwf	indf2,c
 16398                           
 16399                           ;RF24Network_c.c: 1013: conversion.multicast = 0;
 16400                           ;stkvar	_conversion @ sp[(-12)+6]
 16401  001AA0  0EFD               	movlw	253
 16402  001AA2  24E1               	addwf	fsr1l,w,c
 16403  001AA4  6ED9               	movwf	fsr2l,c
 16404  001AA6  0EFF               	movlw	255
 16405  001AA8  20E2               	addwfc	fsr1h,w,c
 16406  001AAA  6EDA               	movwf	fsr2h,c
 16407  001AAC  0E00               	movlw	0
 16408  001AAE  6EDF               	movwf	indf2,c
 16409                           
 16410                           ;RF24Network_c.c: 1014: RF24N_logicalToPhysicalAddress(rn,&conversion);
 16411                           ;stkvar	_conversion @ sp[(-12)+6]
 16412  001AB0  0EFA               	movlw	250
 16413  001AB2  24E1               	addwf	fsr1l,w,c
 16414  001AB4  6EE6               	movwf	postinc1,c
 16415  001AB6  0EFF               	movlw	255
 16416  001AB8  20E2               	addwfc	fsr1h,w,c
 16417  001ABA  6EE6               	movwf	postinc1,c
 16418                           
 16419                           ;stkvar	_rn @ sp[(-14)+-2]
 16420  001ABC  0EF0               	movlw	-16
 16421  001ABE  CFE3 FFE6          	movff	plusw1,postinc1
 16422  001AC2  CFE3 FFE6          	movff	plusw1,postinc1
 16423  001AC6  EC30  F016         	call	_RF24N_logicalToPhysicalAddress	;wreg free
 16424                           
 16425                           ;RF24Network_c.c: 1017: rn->frame_size = sizeof(RF24NetworkHeader);
 16426                           ;stkvar	_rn @ sp[(-12)+-2]
 16427  001ACA  0EF2               	movlw	-14
 16428  001ACC  CFE3 F051          	movff	plusw1,btemp+1
 16429  001AD0  0EF3               	movlw	-13
 16430  001AD2  CFE3 F052          	movff	plusw1,btemp+2
 16431  001AD6  0E34               	movlw	52
 16432  001AD8  2451               	addwf	btemp+1,w,c
 16433  001ADA  6ED9               	movwf	fsr2l,c
 16434  001ADC  0E00               	movlw	0
 16435  001ADE  2052               	addwfc	btemp+2,w,c
 16436  001AE0  6EDA               	movwf	fsr2h,c
 16437  001AE2  0E08               	movlw	8
 16438  001AE4  6EDF               	movwf	indf2,c
 16439                           
 16440                           ;RF24Network_c.c: 1018: RF24N_write_to_pipe(rn,conversion.send_node, conversion.send_pip
      +                          e, conversion.multicast);
 16441                           ;stkvar	_conversion @ sp[(-12)+6]
 16442  001AE6  0EFD               	movlw	253
 16443  001AE8  24E1               	addwf	fsr1l,w,c
 16444  001AEA  6ED9               	movwf	fsr2l,c
 16445  001AEC  0EFF               	movlw	255
 16446  001AEE  20E2               	addwfc	fsr1h,w,c
 16447  001AF0  6EDA               	movwf	fsr2h,c
 16448  001AF2  50DF               	movf	indf2,w,c
 16449  001AF4  6EE6               	movwf	postinc1,c
 16450                           
 16451                           ;stkvar	_conversion @ sp[(-13)+6]
 16452  001AF6  0EFB               	movlw	251
 16453  001AF8  24E1               	addwf	fsr1l,w,c
 16454  001AFA  6ED9               	movwf	fsr2l,c
 16455  001AFC  0EFF               	movlw	255
 16456  001AFE  20E2               	addwfc	fsr1h,w,c
 16457  001B00  6EDA               	movwf	fsr2h,c
 16458  001B02  50DF               	movf	indf2,w,c
 16459  001B04  6EE6               	movwf	postinc1,c
 16460                           
 16461                           ;stkvar	_conversion @ sp[(-14)+6]
 16462  001B06  0EF8               	movlw	-8
 16463  001B08  CFE3 FFE6          	movff	plusw1,postinc1
 16464  001B0C  CFE3 FFE6          	movff	plusw1,postinc1
 16465                           
 16466                           ;stkvar	_rn @ sp[(-16)+-2]
 16467  001B10  0EEE               	movlw	-18
 16468  001B12  CFE3 FFE6          	movff	plusw1,postinc1
 16469  001B16  CFE3 FFE6          	movff	plusw1,postinc1
 16470  001B1A  ECDA  F012         	call	_RF24N_write_to_pipe	;wreg free
 16471  001B1E                     l2488:
 16472                           
 16473                           ;RF24Network_c.c: 1026: }
 16474                           ;RF24Network_c.c: 1030: if( ok && conversion.send_node != to_node && (directTo==0 || dir
      +                          ectTo==3) && isAckType){
 16475                           ;stkvar	_ok @ sp[(-12)+10]
 16476  001B1E  0EFE               	movlw	-2
 16477  001B20  50E3               	movf	plusw1,w,c
 16478  001B22  B4D8               	btfsc	status,2,c
 16479  001B24  D0E2               	goto	l2516
 16480                           
 16481                           ;stkvar	_to_node @ sp[(-12)+-4]
 16482                           ;stkvar	_conversion @ sp[(-12)+6]
 16483  001B26  50E1               	movf	fsr1l,w,c
 16484  001B28  0FFA               	addlw	-6
 16485  001B2A  6ED9               	movwf	fsr2l,c
 16486  001B2C  50E2               	movf	fsr1h,w,c
 16487  001B2E  6EDA               	movwf	fsr2h,c
 16488  001B30  0EFF               	movlw	255
 16489  001B32  22DA               	addwfc	fsr2h,f,c
 16490  001B34  0EF0               	movlw	-16
 16491  001B36  50E3               	movf	plusw1,w,c
 16492  001B38  18DE               	xorwf	postinc2,w,c
 16493  001B3A  E105               	bnz	u1010
 16494  001B3C  0EF1               	movlw	-15
 16495  001B3E  50E3               	movf	plusw1,w,c
 16496  001B40  18DE               	xorwf	postinc2,w,c
 16497  001B42  B4D8               	btfsc	status,2,c
 16498  001B44  D0D2               	goto	l2516
 16499  001B46                     u1010:
 16500                           
 16501                           ;stkvar	_directTo @ sp[(-12)+-5]
 16502  001B46  0EEF               	movlw	-17
 16503  001B48  50E3               	movf	plusw1,w,c
 16504  001B4A  B4D8               	btfsc	status,2,c
 16505  001B4C  D007               	goto	l2496
 16506                           
 16507                           ;stkvar	_directTo @ sp[(-12)+-5]
 16508  001B4E  0EEF               	movlw	-17
 16509  001B50  CFE3 F050          	movff	plusw1,btemp
 16510  001B54  0E03               	movlw	3
 16511  001B56  1850               	xorwf	btemp,w,c
 16512  001B58  A4D8               	btfss	status,2,c
 16513  001B5A  D0C7               	goto	l2516
 16514  001B5C                     l2496:
 16515                           
 16516                           ;stkvar	_isAckType @ sp[(-12)+11]
 16517  001B5C  0EFF               	movlw	-1
 16518  001B5E  50E3               	movf	plusw1,w,c
 16519  001B60  B4D8               	btfsc	status,2,c
 16520  001B62  D0C3               	goto	l2516
 16521                           
 16522                           ;RF24Network_c.c: 1033: if(rn->networkFlags & 4){
 16523                           ;stkvar	_rn @ sp[(-12)+-2]
 16524  001B64  0EF2               	movlw	-14
 16525  001B66  CFE3 F051          	movff	plusw1,btemp+1
 16526  001B6A  0EF3               	movlw	-13
 16527  001B6C  CFE3 F052          	movff	plusw1,btemp+2
 16528  001B70  0E2A               	movlw	42
 16529  001B72  2451               	addwf	btemp+1,w,c
 16530  001B74  6ED9               	movwf	fsr2l,c
 16531  001B76  0E00               	movlw	0
 16532  001B78  2052               	addwfc	btemp+2,w,c
 16533  001B7A  6EDA               	movwf	fsr2h,c
 16534  001B7C  A4DF               	btfss	indf2,2,c
 16535  001B7E  D054               	goto	l2506
 16536                           
 16537                           ;RF24Network_c.c: 1034: RF24_txStandBy_t(rn->radio,rn->txTimeout,0);
 16538  001B80  0E00               	movlw	0
 16539  001B82  6EE6               	movwf	postinc1,c
 16540                           
 16541                           ;stkvar	_rn @ sp[(-13)+-2]
 16542  001B84  0EF1               	movlw	-15
 16543  001B86  CFE3 F051          	movff	plusw1,btemp+1
 16544  001B8A  0EF2               	movlw	-14
 16545  001B8C  CFE3 F052          	movff	plusw1,btemp+2
 16546  001B90  0E01               	movlw	1
 16547  001B92  2451               	addwf	btemp+1,w,c
 16548  001B94  6ED9               	movwf	fsr2l,c
 16549  001B96  0E00               	movlw	0
 16550  001B98  2052               	addwfc	btemp+2,w,c
 16551  001B9A  6EDA               	movwf	fsr2h,c
 16552  001B9C  CFDE FFE6          	movff	postinc2,postinc1
 16553  001BA0  CFDE FFE6          	movff	postinc2,postinc1
 16554  001BA4  CFDE FFE6          	movff	postinc2,postinc1
 16555  001BA8  CFDE FFE6          	movff	postinc2,postinc1
 16556                           
 16557                           ;stkvar	_rn @ sp[(-17)+-2]
 16558  001BAC  0EED               	movlw	-19
 16559  001BAE  CFE3 F051          	movff	plusw1,btemp+1
 16560  001BB2  0EEE               	movlw	-18
 16561  001BB4  CFE3 F052          	movff	plusw1,btemp+2
 16562  001BB8  0E2F               	movlw	47
 16563  001BBA  2451               	addwf	btemp+1,w,c
 16564  001BBC  6ED9               	movwf	fsr2l,c
 16565  001BBE  0E00               	movlw	0
 16566  001BC0  2052               	addwfc	btemp+2,w,c
 16567  001BC2  6EDA               	movwf	fsr2h,c
 16568  001BC4  CFDE F051          	movff	postinc2,btemp+1
 16569  001BC8  CFDD F052          	movff	postdec2,btemp+2
 16570  001BCC  C051  FFE6         	movff	btemp+1,postinc1
 16571  001BD0  C052  FFE6         	movff	btemp+2,postinc1
 16572  001BD4  EC2E  F01C         	call	_RF24_txStandBy_t	;wreg free
 16573                           
 16574                           ;RF24Network_c.c: 1035: rn->networkFlags &= ~4;
 16575                           ;stkvar	_rn @ sp[(-12)+-2]
 16576  001BD8  0EF2               	movlw	-14
 16577  001BDA  CFE3 F051          	movff	plusw1,btemp+1
 16578  001BDE  0EF3               	movlw	-13
 16579  001BE0  CFE3 F052          	movff	plusw1,btemp+2
 16580  001BE4  0E2A               	movlw	42
 16581  001BE6  2451               	addwf	btemp+1,w,c
 16582  001BE8  6ED9               	movwf	fsr2l,c
 16583  001BEA  0E00               	movlw	0
 16584  001BEC  2052               	addwfc	btemp+2,w,c
 16585  001BEE  6EDA               	movwf	fsr2h,c
 16586  001BF0  0EFB               	movlw	251
 16587  001BF2  16DF               	andwf	indf2,f,c
 16588                           
 16589                           ;RF24Network_c.c: 1036: RF24_setAutoAck_p(rn->radio,0,0);
 16590  001BF4  0E00               	movlw	0
 16591  001BF6  6EE6               	movwf	postinc1,c
 16592  001BF8  0E00               	movlw	0
 16593  001BFA  6EE6               	movwf	postinc1,c
 16594                           
 16595                           ;stkvar	_rn @ sp[(-14)+-2]
 16596  001BFC  0EF0               	movlw	-16
 16597  001BFE  CFE3 F051          	movff	plusw1,btemp+1
 16598  001C02  0EF1               	movlw	-15
 16599  001C04  CFE3 F052          	movff	plusw1,btemp+2
 16600  001C08  0E2F               	movlw	47
 16601  001C0A  2451               	addwf	btemp+1,w,c
 16602  001C0C  6ED9               	movwf	fsr2l,c
 16603  001C0E  0E00               	movlw	0
 16604  001C10  2052               	addwfc	btemp+2,w,c
 16605  001C12  6EDA               	movwf	fsr2h,c
 16606  001C14  CFDE F051          	movff	postinc2,btemp+1
 16607  001C18  CFDD F052          	movff	postdec2,btemp+2
 16608  001C1C  C051  FFE6         	movff	btemp+1,postinc1
 16609  001C20  C052  FFE6         	movff	btemp+2,postinc1
 16610  001C24  ECDC  F021         	call	_RF24_setAutoAck_p	;wreg free
 16611  001C28                     l2506:
 16612                           
 16613                           ;RF24Network_c.c: 1037: }
 16614                           ;RF24Network_c.c: 1038: RF24_startListening(rn->radio);
 16615                           ;stkvar	_rn @ sp[(-12)+-2]
 16616  001C28  0EF2               	movlw	-14
 16617  001C2A  CFE3 F051          	movff	plusw1,btemp+1
 16618  001C2E  0EF3               	movlw	-13
 16619  001C30  CFE3 F052          	movff	plusw1,btemp+2
 16620  001C34  0E2F               	movlw	47
 16621  001C36  2451               	addwf	btemp+1,w,c
 16622  001C38  6ED9               	movwf	fsr2l,c
 16623  001C3A  0E00               	movlw	0
 16624  001C3C  2052               	addwfc	btemp+2,w,c
 16625  001C3E  6EDA               	movwf	fsr2h,c
 16626  001C40  CFDE F051          	movff	postinc2,btemp+1
 16627  001C44  CFDD F052          	movff	postdec2,btemp+2
 16628  001C48  C051  FFE6         	movff	btemp+1,postinc1
 16629  001C4C  C052  FFE6         	movff	btemp+2,postinc1
 16630  001C50  ECC8  F01C         	call	_RF24_startListening	;wreg free
 16631                           
 16632                           ;RF24Network_c.c: 1040: uint32_t reply_time = millis();
 16633  001C54  EC4A  F028         	call	_millis	;wreg free
 16634                           
 16635                           ;stkvar	_reply_time @ sp[(-12)+0]
 16636  001C58  0EF4               	movlw	-12
 16637  001C5A  C050  FFE3         	movff	btemp,plusw1
 16638  001C5E  0EF5               	movlw	-11
 16639  001C60  C051  FFE3         	movff	btemp+1,plusw1
 16640  001C64  0EF6               	movlw	-10
 16641  001C66  C052  FFE3         	movff	btemp+2,plusw1
 16642  001C6A  0EF7               	movlw	-9
 16643  001C6C  C053  FFE3         	movff	btemp+3,plusw1
 16644                           
 16645                           ;RF24Network_c.c: 1042: while( RF24N_update(rn) != 193){
 16646  001C70  D031               	goto	l2514
 16647  001C72                     l2510:
 16648                           
 16649                           ;RF24Network_c.c: 1046: if(millis() - reply_time > rn->routeTimeout){
 16650                           ;stkvar	_reply_time @ sp[(-12)+0]
 16651  001C72  EC4A  F028         	call	_millis	;wreg free
 16652  001C76  0EF4               	movlw	-12
 16653  001C78  50E3               	movf	plusw1,w,c
 16654  001C7A  5E50               	subwf	btemp,f,c
 16655  001C7C  0EF5               	movlw	-11
 16656  001C7E  50E3               	movf	plusw1,w,c
 16657  001C80  5A51               	subwfb	btemp+1,f,c
 16658  001C82  0EF6               	movlw	-10
 16659  001C84  50E3               	movf	plusw1,w,c
 16660  001C86  5A52               	subwfb	btemp+2,f,c
 16661  001C88  0EF7               	movlw	-9
 16662  001C8A  50E3               	movf	plusw1,w,c
 16663  001C8C  5A53               	subwfb	btemp+3,f,c
 16664                           
 16665                           ;stkvar	_rn @ sp[(-12)+-2]
 16666  001C8E  0EF2               	movlw	-14
 16667  001C90  CFE3 F05A          	movff	plusw1,btemp+10
 16668  001C94  0EF3               	movlw	-13
 16669  001C96  CFE3 F05B          	movff	plusw1,btemp+11
 16670  001C9A  0E05               	movlw	5
 16671  001C9C  245A               	addwf	btemp+10,w,c
 16672  001C9E  6ED9               	movwf	fsr2l,c
 16673  001CA0  0E00               	movlw	0
 16674  001CA2  205B               	addwfc	btemp+11,w,c
 16675  001CA4  6EDA               	movwf	fsr2h,c
 16676  001CA6  CFDE F05A          	movff	postinc2,btemp+10
 16677  001CAA  CFDD F05B          	movff	postdec2,btemp+11
 16678  001CAE  505A               	movf	btemp+10,w,c
 16679  001CB0  6E54               	movwf	btemp+4,c
 16680  001CB2  505B               	movf	btemp+11,w,c
 16681  001CB4  6E55               	movwf	btemp+5,c
 16682  001CB6  6A56               	clrf	btemp+6,c
 16683  001CB8  6A57               	clrf	btemp+7,c
 16684  001CBA  5050               	movf	btemp,w,c
 16685  001CBC  5C54               	subwf	btemp+4,w,c
 16686  001CBE  5051               	movf	btemp+1,w,c
 16687  001CC0  5855               	subwfb	btemp+5,w,c
 16688  001CC2  5052               	movf	btemp+2,w,c
 16689  001CC4  5856               	subwfb	btemp+6,w,c
 16690  001CC6  5053               	movf	btemp+3,w,c
 16691  001CC8  5857               	subwfb	btemp+7,w,c
 16692  001CCA  B0D8               	btfsc	status,0,c
 16693  001CCC  D003               	goto	l2514
 16694                           
 16695                           ;RF24Network_c.c: 1050: ;
 16696                           ;RF24Network_c.c: 1052: ok=0;
 16697                           ;stkvar	_ok @ sp[(-12)+10]
 16698  001CCE  0EFE               	movlw	-2
 16699  001CD0  6AE3               	clrf	plusw1,c
 16700                           
 16701                           ;RF24Network_c.c: 1053: break;
 16702  001CD2  D00B               	goto	l2516
 16703  001CD4                     l2514:
 16704                           
 16705                           ;stkvar	_rn @ sp[(-12)+-2]
 16706  001CD4  0EF2               	movlw	-14
 16707  001CD6  CFE3 FFE6          	movff	plusw1,postinc1
 16708  001CDA  CFE3 FFE6          	movff	plusw1,postinc1
 16709  001CDE  ECA4  F005         	call	_RF24N_update	;wreg free
 16710  001CE2  0EC1               	movlw	193
 16711  001CE4  1850               	xorwf	btemp,w,c
 16712  001CE6  A4D8               	btfss	status,2,c
 16713  001CE8  D7C4               	goto	l2510
 16714  001CEA                     l2516:
 16715                           
 16716                           ;RF24Network_c.c: 1054: }
 16717                           ;RF24Network_c.c: 1055: }
 16718                           ;RF24Network_c.c: 1056: }
 16719                           ;RF24Network_c.c: 1057: if( !(rn->networkFlags & 4) ){
 16720                           ;stkvar	_rn @ sp[(-12)+-2]
 16721  001CEA  0EF2               	movlw	-14
 16722  001CEC  CFE3 F051          	movff	plusw1,btemp+1
 16723  001CF0  0EF3               	movlw	-13
 16724  001CF2  CFE3 F052          	movff	plusw1,btemp+2
 16725  001CF6  0E2A               	movlw	42
 16726  001CF8  2451               	addwf	btemp+1,w,c
 16727  001CFA  6ED9               	movwf	fsr2l,c
 16728  001CFC  0E00               	movlw	0
 16729  001CFE  2052               	addwfc	btemp+2,w,c
 16730  001D00  6EDA               	movwf	fsr2h,c
 16731  001D02  B4DF               	btfsc	indf2,2,c
 16732  001D04  D016               	goto	l2520
 16733                           
 16734                           ;RF24Network_c.c: 1060: RF24_startListening(rn->radio);
 16735                           ;stkvar	_rn @ sp[(-12)+-2]
 16736  001D06  0EF2               	movlw	-14
 16737  001D08  CFE3 F051          	movff	plusw1,btemp+1
 16738  001D0C  0EF3               	movlw	-13
 16739  001D0E  CFE3 F052          	movff	plusw1,btemp+2
 16740  001D12  0E2F               	movlw	47
 16741  001D14  2451               	addwf	btemp+1,w,c
 16742  001D16  6ED9               	movwf	fsr2l,c
 16743  001D18  0E00               	movlw	0
 16744  001D1A  2052               	addwfc	btemp+2,w,c
 16745  001D1C  6EDA               	movwf	fsr2h,c
 16746  001D1E  CFDE F051          	movff	postinc2,btemp+1
 16747  001D22  CFDD F052          	movff	postdec2,btemp+2
 16748  001D26  C051  FFE6         	movff	btemp+1,postinc1
 16749  001D2A  C052  FFE6         	movff	btemp+2,postinc1
 16750  001D2E  ECC8  F01C         	call	_RF24_startListening	;wreg free
 16751  001D32                     l2520:
 16752                           
 16753                           ;RF24Network_c.c: 1062: }
 16754                           ;RF24Network_c.c: 1070: return ok;
 16755                           ;stkvar	_ok @ sp[(-12)+10]
 16756  001D32  0EFE               	movlw	-2
 16757  001D34  CFE3 F050          	movff	plusw1,btemp
 16758  001D38                     l341:
 16759                           
 16760                           ; _RF24N_write: autosize = 12, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 5, 
      +                          argsize = 5, vargsize = 0
 16761  001D38  0EEF               	movlw	239
 16762  001D3A  26E1               	addwf	fsr1l,f,c
 16763  001D3C  0EFF               	movlw	255
 16764  001D3E  22E2               	addwfc	fsr1h,f,c
 16765  001D40  0012               	return		;funcret
 16766  001D42                     __end_of_RF24N_write:
 16767                           	opt stack 0
 16768                           tblptru	equ	0xFF8
 16769                           tblptrh	equ	0xFF7
 16770                           tblptrl	equ	0xFF6
 16771                           tablat	equ	0xFF5
 16772                           prodh	equ	0xFF4
 16773                           prodl	equ	0xFF3
 16774                           intcon	equ	0xFF2
 16775                           indf0	equ	0xFEF
 16776                           postinc0	equ	0xFEE
 16777                           postdec0	equ	0xFED
 16778                           fsr0h	equ	0xFEA
 16779                           fsr0l	equ	0xFE9
 16780                           wreg	equ	0xFE8
 16781                           postinc1	equ	0xFE6
 16782                           postdec1	equ	0xFE5
 16783                           plusw1	equ	0xFE3
 16784                           fsr1h	equ	0xFE2
 16785                           fsr1l	equ	0xFE1
 16786                           indf2	equ	0xFDF
 16787                           postinc2	equ	0xFDE
 16788                           postdec2	equ	0xFDD
 16789                           plusw2	equ	0xFDB
 16790                           fsr2h	equ	0xFDA
 16791                           fsr2l	equ	0xFD9
 16792                           status	equ	0xFD8
 16793                           
 16794 ;; *************** function _RF24_txStandBy_t *****************
 16795 ;; Defined at:
 16796 ;;		line 1015 in file "../../../RF24_c/RF24_c.c"
 16797 ;; Parameters:    Size  Location     Type
 16798 ;;  rf              2  [STACK] PTR struct RF24
 16799 ;;		 -> radio(22), 
 16800 ;;  timeout         4  [STACK] unsigned long 
 16801 ;;  startTx         1  [STACK] unsigned char 
 16802 ;; Auto vars:     Size  Location     Type
 16803 ;;  start           4  [STACK] unsigned long 
 16804 ;; Return value:  Size  Location     Type
 16805 ;;                  1  [STACK] unsigned char 
 16806 ;; Registers used:
 16807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+8, btemp
      ++10, btemp+11, tblptrl, tblptrh, tblptru
 16808 ;; Tracked objects:
 16809 ;;		On entry : 0/0
 16810 ;;		On exit  : 0/0
 16811 ;;		Unchanged: 0/0
 16812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16817 ;;Total ram usage:        0 bytes
 16818 ;; Hardware stack levels used:    1
 16819 ;; Hardware stack levels required when called:    7
 16820 ;; This function calls:
 16821 ;;		_RF24_ce_d
 16822 ;;		_RF24_flush_tx
 16823 ;;		_RF24_get_status
 16824 ;;		_RF24_read_register_d
 16825 ;;		_RF24_stopListening
 16826 ;;		_RF24_write_register_d
 16827 ;;		_millis
 16828 ;; This function is called by:
 16829 ;;		_RF24N_write_
 16830 ;;		_RF24N_write
 16831 ;;		_RF24N_write_to_pipe
 16832 ;; This function uses a reentrant model
 16833 ;;
 16834                           
 16835                           	psect	text65
 16836  00385C                     __ptext65:
 16837                           	opt stack 0
 16838  00385C                     _RF24_txStandBy_t:
 16839                           	opt stack 0
 16840                           
 16841                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 7, argsize = 7 var
      +                          gsize = 0, retsize = 0
 16842  00385C  52E6               	movf	postinc1,f,c
 16843  00385E  52E6               	movf	postinc1,f,c
 16844  003860  52E6               	movf	postinc1,f,c
 16845  003862  52E6               	movf	postinc1,f,c
 16846                           
 16847                           ;RF24_c.c: 1016: uint32_t start;
 16848                           ;RF24_c.c: 1018: if(startTx){
 16849                           ;stkvar	_startTx @ sp[(-4)+-7]
 16850                           
 16851                           ;incstack = 0
 16852  003864  0EF5               	movlw	-11
 16853  003866  50E3               	movf	plusw1,w,c
 16854  003868  B4D8               	btfsc	status,2,c
 16855  00386A  D010               	goto	l2194
 16856                           
 16857                           ;RF24_c.c: 1019: RF24_stopListening(rf);
 16858                           ;stkvar	_rf @ sp[(-4)+-2]
 16859  00386C  0EFA               	movlw	-6
 16860  00386E  CFE3 FFE6          	movff	plusw1,postinc1
 16861  003872  CFE3 FFE6          	movff	plusw1,postinc1
 16862  003876  EC50  F01E         	call	_RF24_stopListening	;wreg free
 16863                           
 16864                           ;RF24_c.c: 1020: RF24_ce_d(rf,1);
 16865  00387A  0E01               	movlw	1
 16866  00387C  6EE6               	movwf	postinc1,c
 16867                           
 16868                           ;stkvar	_rf @ sp[(-5)+-2]
 16869  00387E  0EF9               	movlw	-7
 16870  003880  CFE3 FFE6          	movff	plusw1,postinc1
 16871  003884  CFE3 FFE6          	movff	plusw1,postinc1
 16872  003888  EC2A  F026         	call	_RF24_ce_d	;wreg free
 16873  00388C                     l2194:
 16874                           
 16875                           ;RF24_c.c: 1021: }
 16876                           ;RF24_c.c: 1023: start = millis();
 16877  00388C  EC4A  F028         	call	_millis	;wreg free
 16878                           
 16879                           ;stkvar	_start @ sp[(-4)+0]
 16880  003890  0EFC               	movlw	-4
 16881  003892  C050  FFE3         	movff	btemp,plusw1
 16882  003896  0EFD               	movlw	-3
 16883  003898  C051  FFE3         	movff	btemp+1,plusw1
 16884  00389C  0EFE               	movlw	-2
 16885  00389E  C052  FFE3         	movff	btemp+2,plusw1
 16886  0038A2  0EFF               	movlw	-1
 16887  0038A4  C053  FFE3         	movff	btemp+3,plusw1
 16888                           
 16889                           ;RF24_c.c: 1025: while( ! (RF24_read_register_d(rf,0x17) & (1<<(4))) ){
 16890  0038A8  D058               	goto	l2214
 16891  0038AA                     l2196:
 16892                           
 16893                           ;RF24_c.c: 1026: if( RF24_get_status(rf) & (1<<(4))){
 16894                           ;stkvar	_rf @ sp[(-4)+-2]
 16895  0038AA  0EFA               	movlw	-6
 16896  0038AC  CFE3 FFE6          	movff	plusw1,postinc1
 16897  0038B0  CFE3 FFE6          	movff	plusw1,postinc1
 16898  0038B4  EC10  F028         	call	_RF24_get_status	;wreg free
 16899  0038B8  A850               	btfss	btemp,4,c
 16900  0038BA  D04F               	goto	l2214
 16901                           
 16902                           ;RF24_c.c: 1027: RF24_write_register_d(rf,0x07,(1<<(4)) );
 16903  0038BC  0E10               	movlw	16
 16904  0038BE  6EE6               	movwf	postinc1,c
 16905  0038C0  0E07               	movlw	7
 16906  0038C2  6EE6               	movwf	postinc1,c
 16907                           
 16908                           ;stkvar	_rf @ sp[(-6)+-2]
 16909  0038C4  0EF8               	movlw	-8
 16910  0038C6  CFE3 FFE6          	movff	plusw1,postinc1
 16911  0038CA  CFE3 FFE6          	movff	plusw1,postinc1
 16912  0038CE  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 16913                           
 16914                           ;RF24_c.c: 1028: RF24_ce_d(rf,0);
 16915  0038D2  0E00               	movlw	0
 16916  0038D4  6EE6               	movwf	postinc1,c
 16917                           
 16918                           ;stkvar	_rf @ sp[(-5)+-2]
 16919  0038D6  0EF9               	movlw	-7
 16920  0038D8  CFE3 FFE6          	movff	plusw1,postinc1
 16921  0038DC  CFE3 FFE6          	movff	plusw1,postinc1
 16922  0038E0  EC2A  F026         	call	_RF24_ce_d	;wreg free
 16923                           
 16924                           ;RF24_c.c: 1029: RF24_ce_d(rf,1);
 16925  0038E4  0E01               	movlw	1
 16926  0038E6  6EE6               	movwf	postinc1,c
 16927                           
 16928                           ;stkvar	_rf @ sp[(-5)+-2]
 16929  0038E8  0EF9               	movlw	-7
 16930  0038EA  CFE3 FFE6          	movff	plusw1,postinc1
 16931  0038EE  CFE3 FFE6          	movff	plusw1,postinc1
 16932  0038F2  EC2A  F026         	call	_RF24_ce_d	;wreg free
 16933                           
 16934                           ;RF24_c.c: 1030: if(millis() - start >= timeout){
 16935                           ;stkvar	_timeout @ sp[(-4)+-6]
 16936                           ;stkvar	_start @ sp[(-4)+0]
 16937  0038F6  EC4A  F028         	call	_millis	;wreg free
 16938  0038FA  0EFC               	movlw	-4
 16939  0038FC  50E3               	movf	plusw1,w,c
 16940  0038FE  5E50               	subwf	btemp,f,c
 16941  003900  0EFD               	movlw	-3
 16942  003902  50E3               	movf	plusw1,w,c
 16943  003904  5A51               	subwfb	btemp+1,f,c
 16944  003906  0EFE               	movlw	-2
 16945  003908  50E3               	movf	plusw1,w,c
 16946  00390A  5A52               	subwfb	btemp+2,f,c
 16947  00390C  0EFF               	movlw	-1
 16948  00390E  50E3               	movf	plusw1,w,c
 16949  003910  5A53               	subwfb	btemp+3,f,c
 16950  003912  0EF6               	movlw	-10
 16951  003914  50E3               	movf	plusw1,w,c
 16952  003916  5C50               	subwf	btemp,w,c
 16953  003918  0EF7               	movlw	-9
 16954  00391A  50E3               	movf	plusw1,w,c
 16955  00391C  5851               	subwfb	btemp+1,w,c
 16956  00391E  0EF8               	movlw	-8
 16957  003920  50E3               	movf	plusw1,w,c
 16958  003922  5852               	subwfb	btemp+2,w,c
 16959  003924  5053               	movf	btemp+3,w,c
 16960  003926  0A80               	xorlw	128
 16961  003928  6E58               	movwf	btemp+8,c
 16962  00392A  0EF9               	movlw	-7
 16963  00392C  50E3               	movf	plusw1,w,c
 16964  00392E  0A80               	xorlw	128
 16965  003930  5858               	subwfb	btemp+8,w,c
 16966  003932  A0D8               	btfss	status,0,c
 16967  003934  D012               	goto	l2214
 16968                           
 16969                           ;RF24_c.c: 1031: RF24_ce_d(rf,0); RF24_flush_tx(rf);; return 0;
 16970  003936  0E00               	movlw	0
 16971  003938  6EE6               	movwf	postinc1,c
 16972                           
 16973                           ;stkvar	_rf @ sp[(-5)+-2]
 16974  00393A  0EF9               	movlw	-7
 16975  00393C  CFE3 FFE6          	movff	plusw1,postinc1
 16976  003940  CFE3 FFE6          	movff	plusw1,postinc1
 16977  003944  EC2A  F026         	call	_RF24_ce_d	;wreg free
 16978                           
 16979                           ;stkvar	_rf @ sp[(-4)+-2]
 16980  003948  0EFA               	movlw	-6
 16981  00394A  CFE3 FFE6          	movff	plusw1,postinc1
 16982  00394E  CFE3 FFE6          	movff	plusw1,postinc1
 16983  003952  EC34  F028         	call	_RF24_flush_tx	;wreg free
 16984  003956  0E00               	movlw	0
 16985  003958  D015               	goto	L20
 16986  00395A                     l2214:
 16987  00395A  0E17               	movlw	23
 16988  00395C  6EE6               	movwf	postinc1,c
 16989                           
 16990                           ;stkvar	_rf @ sp[(-5)+-2]
 16991  00395E  0EF9               	movlw	-7
 16992  003960  CFE3 FFE6          	movff	plusw1,postinc1
 16993  003964  CFE3 FFE6          	movff	plusw1,postinc1
 16994  003968  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 16995  00396C  A850               	btfss	btemp,4,c
 16996  00396E  D79D               	goto	l2196
 16997                           
 16998                           ;RF24_c.c: 1032: }
 16999                           ;RF24_c.c: 1033: }
 17000                           ;RF24_c.c: 1042: }
 17001                           ;RF24_c.c: 1045: RF24_ce_d(rf,0);
 17002  003970  0E00               	movlw	0
 17003  003972  6EE6               	movwf	postinc1,c
 17004                           
 17005                           ;stkvar	_rf @ sp[(-5)+-2]
 17006  003974  0EF9               	movlw	-7
 17007  003976  CFE3 FFE6          	movff	plusw1,postinc1
 17008  00397A  CFE3 FFE6          	movff	plusw1,postinc1
 17009  00397E  EC2A  F026         	call	_RF24_ce_d	;wreg free
 17010                           
 17011                           ;RF24_c.c: 1046: return 1;
 17012  003982  0E01               	movlw	1
 17013  003984                     L20:
 17014  003984  6E50               	movwf	btemp,c
 17015                           
 17016                           ; _RF24_txStandBy_t: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize =
      +                           7, argsize = 7, vargsize = 0
 17017  003986  0EF5               	movlw	245
 17018  003988  26E1               	addwf	fsr1l,f,c
 17019  00398A  0EFF               	movlw	255
 17020  00398C  22E2               	addwfc	fsr1h,f,c
 17021  00398E  0012               	return		;funcret
 17022  003990                     __end_of_RF24_txStandBy_t:
 17023                           	opt stack 0
 17024                           tblptru	equ	0xFF8
 17025                           tblptrh	equ	0xFF7
 17026                           tblptrl	equ	0xFF6
 17027                           tablat	equ	0xFF5
 17028                           prodh	equ	0xFF4
 17029                           prodl	equ	0xFF3
 17030                           intcon	equ	0xFF2
 17031                           indf0	equ	0xFEF
 17032                           postinc0	equ	0xFEE
 17033                           postdec0	equ	0xFED
 17034                           fsr0h	equ	0xFEA
 17035                           fsr0l	equ	0xFE9
 17036                           wreg	equ	0xFE8
 17037                           postinc1	equ	0xFE6
 17038                           postdec1	equ	0xFE5
 17039                           plusw1	equ	0xFE3
 17040                           fsr1h	equ	0xFE2
 17041                           fsr1l	equ	0xFE1
 17042                           indf2	equ	0xFDF
 17043                           postinc2	equ	0xFDE
 17044                           postdec2	equ	0xFDD
 17045                           plusw2	equ	0xFDB
 17046                           fsr2h	equ	0xFDA
 17047                           fsr2l	equ	0xFD9
 17048                           status	equ	0xFD8
 17049                           
 17050 ;; *************** function _millis *****************
 17051 ;; Defined at:
 17052 ;;		line 157 in file "../../../RF24_c/utility/XC8/spi.c"
 17053 ;; Parameters:    Size  Location     Type
 17054 ;;		None
 17055 ;; Auto vars:     Size  Location     Type
 17056 ;;		None
 17057 ;; Return value:  Size  Location     Type
 17058 ;;                  4  [STACK] long 
 17059 ;; Registers used:
 17060 ;;		btemp, btemp+1, btemp+2, btemp+3
 17061 ;; Tracked objects:
 17062 ;;		On entry : 0/0
 17063 ;;		On exit  : 0/0
 17064 ;;		Unchanged: 0/0
 17065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17070 ;;Total ram usage:        0 bytes
 17071 ;; Hardware stack levels used:    1
 17072 ;; Hardware stack levels required when called:    1
 17073 ;; This function calls:
 17074 ;;		Nothing
 17075 ;; This function is called by:
 17076 ;;		_loop
 17077 ;;		_RF24N_write_
 17078 ;;		_RF24N_write
 17079 ;;		_RF24_txStandBy_t
 17080 ;; This function uses a reentrant model
 17081 ;;
 17082                           
 17083                           	psect	text66
 17084  005094                     __ptext66:
 17085                           	opt stack 0
 17086  005094                     _millis:
 17087                           	opt stack 28
 17088                           
 17089                           ;spi.c: 159: return mtime;
 17090                           
 17091                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 17092                           ;incstack = 0
 17093  005094  C005  F050         	movff	_mtime,btemp
 17094  005098  C006  F051         	movff	_mtime+1,btemp+1
 17095  00509C  C007  F052         	movff	_mtime+2,btemp+2
 17096  0050A0  C008  F053         	movff	_mtime+3,btemp+3
 17097                           
 17098                           ; _millis: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsiz
      +                          e = 0, vargsize = 0
 17099  0050A4  0012               	return		;funcret
 17100  0050A6                     __end_of_millis:
 17101                           	opt stack 0
 17102                           tblptru	equ	0xFF8
 17103                           tblptrh	equ	0xFF7
 17104                           tblptrl	equ	0xFF6
 17105                           tablat	equ	0xFF5
 17106                           prodh	equ	0xFF4
 17107                           prodl	equ	0xFF3
 17108                           intcon	equ	0xFF2
 17109                           indf0	equ	0xFEF
 17110                           postinc0	equ	0xFEE
 17111                           postdec0	equ	0xFED
 17112                           fsr0h	equ	0xFEA
 17113                           fsr0l	equ	0xFE9
 17114                           wreg	equ	0xFE8
 17115                           postinc1	equ	0xFE6
 17116                           postdec1	equ	0xFE5
 17117                           plusw1	equ	0xFE3
 17118                           fsr1h	equ	0xFE2
 17119                           fsr1l	equ	0xFE1
 17120                           indf2	equ	0xFDF
 17121                           postinc2	equ	0xFDE
 17122                           postdec2	equ	0xFDD
 17123                           plusw2	equ	0xFDB
 17124                           fsr2h	equ	0xFDA
 17125                           fsr2l	equ	0xFD9
 17126                           status	equ	0xFD8
 17127                           
 17128 ;; *************** function _RF24_write_register_d *****************
 17129 ;; Defined at:
 17130 ;;		line 191 in file "../../../RF24_c/RF24_c.c"
 17131 ;; Parameters:    Size  Location     Type
 17132 ;;  rf              2  [STACK] PTR struct RF24
 17133 ;;		 -> radio(22), 
 17134 ;;  reg             1  [STACK] unsigned char 
 17135 ;;  value           1  [STACK] unsigned char 
 17136 ;; Auto vars:     Size  Location     Type
 17137 ;;  status          1  [STACK] unsigned char 
 17138 ;; Return value:  Size  Location     Type
 17139 ;;                  1  [STACK] unsigned char 
 17140 ;; Registers used:
 17141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 17142 ;; Tracked objects:
 17143 ;;		On entry : 0/0
 17144 ;;		On exit  : 0/0
 17145 ;;		Unchanged: 0/0
 17146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17151 ;;Total ram usage:        0 bytes
 17152 ;; Hardware stack levels used:    1
 17153 ;; Hardware stack levels required when called:    4
 17154 ;; This function calls:
 17155 ;;		_RF24_beginTransaction
 17156 ;;		_RF24_endTransaction
 17157 ;;		_SPI_transfer
 17158 ;; This function is called by:
 17159 ;;		_RF24_setChannel
 17160 ;;		_RF24_begin
 17161 ;;		_RF24_startListening
 17162 ;;		_RF24_stopListening
 17163 ;;		_RF24_powerUp
 17164 ;;		_RF24_writeFast_m
 17165 ;;		_RF24_txStandBy_t
 17166 ;;		_RF24_read
 17167 ;;		_RF24_openWritingPipe_d
 17168 ;;		_RF24_openReadingPipe_d
 17169 ;;		_RF24_closeReadingPipe
 17170 ;;		_RF24_enableDynamicPayloads
 17171 ;;		_RF24_setAutoAck_p
 17172 ;;		_RF24_setDataRate
 17173 ;;		_RF24_setRetries
 17174 ;; This function uses a reentrant model
 17175 ;;
 17176                           
 17177                           	psect	text67
 17178  004D3C                     __ptext67:
 17179                           	opt stack 0
 17180  004D3C                     _RF24_write_register_d:
 17181                           	opt stack 0
 17182                           
 17183                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 17184  004D3C  52E6               	movf	postinc1,f,c
 17185                           
 17186                           ;RF24_c.c: 193: uint8_t status;
 17187                           ;RF24_c.c: 195: ;
 17188                           ;RF24_c.c: 209: RF24_beginTransaction(rf);
 17189                           ;stkvar	_rf @ sp[(-1)+-2]
 17190                           
 17191                           ;incstack = 0
 17192  004D3E  0EFD               	movlw	-3
 17193  004D40  CFE3 FFE6          	movff	plusw1,postinc1
 17194  004D44  CFE3 FFE6          	movff	plusw1,postinc1
 17195  004D48  EC28  F028         	call	_RF24_beginTransaction	;wreg free
 17196                           
 17197                           ;RF24_c.c: 210: status = SPI_transfer( 0x20 | ( 0x1F & reg ) );
 17198                           ;stkvar	_reg @ sp[(-1)+-3]
 17199  004D4C  0EFC               	movlw	-4
 17200  004D4E  50E3               	movf	plusw1,w,c
 17201  004D50  0B1F               	andlw	31
 17202  004D52  0920               	iorlw	32
 17203  004D54  6EE6               	movwf	postinc1,c
 17204  004D56  EC40  F028         	call	_SPI_transfer	;wreg free
 17205                           
 17206                           ;stkvar	_status @ sp[(-1)+0]
 17207  004D5A  0EFF               	movlw	-1
 17208  004D5C  C050  FFE3         	movff	btemp,plusw1
 17209                           
 17210                           ;RF24_c.c: 211: SPI_transfer(value);
 17211                           ;stkvar	_value @ sp[(-1)+-4]
 17212  004D60  0EFB               	movlw	-5
 17213  004D62  50E3               	movf	plusw1,w,c
 17214  004D64  6EE6               	movwf	postinc1,c
 17215  004D66  EC40  F028         	call	_SPI_transfer	;wreg free
 17216                           
 17217                           ;RF24_c.c: 212: RF24_endTransaction(rf);
 17218                           ;stkvar	_rf @ sp[(-1)+-2]
 17219  004D6A  0EFD               	movlw	-3
 17220  004D6C  CFE3 FFE6          	movff	plusw1,postinc1
 17221  004D70  CFE3 FFE6          	movff	plusw1,postinc1
 17222  004D74  EC1C  F028         	call	_RF24_endTransaction	;wreg free
 17223                           
 17224                           ;RF24_c.c: 216: return status;
 17225                           ;stkvar	_status @ sp[(-1)+0]
 17226  004D78  0EFF               	movlw	-1
 17227  004D7A  CFE3 F050          	movff	plusw1,btemp
 17228                           
 17229                           ; _RF24_write_register_d: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 pars
      +                          ize = 4, argsize = 4, vargsize = 0
 17230  004D7E  0EFB               	movlw	251
 17231  004D80  26E1               	addwf	fsr1l,f,c
 17232  004D82  0EFF               	movlw	255
 17233  004D84  22E2               	addwfc	fsr1h,f,c
 17234  004D86  0012               	return		;funcret
 17235  004D88                     __end_of_RF24_write_register_d:
 17236                           	opt stack 0
 17237                           tblptru	equ	0xFF8
 17238                           tblptrh	equ	0xFF7
 17239                           tblptrl	equ	0xFF6
 17240                           tablat	equ	0xFF5
 17241                           prodh	equ	0xFF4
 17242                           prodl	equ	0xFF3
 17243                           intcon	equ	0xFF2
 17244                           indf0	equ	0xFEF
 17245                           postinc0	equ	0xFEE
 17246                           postdec0	equ	0xFED
 17247                           fsr0h	equ	0xFEA
 17248                           fsr0l	equ	0xFE9
 17249                           wreg	equ	0xFE8
 17250                           postinc1	equ	0xFE6
 17251                           postdec1	equ	0xFE5
 17252                           plusw1	equ	0xFE3
 17253                           fsr1h	equ	0xFE2
 17254                           fsr1l	equ	0xFE1
 17255                           indf2	equ	0xFDF
 17256                           postinc2	equ	0xFDE
 17257                           postdec2	equ	0xFDD
 17258                           plusw2	equ	0xFDB
 17259                           fsr2h	equ	0xFDA
 17260                           fsr2l	equ	0xFD9
 17261                           status	equ	0xFD8
 17262                           
 17263 ;; *************** function _RF24_stopListening *****************
 17264 ;; Defined at:
 17265 ;;		line 751 in file "../../../RF24_c/RF24_c.c"
 17266 ;; Parameters:    Size  Location     Type
 17267 ;;  rf              2  [STACK] PTR struct RF24
 17268 ;;		 -> radio(22), 
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;		None
 17271 ;; Return value:  Size  Location     Type
 17272 ;;                  1  [STACK] void 
 17273 ;; Registers used:
 17274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru
 17275 ;; Tracked objects:
 17276 ;;		On entry : 0/0
 17277 ;;		On exit  : 0/0
 17278 ;;		Unchanged: 0/0
 17279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17284 ;;Total ram usage:        0 bytes
 17285 ;; Hardware stack levels used:    1
 17286 ;; Hardware stack levels required when called:    6
 17287 ;; This function calls:
 17288 ;;		_RF24_ce_d
 17289 ;;		_RF24_flush_tx
 17290 ;;		_RF24_read_register_d
 17291 ;;		_RF24_write_register_d
 17292 ;;		_delayMicroseconds
 17293 ;; This function is called by:
 17294 ;;		_RF24N_enqueue
 17295 ;;		_RF24N_write_
 17296 ;;		_RF24N_write_to_pipe
 17297 ;;		_RF24_txStandBy_t
 17298 ;; This function uses a reentrant model
 17299 ;;
 17300                           
 17301                           	psect	text68
 17302  003CA0                     __ptext68:
 17303                           	opt stack 0
 17304  003CA0                     _RF24_stopListening:
 17305                           	opt stack 20
 17306                           
 17307                           ;RF24_c.c: 753: RF24_ce_d(rf,0);
 17308                           
 17309                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 17310                           ;incstack = 0
 17311  003CA0  0E00               	movlw	0
 17312  003CA2  6EE6               	movwf	postinc1,c
 17313                           
 17314                           ;stkvar	_rf @ sp[(-1)+-2]
 17315  003CA4  0EFD               	movlw	-3
 17316  003CA6  CFE3 FFE6          	movff	plusw1,postinc1
 17317  003CAA  CFE3 FFE6          	movff	plusw1,postinc1
 17318  003CAE  EC2A  F026         	call	_RF24_ce_d	;wreg free
 17319                           
 17320                           ;RF24_c.c: 755: delayMicroseconds(rf->txDelay);
 17321                           ;stkvar	_rf @ sp[(0)+-2]
 17322  003CB2  0EFE               	movlw	-2
 17323  003CB4  CFE3 F051          	movff	plusw1,btemp+1
 17324  003CB8  0EFF               	movlw	-1
 17325  003CBA  CFE3 F052          	movff	plusw1,btemp+2
 17326  003CBE  0E0D               	movlw	13
 17327  003CC0  2451               	addwf	btemp+1,w,c
 17328  003CC2  6ED9               	movwf	fsr2l,c
 17329  003CC4  0E00               	movlw	0
 17330  003CC6  2052               	addwfc	btemp+2,w,c
 17331  003CC8  6EDA               	movwf	fsr2h,c
 17332  003CCA  50DF               	movf	indf2,w,c
 17333  003CCC  6EE6               	movwf	postinc1,c
 17334  003CCE  EC7B  F022         	call	_delayMicroseconds	;wreg free
 17335                           
 17336                           ;RF24_c.c: 757: if(RF24_read_register_d(rf,0x1D) & (1<<(1))){
 17337  003CD2  0E1D               	movlw	29
 17338  003CD4  6EE6               	movwf	postinc1,c
 17339                           
 17340                           ;stkvar	_rf @ sp[(-1)+-2]
 17341  003CD6  0EFD               	movlw	-3
 17342  003CD8  CFE3 FFE6          	movff	plusw1,postinc1
 17343  003CDC  CFE3 FFE6          	movff	plusw1,postinc1
 17344  003CE0  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 17345  003CE4  A250               	btfss	btemp,1,c
 17346  003CE6  D017               	goto	l644
 17347                           
 17348                           ;RF24_c.c: 758: delayMicroseconds(rf->txDelay);
 17349                           ;stkvar	_rf @ sp[(0)+-2]
 17350  003CE8  0EFE               	movlw	-2
 17351  003CEA  CFE3 F051          	movff	plusw1,btemp+1
 17352  003CEE  0EFF               	movlw	-1
 17353  003CF0  CFE3 F052          	movff	plusw1,btemp+2
 17354  003CF4  0E0D               	movlw	13
 17355  003CF6  2451               	addwf	btemp+1,w,c
 17356  003CF8  6ED9               	movwf	fsr2l,c
 17357  003CFA  0E00               	movlw	0
 17358  003CFC  2052               	addwfc	btemp+2,w,c
 17359  003CFE  6EDA               	movwf	fsr2h,c
 17360  003D00  50DF               	movf	indf2,w,c
 17361  003D02  6EE6               	movwf	postinc1,c
 17362  003D04  EC7B  F022         	call	_delayMicroseconds	;wreg free
 17363                           
 17364                           ;RF24_c.c: 759: RF24_flush_tx(rf);
 17365                           ;stkvar	_rf @ sp[(0)+-2]
 17366  003D08  0EFE               	movlw	-2
 17367  003D0A  CFE3 FFE6          	movff	plusw1,postinc1
 17368  003D0E  CFE3 FFE6          	movff	plusw1,postinc1
 17369  003D12  EC34  F028         	call	_RF24_flush_tx	;wreg free
 17370  003D16                     l644:
 17371                           
 17372                           ;RF24_c.c: 760: }
 17373                           ;RF24_c.c: 762: RF24_write_register_d(rf,0x00, ( RF24_read_register_d(rf,0x00) ) & ~(1<<
      +                          (0)) );
 17374  003D16  0E00               	movlw	0
 17375  003D18  6EE6               	movwf	postinc1,c
 17376                           
 17377                           ;stkvar	_rf @ sp[(-1)+-2]
 17378  003D1A  0EFD               	movlw	-3
 17379  003D1C  CFE3 FFE6          	movff	plusw1,postinc1
 17380  003D20  CFE3 FFE6          	movff	plusw1,postinc1
 17381  003D24  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 17382  003D28  5050               	movf	btemp,w,c
 17383  003D2A  0BFE               	andlw	254
 17384  003D2C  6EE6               	movwf	postinc1,c
 17385  003D2E  0E00               	movlw	0
 17386  003D30  6EE6               	movwf	postinc1,c
 17387                           
 17388                           ;stkvar	_rf @ sp[(-2)+-2]
 17389  003D32  0EFC               	movlw	-4
 17390  003D34  CFE3 FFE6          	movff	plusw1,postinc1
 17391  003D38  CFE3 FFE6          	movff	plusw1,postinc1
 17392  003D3C  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 17393                           
 17394                           ;RF24_c.c: 771: RF24_write_register_d(rf,0x02,RF24_read_register_d(rf,0x02) | (1<<((*(&c
      +                          hild_pipe_enable[0])))));
 17395  003D40  0ED7               	movlw	low _child_pipe_enable
 17396  003D42  6EF6               	movwf	tblptrl,c
 17397  003D44                     	if	1	;There is more than 1 active tblptr byte
 17398  003D44  0EFD               	movlw	high _child_pipe_enable
 17399  003D46  6EF7               	movwf	tblptrh,c
 17400  003D48                     	endif
 17401  003D48                     	if	1	;There are 3 active tblptr bytes
 17402  003D48  0E00               	movlw	low (_child_pipe_enable shr (0+16))
 17403  003D4A  6EF8               	movwf	tblptru,c
 17404  003D4C                     	endif
 17405  003D4C  0008               	tblrd		*
 17406  003D4E  CFF5 F05B          	movff	tablat,btemp+11
 17407  003D52  0E01               	movlw	1
 17408  003D54  6E5A               	movwf	btemp+10,c
 17409  003D56  2A5B               	incf	btemp+11,f,c
 17410  003D58  D002               	goto	u474
 17411  003D5A                     u475:
 17412  003D5A  90D8               	bcf	status,0,c
 17413  003D5C  365A               	rlcf	btemp+10,f,c
 17414  003D5E                     u474:
 17415  003D5E  2E5B               	decfsz	btemp+11,f,c
 17416  003D60  D7FC               	goto	u475
 17417  003D62  0E02               	movlw	2
 17418  003D64  6EE6               	movwf	postinc1,c
 17419                           
 17420                           ;stkvar	_rf @ sp[(-1)+-2]
 17421  003D66  0EFD               	movlw	-3
 17422  003D68  CFE3 FFE6          	movff	plusw1,postinc1
 17423  003D6C  CFE3 FFE6          	movff	plusw1,postinc1
 17424  003D70  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 17425  003D74  5050               	movf	btemp,w,c
 17426  003D76  105A               	iorwf	btemp+10,w,c
 17427  003D78  6EE6               	movwf	postinc1,c
 17428  003D7A  0E02               	movlw	2
 17429  003D7C  6EE6               	movwf	postinc1,c
 17430                           
 17431                           ;stkvar	_rf @ sp[(-2)+-2]
 17432  003D7E  0EFC               	movlw	-4
 17433  003D80  CFE3 FFE6          	movff	plusw1,postinc1
 17434  003D84  CFE3 FFE6          	movff	plusw1,postinc1
 17435  003D88  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 17436                           
 17437                           ; _RF24_stopListening: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize
      +                           = 2, argsize = 2, vargsize = 0
 17438  003D8C  52E5               	movf	postdec1,f,c
 17439  003D8E  52E5               	movf	postdec1,f,c
 17440  003D90  0012               	return		;funcret
 17441  003D92                     __end_of_RF24_stopListening:
 17442                           	opt stack 0
 17443                           tblptru	equ	0xFF8
 17444                           tblptrh	equ	0xFF7
 17445                           tblptrl	equ	0xFF6
 17446                           tablat	equ	0xFF5
 17447                           prodh	equ	0xFF4
 17448                           prodl	equ	0xFF3
 17449                           intcon	equ	0xFF2
 17450                           indf0	equ	0xFEF
 17451                           postinc0	equ	0xFEE
 17452                           postdec0	equ	0xFED
 17453                           fsr0h	equ	0xFEA
 17454                           fsr0l	equ	0xFE9
 17455                           wreg	equ	0xFE8
 17456                           postinc1	equ	0xFE6
 17457                           postdec1	equ	0xFE5
 17458                           plusw1	equ	0xFE3
 17459                           fsr1h	equ	0xFE2
 17460                           fsr1l	equ	0xFE1
 17461                           indf2	equ	0xFDF
 17462                           postinc2	equ	0xFDE
 17463                           postdec2	equ	0xFDD
 17464                           plusw2	equ	0xFDB
 17465                           fsr2h	equ	0xFDA
 17466                           fsr2l	equ	0xFD9
 17467                           status	equ	0xFD8
 17468                           
 17469 ;; *************** function _RF24_startListening *****************
 17470 ;; Defined at:
 17471 ;;		line 720 in file "../../../RF24_c/RF24_c.c"
 17472 ;; Parameters:    Size  Location     Type
 17473 ;;  rf              2  [STACK] PTR struct RF24
 17474 ;;		 -> radio(22), 
 17475 ;; Auto vars:     Size  Location     Type
 17476 ;;		None
 17477 ;; Return value:  Size  Location     Type
 17478 ;;                  1  [STACK] void 
 17479 ;; Registers used:
 17480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru
 17481 ;; Tracked objects:
 17482 ;;		On entry : 0/0
 17483 ;;		On exit  : 0/0
 17484 ;;		Unchanged: 0/0
 17485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17490 ;;Total ram usage:        0 bytes
 17491 ;; Hardware stack levels used:    1
 17492 ;; Hardware stack levels required when called:    6
 17493 ;; This function calls:
 17494 ;;		_RF24_ce_d
 17495 ;;		_RF24_closeReadingPipe
 17496 ;;		_RF24_flush_tx
 17497 ;;		_RF24_powerUp
 17498 ;;		_RF24_read_register_d
 17499 ;;		_RF24_write_register_c_d
 17500 ;;		_RF24_write_register_d
 17501 ;; This function is called by:
 17502 ;;		_RF24N_begin_d
 17503 ;;		_RF24N_write_
 17504 ;;		_RF24N_write
 17505 ;; This function uses a reentrant model
 17506 ;;
 17507                           
 17508                           	psect	text69
 17509  003990                     __ptext69:
 17510                           	opt stack 0
 17511  003990                     _RF24_startListening:
 17512                           	opt stack 22
 17513                           
 17514                           ;RF24_c.c: 723: RF24_powerUp(rf);
 17515                           ;stkvar	_rf @ sp[(0)+-2]
 17516                           
 17517                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 17518                           ;incstack = 0
 17519  003990  0EFE               	movlw	-2
 17520  003992  CFE3 FFE6          	movff	plusw1,postinc1
 17521  003996  CFE3 FFE6          	movff	plusw1,postinc1
 17522  00399A  EC51  F026         	call	_RF24_powerUp	;wreg free
 17523                           
 17524                           ;RF24_c.c: 725: RF24_write_register_d(rf,0x00, RF24_read_register_d(rf,0x00) | (1<<(0)))
      +                          ;
 17525  00399E  0E00               	movlw	0
 17526  0039A0  6EE6               	movwf	postinc1,c
 17527                           
 17528                           ;stkvar	_rf @ sp[(-1)+-2]
 17529  0039A2  0EFD               	movlw	-3
 17530  0039A4  CFE3 FFE6          	movff	plusw1,postinc1
 17531  0039A8  CFE3 FFE6          	movff	plusw1,postinc1
 17532  0039AC  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 17533  0039B0  5050               	movf	btemp,w,c
 17534  0039B2  0901               	iorlw	1
 17535  0039B4  6EE6               	movwf	postinc1,c
 17536  0039B6  0E00               	movlw	0
 17537  0039B8  6EE6               	movwf	postinc1,c
 17538                           
 17539                           ;stkvar	_rf @ sp[(-2)+-2]
 17540  0039BA  0EFC               	movlw	-4
 17541  0039BC  CFE3 FFE6          	movff	plusw1,postinc1
 17542  0039C0  CFE3 FFE6          	movff	plusw1,postinc1
 17543  0039C4  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 17544                           
 17545                           ;RF24_c.c: 726: RF24_write_register_d(rf,0x07, (1<<(6)) | (1<<(5)) | (1<<(4)) );
 17546  0039C8  0E70               	movlw	112
 17547  0039CA  6EE6               	movwf	postinc1,c
 17548  0039CC  0E07               	movlw	7
 17549  0039CE  6EE6               	movwf	postinc1,c
 17550                           
 17551                           ;stkvar	_rf @ sp[(-2)+-2]
 17552  0039D0  0EFC               	movlw	-4
 17553  0039D2  CFE3 FFE6          	movff	plusw1,postinc1
 17554  0039D6  CFE3 FFE6          	movff	plusw1,postinc1
 17555  0039DA  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 17556                           
 17557                           ;RF24_c.c: 727: RF24_ce_d(rf,1);
 17558  0039DE  0E01               	movlw	1
 17559  0039E0  6EE6               	movwf	postinc1,c
 17560                           
 17561                           ;stkvar	_rf @ sp[(-1)+-2]
 17562  0039E2  0EFD               	movlw	-3
 17563  0039E4  CFE3 FFE6          	movff	plusw1,postinc1
 17564  0039E8  CFE3 FFE6          	movff	plusw1,postinc1
 17565  0039EC  EC2A  F026         	call	_RF24_ce_d	;wreg free
 17566                           
 17567                           ;RF24_c.c: 729: if (rf->pipe0_reading_address[0] > 0){
 17568                           ;stkvar	_rf @ sp[(0)+-2]
 17569  0039F0  0EFE               	movlw	-2
 17570  0039F2  CFE3 F051          	movff	plusw1,btemp+1
 17571  0039F6  0EFF               	movlw	-1
 17572  0039F8  CFE3 F052          	movff	plusw1,btemp+2
 17573  0039FC  0E07               	movlw	7
 17574  0039FE  2451               	addwf	btemp+1,w,c
 17575  003A00  6ED9               	movwf	fsr2l,c
 17576  003A02  0E00               	movlw	0
 17577  003A04  2052               	addwfc	btemp+2,w,c
 17578  003A06  6EDA               	movwf	fsr2h,c
 17579  003A08  50DF               	movf	indf2,w,c
 17580  003A0A  B4D8               	btfsc	status,2,c
 17581  003A0C  D028               	goto	l2264
 17582                           
 17583                           ;RF24_c.c: 730: RF24_write_register_c_d(rf,0x0A, rf->pipe0_reading_address, rf->addr_wid
      +                          th);
 17584                           ;stkvar	_rf @ sp[(0)+-2]
 17585  003A0E  0EFE               	movlw	-2
 17586  003A10  CFE3 F051          	movff	plusw1,btemp+1
 17587  003A14  0EFF               	movlw	-1
 17588  003A16  CFE3 F052          	movff	plusw1,btemp+2
 17589  003A1A  0E0C               	movlw	12
 17590  003A1C  2451               	addwf	btemp+1,w,c
 17591  003A1E  6ED9               	movwf	fsr2l,c
 17592  003A20  0E00               	movlw	0
 17593  003A22  2052               	addwfc	btemp+2,w,c
 17594  003A24  6EDA               	movwf	fsr2h,c
 17595  003A26  50DF               	movf	indf2,w,c
 17596  003A28  6EE6               	movwf	postinc1,c
 17597                           
 17598                           ;stkvar	_rf @ sp[(-1)+-2]
 17599  003A2A  0EFD               	movlw	-3
 17600  003A2C  CFE3 F05A          	movff	plusw1,btemp+10
 17601  003A30  0EFE               	movlw	-2
 17602  003A32  CFE3 F05B          	movff	plusw1,btemp+11
 17603  003A36  0E07               	movlw	7
 17604  003A38  245A               	addwf	btemp+10,w,c
 17605  003A3A  6E51               	movwf	btemp+1,c
 17606  003A3C  0E00               	movlw	0
 17607  003A3E  205B               	addwfc	btemp+11,w,c
 17608  003A40  6E52               	movwf	btemp+2,c
 17609  003A42  C051  FFE6         	movff	btemp+1,postinc1
 17610  003A46  C052  FFE6         	movff	btemp+2,postinc1
 17611  003A4A  0E0A               	movlw	10
 17612  003A4C  6EE6               	movwf	postinc1,c
 17613                           
 17614                           ;stkvar	_rf @ sp[(-4)+-2]
 17615  003A4E  0EFA               	movlw	-6
 17616  003A50  CFE3 FFE6          	movff	plusw1,postinc1
 17617  003A54  CFE3 FFE6          	movff	plusw1,postinc1
 17618  003A58  ECC0  F023         	call	_RF24_write_register_c_d	;wreg free
 17619                           
 17620                           ;RF24_c.c: 731: }else{
 17621  003A5C  D009               	goto	l2266
 17622  003A5E                     l2264:
 17623                           
 17624                           ;RF24_c.c: 732: RF24_closeReadingPipe(rf,0);
 17625  003A5E  0E00               	movlw	0
 17626  003A60  6EE6               	movwf	postinc1,c
 17627                           
 17628                           ;stkvar	_rf @ sp[(-1)+-2]
 17629  003A62  0EFD               	movlw	-3
 17630  003A64  CFE3 FFE6          	movff	plusw1,postinc1
 17631  003A68  CFE3 FFE6          	movff	plusw1,postinc1
 17632  003A6C  EC74  F025         	call	_RF24_closeReadingPipe	;wreg free
 17633  003A70                     l2266:
 17634                           
 17635                           ;RF24_c.c: 733: }
 17636                           ;RF24_c.c: 737: if(RF24_read_register_d(rf,0x1D) & (1<<(1))){
 17637  003A70  0E1D               	movlw	29
 17638  003A72  6EE6               	movwf	postinc1,c
 17639                           
 17640                           ;stkvar	_rf @ sp[(-1)+-2]
 17641  003A74  0EFD               	movlw	-3
 17642  003A76  CFE3 FFE6          	movff	plusw1,postinc1
 17643  003A7A  CFE3 FFE6          	movff	plusw1,postinc1
 17644  003A7E  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 17645  003A82  A250               	btfss	btemp,1,c
 17646  003A84  D007               	goto	l639
 17647                           
 17648                           ;RF24_c.c: 738: RF24_flush_tx(rf);
 17649                           ;stkvar	_rf @ sp[(0)+-2]
 17650  003A86  0EFE               	movlw	-2
 17651  003A88  CFE3 FFE6          	movff	plusw1,postinc1
 17652  003A8C  CFE3 FFE6          	movff	plusw1,postinc1
 17653  003A90  EC34  F028         	call	_RF24_flush_tx	;wreg free
 17654  003A94                     l639:
 17655                           
 17656                           ; _RF24_startListening: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsiz
      +                          e = 2, argsize = 2, vargsize = 0
 17657  003A94  52E5               	movf	postdec1,f,c
 17658  003A96  52E5               	movf	postdec1,f,c
 17659  003A98  0012               	return		;funcret
 17660  003A9A                     __end_of_RF24_startListening:
 17661                           	opt stack 0
 17662                           tblptru	equ	0xFF8
 17663                           tblptrh	equ	0xFF7
 17664                           tblptrl	equ	0xFF6
 17665                           tablat	equ	0xFF5
 17666                           prodh	equ	0xFF4
 17667                           prodl	equ	0xFF3
 17668                           intcon	equ	0xFF2
 17669                           indf0	equ	0xFEF
 17670                           postinc0	equ	0xFEE
 17671                           postdec0	equ	0xFED
 17672                           fsr0h	equ	0xFEA
 17673                           fsr0l	equ	0xFE9
 17674                           wreg	equ	0xFE8
 17675                           postinc1	equ	0xFE6
 17676                           postdec1	equ	0xFE5
 17677                           plusw1	equ	0xFE3
 17678                           fsr1h	equ	0xFE2
 17679                           fsr1l	equ	0xFE1
 17680                           indf2	equ	0xFDF
 17681                           postinc2	equ	0xFDE
 17682                           postdec2	equ	0xFDD
 17683                           plusw2	equ	0xFDB
 17684                           fsr2h	equ	0xFDA
 17685                           fsr2l	equ	0xFD9
 17686                           status	equ	0xFD8
 17687                           
 17688 ;; *************** function _RF24_read_register_d *****************
 17689 ;; Defined at:
 17690 ;;		line 128 in file "../../../RF24_c/RF24_c.c"
 17691 ;; Parameters:    Size  Location     Type
 17692 ;;  rf              2  [STACK] PTR struct RF24
 17693 ;;		 -> radio(22), 
 17694 ;;  reg             1  [STACK] unsigned char 
 17695 ;; Auto vars:     Size  Location     Type
 17696 ;;  result          1  [STACK] unsigned char 
 17697 ;; Return value:  Size  Location     Type
 17698 ;;                  1  [STACK] unsigned char 
 17699 ;; Registers used:
 17700 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2
 17701 ;; Tracked objects:
 17702 ;;		On entry : 0/0
 17703 ;;		On exit  : 0/0
 17704 ;;		Unchanged: 0/0
 17705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17710 ;;Total ram usage:        0 bytes
 17711 ;; Hardware stack levels used:    1
 17712 ;; Hardware stack levels required when called:    4
 17713 ;; This function calls:
 17714 ;;		_RF24_beginTransaction
 17715 ;;		_RF24_endTransaction
 17716 ;;		_SPI_transfer
 17717 ;; This function is called by:
 17718 ;;		_RF24_begin
 17719 ;;		_RF24_startListening
 17720 ;;		_RF24_stopListening
 17721 ;;		_RF24_powerUp
 17722 ;;		_RF24_txStandBy_t
 17723 ;;		_RF24_available_p
 17724 ;;		_RF24_openReadingPipe_d
 17725 ;;		_RF24_closeReadingPipe
 17726 ;;		_RF24_enableDynamicPayloads
 17727 ;;		_RF24_setAutoAck_p
 17728 ;;		_RF24_setDataRate
 17729 ;; This function uses a reentrant model
 17730 ;;
 17731                           
 17732                           	psect	text70
 17733  004D88                     __ptext70:
 17734                           	opt stack 0
 17735  004D88                     _RF24_read_register_d:
 17736                           	opt stack 0
 17737                           
 17738                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 17739  004D88  52E6               	movf	postinc1,f,c
 17740                           
 17741                           ;RF24_c.c: 130: uint8_t result;
 17742                           ;RF24_c.c: 147: RF24_beginTransaction(rf);
 17743                           ;stkvar	_rf @ sp[(-1)+-2]
 17744                           
 17745                           ;incstack = 0
 17746  004D8A  0EFD               	movlw	-3
 17747  004D8C  CFE3 FFE6          	movff	plusw1,postinc1
 17748  004D90  CFE3 FFE6          	movff	plusw1,postinc1
 17749  004D94  EC28  F028         	call	_RF24_beginTransaction	;wreg free
 17750                           
 17751                           ;RF24_c.c: 148: SPI_transfer( 0x00 | ( 0x1F & reg ) );
 17752                           ;stkvar	_reg @ sp[(-1)+-3]
 17753  004D98  0EFC               	movlw	-4
 17754  004D9A  50E3               	movf	plusw1,w,c
 17755  004D9C  0B1F               	andlw	31
 17756  004D9E  6EE6               	movwf	postinc1,c
 17757  004DA0  EC40  F028         	call	_SPI_transfer	;wreg free
 17758                           
 17759                           ;RF24_c.c: 149: result = SPI_transfer(0xff);
 17760  004DA4  0EFF               	movlw	255
 17761  004DA6  6EE6               	movwf	postinc1,c
 17762  004DA8  EC40  F028         	call	_SPI_transfer	;wreg free
 17763                           
 17764                           ;stkvar	_result @ sp[(-1)+0]
 17765  004DAC  0EFF               	movlw	-1
 17766  004DAE  C050  FFE3         	movff	btemp,plusw1
 17767                           
 17768                           ;RF24_c.c: 150: RF24_endTransaction(rf);
 17769                           ;stkvar	_rf @ sp[(-1)+-2]
 17770  004DB2  0EFD               	movlw	-3
 17771  004DB4  CFE3 FFE6          	movff	plusw1,postinc1
 17772  004DB8  CFE3 FFE6          	movff	plusw1,postinc1
 17773  004DBC  EC1C  F028         	call	_RF24_endTransaction	;wreg free
 17774                           
 17775                           ;RF24_c.c: 154: return result;
 17776                           ;stkvar	_result @ sp[(-1)+0]
 17777  004DC0  0EFF               	movlw	-1
 17778  004DC2  CFE3 F050          	movff	plusw1,btemp
 17779                           
 17780                           ; _RF24_read_register_d: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsi
      +                          ze = 3, argsize = 3, vargsize = 0
 17781  004DC6  52E5               	movf	postdec1,f,c
 17782  004DC8  52E5               	movf	postdec1,f,c
 17783  004DCA  52E5               	movf	postdec1,f,c
 17784  004DCC  52E5               	movf	postdec1,f,c
 17785  004DCE  0012               	return		;funcret
 17786  004DD0                     __end_of_RF24_read_register_d:
 17787                           	opt stack 0
 17788                           tblptru	equ	0xFF8
 17789                           tblptrh	equ	0xFF7
 17790                           tblptrl	equ	0xFF6
 17791                           tablat	equ	0xFF5
 17792                           prodh	equ	0xFF4
 17793                           prodl	equ	0xFF3
 17794                           intcon	equ	0xFF2
 17795                           indf0	equ	0xFEF
 17796                           postinc0	equ	0xFEE
 17797                           postdec0	equ	0xFED
 17798                           fsr0h	equ	0xFEA
 17799                           fsr0l	equ	0xFE9
 17800                           wreg	equ	0xFE8
 17801                           postinc1	equ	0xFE6
 17802                           postdec1	equ	0xFE5
 17803                           plusw1	equ	0xFE3
 17804                           fsr1h	equ	0xFE2
 17805                           fsr1l	equ	0xFE1
 17806                           indf2	equ	0xFDF
 17807                           postinc2	equ	0xFDE
 17808                           postdec2	equ	0xFDD
 17809                           plusw2	equ	0xFDB
 17810                           fsr2h	equ	0xFDA
 17811                           fsr2l	equ	0xFD9
 17812                           status	equ	0xFD8
 17813                           
 17814 ;; *************** function _RF24_setAutoAck_p *****************
 17815 ;; Defined at:
 17816 ;;		line 1374 in file "../../../RF24_c/RF24_c.c"
 17817 ;; Parameters:    Size  Location     Type
 17818 ;;  rf              2  [STACK] PTR struct RF24
 17819 ;;		 -> radio(22), 
 17820 ;;  pipe            1  [STACK] unsigned char 
 17821 ;;  enable          1  [STACK] unsigned char 
 17822 ;; Auto vars:     Size  Location     Type
 17823 ;;  en_aa           1  [STACK] unsigned char 
 17824 ;; Return value:  Size  Location     Type
 17825 ;;                  1  [STACK] void 
 17826 ;; Registers used:
 17827 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11
 17828 ;; Tracked objects:
 17829 ;;		On entry : 0/0
 17830 ;;		On exit  : 0/0
 17831 ;;		Unchanged: 0/0
 17832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17837 ;;Total ram usage:        0 bytes
 17838 ;; Hardware stack levels used:    1
 17839 ;; Hardware stack levels required when called:    5
 17840 ;; This function calls:
 17841 ;;		_RF24_read_register_d
 17842 ;;		_RF24_write_register_d
 17843 ;; This function is called by:
 17844 ;;		_RF24N_begin_d
 17845 ;;		_RF24N_write_
 17846 ;;		_RF24N_write
 17847 ;;		_RF24N_write_to_pipe
 17848 ;; This function uses a reentrant model
 17849 ;;
 17850                           
 17851                           	psect	text71
 17852  0043B8                     __ptext71:
 17853                           	opt stack 0
 17854  0043B8                     _RF24_setAutoAck_p:
 17855                           	opt stack 0
 17856                           
 17857                           ; autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 17858  0043B8  52E6               	movf	postinc1,f,c
 17859                           
 17860                           ;RF24_c.c: 1376: if ( pipe <= 6 )
 17861                           ;stkvar	_pipe @ sp[(-1)+-3]
 17862                           
 17863                           ;incstack = 0
 17864  0043BA  0EFC               	movlw	-4
 17865  0043BC  CFE3 F050          	movff	plusw1,btemp
 17866  0043C0  0E07               	movlw	7
 17867  0043C2  6050               	cpfslt	btemp,c
 17868  0043C4  D048               	goto	l808
 17869                           
 17870                           ;RF24_c.c: 1377: {
 17871                           ;RF24_c.c: 1378: uint8_t en_aa = RF24_read_register_d(rf, 0x01 ) ;
 17872  0043C6  0E01               	movlw	1
 17873  0043C8  6EE6               	movwf	postinc1,c
 17874                           
 17875                           ;stkvar	_rf @ sp[(-2)+-2]
 17876  0043CA  0EFC               	movlw	-4
 17877  0043CC  CFE3 FFE6          	movff	plusw1,postinc1
 17878  0043D0  CFE3 FFE6          	movff	plusw1,postinc1
 17879  0043D4  ECC4  F026         	call	_RF24_read_register_d	;wreg free
 17880                           
 17881                           ;stkvar	_en_aa @ sp[(-1)+0]
 17882  0043D8  0EFF               	movlw	-1
 17883  0043DA  C050  FFE3         	movff	btemp,plusw1
 17884                           
 17885                           ;RF24_c.c: 1379: if( enable )
 17886                           ;stkvar	_enable @ sp[(-1)+-4]
 17887  0043DE  0EFB               	movlw	-5
 17888  0043E0  50E3               	movf	plusw1,w,c
 17889  0043E2  B4D8               	btfsc	status,2,c
 17890  0043E4  D015               	goto	l2152
 17891                           
 17892                           ;RF24_c.c: 1380: {
 17893                           ;RF24_c.c: 1381: en_aa |= (1<<(pipe)) ;
 17894                           ;stkvar	_pipe @ sp[(-1)+-3]
 17895  0043E6  0EFC               	movlw	-4
 17896  0043E8  CFE3 F05B          	movff	plusw1,btemp+11
 17897  0043EC  0E01               	movlw	1
 17898  0043EE  6E5A               	movwf	btemp+10,c
 17899  0043F0  2A5B               	incf	btemp+11,f,c
 17900  0043F2  D002               	goto	u534
 17901  0043F4                     u535:
 17902  0043F4  90D8               	bcf	status,0,c
 17903  0043F6  365A               	rlcf	btemp+10,f,c
 17904  0043F8                     u534:
 17905  0043F8  2E5B               	decfsz	btemp+11,f,c
 17906  0043FA  D7FC               	goto	u535
 17907                           
 17908                           ;stkvar	_en_aa @ sp[(-1)+0]
 17909  0043FC  50E1               	movf	fsr1l,w,c
 17910  0043FE  0FFF               	addlw	-1
 17911  004400  6ED9               	movwf	fsr2l,c
 17912  004402  50E2               	movf	fsr1h,w,c
 17913  004404  6EDA               	movwf	fsr2h,c
 17914  004406  0EFF               	movlw	255
 17915  004408  22DA               	addwfc	fsr2h,f,c
 17916  00440A  505A               	movf	btemp+10,w,c
 17917  00440C  12DF               	iorwf	indf2,f,c
 17918                           
 17919                           ;RF24_c.c: 1382: }
 17920  00440E  D017               	goto	l2154
 17921  004410                     l2152:
 17922                           
 17923                           ;RF24_c.c: 1383: else
 17924                           ;RF24_c.c: 1384: {
 17925                           ;RF24_c.c: 1385: en_aa &= ~(1<<(pipe)) ;
 17926                           ;stkvar	_pipe @ sp[(-1)+-3]
 17927  004410  0EFC               	movlw	-4
 17928  004412  CFE3 F05B          	movff	plusw1,btemp+11
 17929  004416  0E01               	movlw	1
 17930  004418  6E5A               	movwf	btemp+10,c
 17931  00441A  2A5B               	incf	btemp+11,f,c
 17932  00441C  D002               	goto	u544
 17933  00441E                     u545:
 17934  00441E  90D8               	bcf	status,0,c
 17935  004420  365A               	rlcf	btemp+10,f,c
 17936  004422                     u544:
 17937  004422  2E5B               	decfsz	btemp+11,f,c
 17938  004424  D7FC               	goto	u545
 17939  004426  505A               	movf	btemp+10,w,c
 17940  004428  0AFF               	xorlw	255
 17941  00442A  6E5B               	movwf	btemp+11,c
 17942                           
 17943                           ;stkvar	_en_aa @ sp[(-1)+0]
 17944  00442C  50E1               	movf	fsr1l,w,c
 17945  00442E  0FFF               	addlw	-1
 17946  004430  6ED9               	movwf	fsr2l,c
 17947  004432  50E2               	movf	fsr1h,w,c
 17948  004434  6EDA               	movwf	fsr2h,c
 17949  004436  0EFF               	movlw	255
 17950  004438  22DA               	addwfc	fsr2h,f,c
 17951  00443A  505B               	movf	btemp+11,w,c
 17952  00443C  16DF               	andwf	indf2,f,c
 17953  00443E                     l2154:
 17954                           
 17955                           ;RF24_c.c: 1386: }
 17956                           ;RF24_c.c: 1387: RF24_write_register_d(rf, 0x01, en_aa ) ;
 17957                           ;stkvar	_en_aa @ sp[(-1)+0]
 17958  00443E  0EFF               	movlw	-1
 17959  004440  50E3               	movf	plusw1,w,c
 17960  004442  6EE6               	movwf	postinc1,c
 17961  004444  0E01               	movlw	1
 17962  004446  6EE6               	movwf	postinc1,c
 17963                           
 17964                           ;stkvar	_rf @ sp[(-3)+-2]
 17965  004448  0EFB               	movlw	-5
 17966  00444A  CFE3 FFE6          	movff	plusw1,postinc1
 17967  00444E  CFE3 FFE6          	movff	plusw1,postinc1
 17968  004452  EC9E  F026         	call	_RF24_write_register_d	;wreg free
 17969  004456                     l808:
 17970                           
 17971                           ; _RF24_setAutoAck_p: autosize = 1, savesize = 0, parsavesize = 0, tempsize = 0 parsize 
      +                          = 4, argsize = 4, vargsize = 0
 17972  004456  0EFB               	movlw	251
 17973  004458  26E1               	addwf	fsr1l,f,c
 17974  00445A  0EFF               	movlw	255
 17975  00445C  22E2               	addwfc	fsr1h,f,c
 17976  00445E  0012               	return		;funcret
 17977  004460                     __end_of_RF24_setAutoAck_p:
 17978                           	opt stack 0
 17979                           tblptru	equ	0xFF8
 17980                           tblptrh	equ	0xFF7
 17981                           tblptrl	equ	0xFF6
 17982                           tablat	equ	0xFF5
 17983                           prodh	equ	0xFF4
 17984                           prodl	equ	0xFF3
 17985                           intcon	equ	0xFF2
 17986                           indf0	equ	0xFEF
 17987                           postinc0	equ	0xFEE
 17988                           postdec0	equ	0xFED
 17989                           fsr0h	equ	0xFEA
 17990                           fsr0l	equ	0xFE9
 17991                           wreg	equ	0xFE8
 17992                           postinc1	equ	0xFE6
 17993                           postdec1	equ	0xFE5
 17994                           plusw1	equ	0xFE3
 17995                           fsr1h	equ	0xFE2
 17996                           fsr1l	equ	0xFE1
 17997                           indf2	equ	0xFDF
 17998                           postinc2	equ	0xFDE
 17999                           postdec2	equ	0xFDD
 18000                           plusw2	equ	0xFDB
 18001                           fsr2h	equ	0xFDA
 18002                           fsr2l	equ	0xFD9
 18003                           status	equ	0xFD8
 18004                           
 18005 ;; *************** function _isr *****************
 18006 ;; Defined at:
 18007 ;;		line 12 in file "pic_main.c"
 18008 ;; Parameters:    Size  Location     Type
 18009 ;;		None
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;		None
 18012 ;; Return value:  Size  Location     Type
 18013 ;;                  1    wreg      void 
 18014 ;; Registers used:
 18015 ;;		wreg, status,2, status,0
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;Total ram usage:        2 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; This function calls:
 18028 ;;		Nothing
 18029 ;; This function is called by:
 18030 ;;		Interrupt level 2
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           	psect	intcode
 18035  000008                     __pintcode:
 18036                           	opt stack 0
 18037  000008                     _isr:
 18038                           	opt stack 15
 18039                           
 18040                           ;incstack = 0
 18041  000008  CFE1 F065          	movff	fsr1l,??_isr
 18042  00000C  CFE2 F066          	movff	fsr1h,??_isr+1
 18043  000010  EDBF  F027         	call	int_func,f	;refresh shadow registers
 18044                           tblptru	equ	0xFF8
 18045                           tblptrh	equ	0xFF7
 18046                           tblptrl	equ	0xFF6
 18047                           tablat	equ	0xFF5
 18048                           prodh	equ	0xFF4
 18049                           prodl	equ	0xFF3
 18050                           intcon	equ	0xFF2
 18051                           indf0	equ	0xFEF
 18052                           postinc0	equ	0xFEE
 18053                           postdec0	equ	0xFED
 18054                           fsr0h	equ	0xFEA
 18055                           fsr0l	equ	0xFE9
 18056                           wreg	equ	0xFE8
 18057                           postinc1	equ	0xFE6
 18058                           postdec1	equ	0xFE5
 18059                           plusw1	equ	0xFE3
 18060                           fsr1h	equ	0xFE2
 18061                           fsr1l	equ	0xFE1
 18062                           indf2	equ	0xFDF
 18063                           postinc2	equ	0xFDE
 18064                           postdec2	equ	0xFDD
 18065                           plusw2	equ	0xFDB
 18066                           fsr2h	equ	0xFDA
 18067                           fsr2l	equ	0xFD9
 18068                           status	equ	0xFD8
 18069                           
 18070                           	psect	intcode_body
 18071  004F7E                     __pintcode_body:
 18072                           	opt stack 15
 18073  004F7E                     int_func:
 18074                           	opt stack 15
 18075  004F7E  0006               	pop		; remove dummy address from shadow register refresh
 18076  004F80  EE15  F004         	lfsr	1,___inthi_sp
 18077                           
 18078                           ;pic_main.c: 14: if(INTCONbits.TMR0IF)
 18079  004F84  A4F2               	btfss	intcon,2,c	;volatile
 18080  004F86  D00B               	goto	i2l63
 18081                           
 18082                           ;pic_main.c: 15: {
 18083                           ;pic_main.c: 16: TMR0H=(65536l-(32000000/4000l)&0xFF00)>>8;
 18084  004F88  0EE0               	movlw	224
 18085  004F8A  6ED7               	movwf	4055,c	;volatile
 18086                           
 18087                           ;pic_main.c: 17: TMR0L=(65536l-(32000000/4000l)&0x00FF);
 18088  004F8C  0EC0               	movlw	192
 18089  004F8E  6ED6               	movwf	4054,c	;volatile
 18090                           
 18091                           ;pic_main.c: 18: mtime++;
 18092  004F90  0E01               	movlw	1
 18093  004F92  2605               	addwf	_mtime,f,c
 18094  004F94  0E00               	movlw	0
 18095  004F96  2206               	addwfc	_mtime+1,f,c
 18096  004F98  2207               	addwfc	_mtime+2,f,c
 18097  004F9A  2208               	addwfc	_mtime+3,f,c
 18098                           
 18099                           ;pic_main.c: 19: INTCONbits.TMR0IF=0;
 18100  004F9C  94F2               	bcf	intcon,2,c	;volatile
 18101  004F9E                     i2l63:
 18102  004F9E  C066  FFE2         	movff	??_isr+1,fsr1h
 18103  004FA2  C065  FFE1         	movff	??_isr,fsr1l
 18104  004FA6  0011               	retfie		f
 18105  004FA8                     __end_of_isr:
 18106                           	opt stack 0
 18107                           tblptru	equ	0xFF8
 18108                           tblptrh	equ	0xFF7
 18109                           tblptrl	equ	0xFF6
 18110                           tablat	equ	0xFF5
 18111                           prodh	equ	0xFF4
 18112                           prodl	equ	0xFF3
 18113                           intcon	equ	0xFF2
 18114                           indf0	equ	0xFEF
 18115                           postinc0	equ	0xFEE
 18116                           postdec0	equ	0xFED
 18117                           fsr0h	equ	0xFEA
 18118                           fsr0l	equ	0xFE9
 18119                           wreg	equ	0xFE8
 18120                           postinc1	equ	0xFE6
 18121                           postdec1	equ	0xFE5
 18122                           plusw1	equ	0xFE3
 18123                           fsr1h	equ	0xFE2
 18124                           fsr1l	equ	0xFE1
 18125                           indf2	equ	0xFDF
 18126                           postinc2	equ	0xFDE
 18127                           postdec2	equ	0xFDD
 18128                           plusw2	equ	0xFDB
 18129                           fsr2h	equ	0xFDA
 18130                           fsr2l	equ	0xFD9
 18131                           status	equ	0xFD8
 18132                           tblptru	equ	0xFF8
 18133                           tblptrh	equ	0xFF7
 18134                           tblptrl	equ	0xFF6
 18135                           tablat	equ	0xFF5
 18136                           prodh	equ	0xFF4
 18137                           prodl	equ	0xFF3
 18138                           intcon	equ	0xFF2
 18139                           indf0	equ	0xFEF
 18140                           postinc0	equ	0xFEE
 18141                           postdec0	equ	0xFED
 18142                           fsr0h	equ	0xFEA
 18143                           fsr0l	equ	0xFE9
 18144                           wreg	equ	0xFE8
 18145                           postinc1	equ	0xFE6
 18146                           postdec1	equ	0xFE5
 18147                           plusw1	equ	0xFE3
 18148                           fsr1h	equ	0xFE2
 18149                           fsr1l	equ	0xFE1
 18150                           indf2	equ	0xFDF
 18151                           postinc2	equ	0xFDE
 18152                           postdec2	equ	0xFDD
 18153                           plusw2	equ	0xFDB
 18154                           fsr2h	equ	0xFDA
 18155                           fsr2l	equ	0xFD9
 18156                           status	equ	0xFD8
 18157                           
 18158                           	psect	rparam
 18159  0000                     tblptru	equ	0xFF8
 18160                           tblptrh	equ	0xFF7
 18161                           tblptrl	equ	0xFF6
 18162                           tablat	equ	0xFF5
 18163                           prodh	equ	0xFF4
 18164                           prodl	equ	0xFF3
 18165                           intcon	equ	0xFF2
 18166                           indf0	equ	0xFEF
 18167                           postinc0	equ	0xFEE
 18168                           postdec0	equ	0xFED
 18169                           fsr0h	equ	0xFEA
 18170                           fsr0l	equ	0xFE9
 18171                           wreg	equ	0xFE8
 18172                           postinc1	equ	0xFE6
 18173                           postdec1	equ	0xFE5
 18174                           plusw1	equ	0xFE3
 18175                           fsr1h	equ	0xFE2
 18176                           fsr1l	equ	0xFE1
 18177                           indf2	equ	0xFDF
 18178                           postinc2	equ	0xFDE
 18179                           postdec2	equ	0xFDD
 18180                           plusw2	equ	0xFDB
 18181                           fsr2h	equ	0xFDA
 18182                           fsr2l	equ	0xFD9
 18183                           status	equ	0xFD8
 18184                           
 18185                           	psect	temp
 18186  000050                     btemp:
 18187                           	opt stack 0
 18188  000050                     	ds	12
 18189                           tblptru	equ	0xFF8
 18190                           tblptrh	equ	0xFF7
 18191                           tblptrl	equ	0xFF6
 18192                           tablat	equ	0xFF5
 18193                           prodh	equ	0xFF4
 18194                           prodl	equ	0xFF3
 18195                           intcon	equ	0xFF2
 18196                           indf0	equ	0xFEF
 18197                           postinc0	equ	0xFEE
 18198                           postdec0	equ	0xFED
 18199                           fsr0h	equ	0xFEA
 18200                           fsr0l	equ	0xFE9
 18201                           wreg	equ	0xFE8
 18202                           postinc1	equ	0xFE6
 18203                           postdec1	equ	0xFE5
 18204                           plusw1	equ	0xFE3
 18205                           fsr1h	equ	0xFE2
 18206                           fsr1l	equ	0xFE1
 18207                           indf2	equ	0xFDF
 18208                           postinc2	equ	0xFDE
 18209                           postdec2	equ	0xFDD
 18210                           plusw2	equ	0xFDB
 18211                           fsr2h	equ	0xFDA
 18212                           fsr2l	equ	0xFD9
 18213                           status	equ	0xFD8


Data Sizes:
    Strings     430
    Constant    172
    Data        9
    BSS         451
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          115      2      90
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 45
		 -> NULL(NULL[0]), RF24NH_toString@buffer(COMRAM[45]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 45
		 -> NULL(NULL[0]), RF24NH_toString@buffer(COMRAM[45]), 

    d1	PTR void  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), bufsize(STACK[2]), msg_size(STACK[2]), network(BIGRAM[372]), 
		 -> radio(COMRAM[22]), 

    d	PTR unsigned char  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), bufsize(STACK[2]), msg_size(STACK[2]), network(BIGRAM[372]), 
		 -> radio(COMRAM[22]), 

    s1	PTR const void  size(2) Largest target is 376
		 -> network.frag_queue(BIGRAM[13]), network.frame_buffer(BIGRAM[32]), address(STACK[4]), message_size(STACK[2]), 
		 -> header(STACK[8]), payload(STACK[8]), network(BIGRAM[372]), 

    s	PTR const unsigned char  size(2) Largest target is 376
		 -> network.frag_queue(BIGRAM[13]), network.frame_buffer(BIGRAM[32]), address(STACK[4]), message_size(STACK[2]), 
		 -> header(STACK[8]), payload(STACK[8]), network(BIGRAM[372]), 

    S3559__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> putch(), Absolute function(), 

    S3559__prbuf$ptr	PTR unsigned char  size(2) Largest target is 45
		 -> NULL(NULL[0]), RF24NH_toString@buffer(COMRAM[45]), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 45
		 -> NULL(NULL[0]), RF24NH_toString@buffer(COMRAM[45]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    buf	PTR void  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    pipe_num	PTR unsigned char  size(2) Largest target is 1
		 -> NULL(NULL[0]), pipe_num(UNKNOWN), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    buf	PTR const void  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    buf	PTR const void  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf24_pa_dbm_e_str_P	const PTR const unsigned char [4] size(2) Largest target is 8
		 -> rf24_pa_dbm_e_str_3(CODE[7]), rf24_pa_dbm_e_str_2(CODE[8]), rf24_pa_dbm_e_str_1(CODE[7]), rf24_pa_dbm_e_str_0(CODE[7]), 

    rf24_crclength_e_str_P	const PTR const unsigned char [3] size(2) Largest target is 9
		 -> rf24_crclength_e_str_2(CODE[8]), rf24_crclength_e_str_1(CODE[7]), rf24_crclength_e_str_0(CODE[9]), 

    rf24_model_e_str_P	const PTR const unsigned char [2] size(2) Largest target is 10
		 -> rf24_model_e_str_1(CODE[10]), rf24_model_e_str_0(CODE[9]), 

    rf24_datarate_e_str_P	const PTR const unsigned char [3] size(2) Largest target is 8
		 -> rf24_datarate_e_str_2(CODE[8]), rf24_datarate_e_str_1(CODE[6]), rf24_datarate_e_str_0(CODE[6]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    buf	PTR void  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    current	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    buf	PTR const void  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    current	PTR const unsigned char  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    buf	PTR const unsigned char  size(2) Largest target is 22
		 -> radio.pipe0_reading_address(COMRAM[5]), address(STACK[4]), value(STACK[4]), radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rf	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    out	PTR unsigned char  size(2) Largest target is 4
		 -> result(STACK[4]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    sp__RF24NH_toString	PTR const unsigned char  size(2) Largest target is 45
		 -> RF24NH_toString@buffer(COMRAM[45]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    multicast	PTR unsigned char  size(2) Largest target is 4
		 -> conversion.multicast(STACK[1]), conversion(UNKNOWN), 

    directTo	PTR unsigned char  size(2) Largest target is 4
		 -> conversion.send_pipe(STACK[1]), conversion(UNKNOWN), 

    conversionInfo	PTR struct . size(2) Largest target is 4
		 -> conversion(UNKNOWN), 

    to_node	PTR unsigned int  size(2) Largest target is 4
		 -> conversion.send_node(STACK[2]), conversion(UNKNOWN), 

    header	PTR struct . size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    message	PTR const void  size(2) Largest target is 8
		 -> payload(STACK[8]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    header	PTR struct . size(2) Largest target is 8
		 -> header(STACK[8]), 

    message	PTR const void  size(2) Largest target is 8
		 -> payload(STACK[8]), 

    header	PTR struct . size(2) Largest target is 8
		 -> header(STACK[8]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    message	PTR const void  size(2) Largest target is 8
		 -> payload(STACK[8]), 

    header	PTR struct . size(2) Largest target is 8
		 -> header(STACK[8]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    sp__memmove	PTR void  size(2) Largest target is 0

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    frame.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    sp__memcpy	PTR void  size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), bufsize(STACK[2]), msg_size(STACK[2]), network(BIGRAM[372]), 
		 -> radio(COMRAM[22]), 

    header	PTR struct . size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    header	PTR struct . size(2) Largest target is 376
		 -> network.frame_buffer(BIGRAM[32]), network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_ptr.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rn.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    _radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    rn	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    rnh	PTR struct . size(2) Largest target is 8
		 -> header(STACK[8]), 

    val	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_4(CODE[8]), STR_3(CODE[4]), STR_1(CODE[36]), 

    val	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_5(CODE[3]), STR_4(CODE[8]), STR_3(CODE[4]), STR_2(CODE[11]), 
		 -> STR_1(CODE[36]), 

    S39$message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    network.frag_queue.message_buffer	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    S43$next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    network.next_frame	PTR unsigned char  size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    S43$radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    network.radio	PTR struct RF24 size(2) Largest target is 22
		 -> radio(COMRAM[22]), 

    S43$frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 

    network.frag_ptr	PTR struct . size(2) Largest target is 376
		 -> network(BIGRAM[372]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 2389965
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0  119330
                      _RF24N_begin_d
                         _RF24N_init
                         _RF24_begin
                          _RF24_init
                       _Serial_begin
                     _Serial_println
 ---------------------------------------------------------------------------------
 (2) _Serial_begin                                         4     0      4     150
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     105
 ---------------------------------------------------------------------------------
 (2) _RF24_init                                            4     0      4     150
 ---------------------------------------------------------------------------------
 (2) _RF24_begin                                           4     2      2   53030
                          _RF24_ce_d
                         _RF24_csn_d
                      _RF24_flush_rx
                      _RF24_flush_tx
                       _RF24_powerUp
               _RF24_read_register_d
                    _RF24_setChannel
                   _RF24_setDataRate
                    _RF24_setRetries
             _RF24_toggle_features_d
              _RF24_write_register_d
                          _SPI_begin
                              _delay
                            _pinMode
 ---------------------------------------------------------------------------------
 (3) _pinMode                                              2     0      2     555
 ---------------------------------------------------------------------------------
 (3) _SPI_begin                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RF24_toggle_features_d                               2     0      2    2565
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (3) _RF24_setDataRate                                     5     2      3    5370
               _RF24_read_register_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (2) _RF24N_init                                           4     0      4     195
 ---------------------------------------------------------------------------------
 (2) _RF24N_begin_d                                        7     2      5   65715
             _RF24N_is_valid_address
                 _RF24N_pipe_address
                _RF24N_setup_address
         _RF24_enableDynamicPayloads
                       _RF24_isValid
             _RF24_openReadingPipe_d
                  _RF24_setAutoAck_p
                    _RF24_setChannel
                    _RF24_setRetries
                _RF24_startListening
                            ___lwmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _RF24_setRetries                                      4     0      4    2655
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (3) _RF24_setChannel                                      6     3      3    2700
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (3) _RF24_openReadingPipe_d                               7     0      7    8185
               _RF24_read_register_d
            _RF24_write_register_c_d
              _RF24_write_register_d
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _RF24_enableDynamicPayloads                           2     0      2    5280
               _RF24_read_register_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (3) _RF24N_setup_address                                 11     9      2     225
 ---------------------------------------------------------------------------------
 (1) _loop                                                21    21      0 2270635
                        _RF24NH_init
                       _RF24N_update
                      _RF24N_write_m
                       _Serial_print
                     _Serial_println
                             _millis
 ---------------------------------------------------------------------------------
 (2) _Serial_println                                       2     0      2      90
                       _Serial_print
 ---------------------------------------------------------------------------------
 (3) _Serial_print                                         4     2      2      75
                          _Serial_tx
 ---------------------------------------------------------------------------------
 (4) _Serial_tx                                            1     0      1      15
 ---------------------------------------------------------------------------------
 (2) _RF24N_write_m                                        8     0      8 1364045
                       _RF24N_write_
 ---------------------------------------------------------------------------------
 (3) _RF24N_write_                                        19     9     10 1363985
                       _RF24N__write
                       _RF24N_update
                  _RF24_setAutoAck_p
                _RF24_startListening
                 _RF24_stopListening
                   _RF24_txStandBy_t
                            ___lwdiv
                            ___lwmod
                             ___wmul
                              _delay
                  _delayMicroseconds
                             _millis
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     105
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     105
 ---------------------------------------------------------------------------------
 (4) _RF24N__write                                        11     1     10  349900
                        _RF24N_write
                             _memcpy
 ---------------------------------------------------------------------------------
 (2) _RF24NH_init                                          5     0      5      75
 ---------------------------------------------------------------------------------
 (5) _RF24N_available                                      2     0      2      30
 ---------------------------------------------------------------------------------
 (5) _RF24_getDynamicPayloadSize                           3     1      2   25815
              _RF24_beginTransaction
                _RF24_endTransaction
                      _RF24_flush_rx
                       _SPI_transfer
                              _delay
 ---------------------------------------------------------------------------------
 (3) _RF24_flush_rx                                        2     0      2   10275
                      _RF24_spiTrans
 ---------------------------------------------------------------------------------
 (5) _RF24_read                                            5     0      5   15820
                  _RF24_read_payload
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (6) _RF24_read_payload                                   11     6      5    5270
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _RF24N_enqueue                                       11     7      4   35350
                 _RF24_stopListening
                            ___lwdiv
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                              10     4      6      80
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     105
 ---------------------------------------------------------------------------------
 (5) _RF24N_levelToAddress                                 5     2      3      45
 ---------------------------------------------------------------------------------
 (5) _RF24_available_p                                     5     1      4   25815
                    _RF24_get_status
               _RF24_read_register_d
 ---------------------------------------------------------------------------------
 (6) _RF24N_logicalToPhysicalAddress                      13     9      4     825
        _RF24N_direct_child_route_to
                _RF24N_is_descendant
              _RF24N_is_direct_child
 ---------------------------------------------------------------------------------
 (7) _RF24N_is_direct_child                                7     3      4     180
                _RF24N_is_descendant
 ---------------------------------------------------------------------------------
 (8) _RF24N_is_descendant                                  4     0      4      45
 ---------------------------------------------------------------------------------
 (7) _RF24N_direct_child_route_to                          6     2      4      45
 ---------------------------------------------------------------------------------
 (6) _RF24N_write_to_pipe                                 11     5      6  257730
                 _RF24N_pipe_address
             _RF24_openWritingPipe_d
                  _RF24_setAutoAck_p
                 _RF24_stopListening
                   _RF24_txStandBy_t
                   _RF24_writeFast_m
 ---------------------------------------------------------------------------------
 (7) _RF24_writeFast_m                                     6     0      6   51905
                    _RF24_get_status
                _RF24_startFastWrite
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (8) _RF24_startFastWrite                                  9     2      7   13015
                          _RF24_ce_d
                 _RF24_write_payload
 ---------------------------------------------------------------------------------
 (9) _RF24_write_payload                                  14     8      6    5315
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (7) _RF24_openWritingPipe_d                               6     0      6   10570
            _RF24_write_register_c_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (3) _RF24N_pipe_address                                  14     9      5     225
 ---------------------------------------------------------------------------------
 (7) _RF24N_is_direct_child                                7     3      4     180
                _RF24N_is_descendant
 ---------------------------------------------------------------------------------
 (8) _RF24N_is_descendant                                  4     0      4      45
 ---------------------------------------------------------------------------------
 (7) _RF24N_direct_child_route_to                          6     2      4      45
 ---------------------------------------------------------------------------------
 (7) _RF24_openWritingPipe_d                               6     0      6   10570
            _RF24_write_register_c_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (4) _RF24_write_register_c_d                              7     1      6    2615
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (7) _RF24_writeFast_m                                     6     0      6   51905
                    _RF24_get_status
                _RF24_startFastWrite
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (5) _RF24_get_status                                      2     0      2   10275
                      _RF24_spiTrans
 ---------------------------------------------------------------------------------
 (6) _digitalWrite                                         2     0      2     540
 ---------------------------------------------------------------------------------
 (9) _RF24_write_payload                                  14     8      6    5315
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (6) _RF24_read_payload                                   11     6      5    5270
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _RF24_spiTrans                                        4     1      3    5130
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _SPI_transfer                                         1     0      1      15
 ---------------------------------------------------------------------------------
 (4) _RF24_endTransaction                                  2     0      2    1260
                         _RF24_csn_d
 ---------------------------------------------------------------------------------
 (4) _RF24_beginTransaction                                2     0      2    1260
                         _RF24_csn_d
 ---------------------------------------------------------------------------------
 (5) _RF24_csn_d                                           3     0      3    1245
                  _delayMicroseconds
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (5) _RF24_get_status                                      2     0      2   10275
                      _RF24_spiTrans
 ---------------------------------------------------------------------------------
 (4) _RF24_spiTrans                                        4     1      3    5130
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (4) _RF24_closeReadingPipe                                3     0      3   10455
               _RF24_read_register_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (8) _RF24_startFastWrite                                  9     2      7   13015
                          _RF24_ce_d
                 _RF24_write_payload
 ---------------------------------------------------------------------------------
 (3) _RF24N_is_valid_address                               6     2      4      60
 ---------------------------------------------------------------------------------
 (3) _RF24_isValid                                         3     1      2      45
 ---------------------------------------------------------------------------------
 (3) _RF24N_pipe_address                                  14     9      5     225
 ---------------------------------------------------------------------------------
 (5) _RF24_csn_d                                           3     0      3    1245
                  _delayMicroseconds
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (6) _digitalWrite                                         2     0      2     540
 ---------------------------------------------------------------------------------
 (6) _delayMicroseconds                                    5     4      1      60
 ---------------------------------------------------------------------------------
 (3) _RF24_ce_d                                            3     0      3    1140
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _RF24_flush_rx                                        2     0      2   10275
                      _RF24_spiTrans
 ---------------------------------------------------------------------------------
 (3) _RF24_flush_tx                                        2     0      2   10275
                      _RF24_spiTrans
 ---------------------------------------------------------------------------------
 (3) _RF24_powerUp                                         3     1      2   10590
               _RF24_read_register_d
              _RF24_write_register_d
                              _delay
 ---------------------------------------------------------------------------------
 (4) _RF24N_update                                         9     7      2  906245
                    _RF24N_available
                      _RF24N_enqueue
             _RF24N_is_valid_address
               _RF24N_levelToAddress
                        _RF24N_write
                   _RF24_available_p
         _RF24_getDynamicPayloadSize
                       _RF24_isValid
                          _RF24_read
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                6     4      2      60
 ---------------------------------------------------------------------------------
 (5) _RF24_read                                            5     0      5   15820
                  _RF24_read_payload
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (3) _RF24_isValid                                         3     1      2      45
 ---------------------------------------------------------------------------------
 (5) _RF24_getDynamicPayloadSize                           3     1      2   25815
              _RF24_beginTransaction
                _RF24_endTransaction
                      _RF24_flush_rx
                       _SPI_transfer
                              _delay
 ---------------------------------------------------------------------------------
 (5) _RF24_available_p                                     5     1      4   25815
                    _RF24_get_status
               _RF24_read_register_d
 ---------------------------------------------------------------------------------
 (5) _RF24N_write                                         17    12      5  349565
             _RF24N_is_valid_address
     _RF24N_logicalToPhysicalAddress
                       _RF24N_update
                _RF24N_write_to_pipe
                  _RF24_setAutoAck_p
                _RF24_startListening
                   _RF24_txStandBy_t
                             _millis
 ---------------------------------------------------------------------------------
 (4) _RF24_txStandBy_t                                    11     4      7   43905
                          _RF24_ce_d
                      _RF24_flush_tx
                    _RF24_get_status
               _RF24_read_register_d
                 _RF24_stopListening
              _RF24_write_register_d
                             _millis
 ---------------------------------------------------------------------------------
 (2) _millis                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _RF24_write_register_d                                5     1      4    2610
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (5) _RF24_stopListening                                   2     0      2   16815
                          _RF24_ce_d
                      _RF24_flush_tx
               _RF24_read_register_d
              _RF24_write_register_d
                  _delayMicroseconds
 ---------------------------------------------------------------------------------
 (3) _RF24_ce_d                                            3     0      3    1140
                       _digitalWrite
 ---------------------------------------------------------------------------------
 (3) _RF24_startListening                                  2     0      2   40460
                          _RF24_ce_d
              _RF24_closeReadingPipe
                      _RF24_flush_tx
                       _RF24_powerUp
               _RF24_read_register_d
            _RF24_write_register_c_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (4) _RF24_read_register_d                                 4     1      3    2595
              _RF24_beginTransaction
                _RF24_endTransaction
                       _SPI_transfer
 ---------------------------------------------------------------------------------
 (3) _RF24_powerUp                                         3     1      2   10590
               _RF24_read_register_d
              _RF24_write_register_d
                              _delay
 ---------------------------------------------------------------------------------
 (3) _RF24_flush_tx                                        2     0      2   10275
                      _RF24_spiTrans
 ---------------------------------------------------------------------------------
 (4) _RF24_closeReadingPipe                                3     0      3   10455
               _RF24_read_register_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (3) _RF24_setAutoAck_p                                    5     1      4    5310
               _RF24_read_register_d
              _RF24_write_register_d
 ---------------------------------------------------------------------------------
 (6) _RF24N_write_to_pipe                                 11     5      6  257730
                 _RF24N_pipe_address
             _RF24_openWritingPipe_d
                  _RF24_setAutoAck_p
                 _RF24_stopListening
                   _RF24_txStandBy_t
                   _RF24_writeFast_m
 ---------------------------------------------------------------------------------
 (4) _RF24N_update                                         9     7      2  906245
                    _RF24N_available
                      _RF24N_enqueue
             _RF24N_is_valid_address
               _RF24N_levelToAddress
                        _RF24N_write
                   _RF24_available_p
         _RF24_getDynamicPayloadSize
                       _RF24_isValid
                          _RF24_read
                              _delay
 ---------------------------------------------------------------------------------
 (6) _RF24N_logicalToPhysicalAddress                      13     9      4     825
        _RF24N_direct_child_route_to
                _RF24N_is_descendant
              _RF24N_is_direct_child
 ---------------------------------------------------------------------------------
 (3) _RF24N_is_valid_address                               6     2      4      60
 ---------------------------------------------------------------------------------
 (5) _RF24N_levelToAddress                                 5     2      3      45
 ---------------------------------------------------------------------------------
 (5) _RF24N_enqueue                                       11     7      4   35350
                 _RF24_stopListening
                            ___lwdiv
                             _memcpy
 ---------------------------------------------------------------------------------
 (5) _RF24N_available                                      2     0      2      30
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _isr                                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 16
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     _RF24NH_init
     _RF24N_update
       _RF24N_available
       _RF24N_enqueue
         _RF24_stopListening
           _RF24_ce_d
             _digitalWrite
           _RF24_flush_tx
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _delayMicroseconds
         ___lwdiv
         _memcpy
       _RF24N_is_valid_address
       _RF24N_levelToAddress
       _RF24N_write
         _RF24N_is_valid_address
         _RF24N_logicalToPhysicalAddress
           _RF24N_direct_child_route_to
           _RF24N_is_descendant
           _RF24N_is_direct_child
             _RF24N_is_descendant
         _RF24N_write_to_pipe
           _RF24N_pipe_address
           _RF24_openWritingPipe_d
             _RF24_write_register_c_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_setAutoAck_p
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_stopListening
             _RF24_ce_d
               _digitalWrite
             _RF24_flush_tx
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _delayMicroseconds
           _RF24_txStandBy_t
             _RF24_ce_d
               _digitalWrite
             _RF24_flush_tx
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_get_status
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_stopListening
               _RF24_ce_d
                 _digitalWrite
               _RF24_flush_tx
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _delayMicroseconds
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _millis
           _RF24_writeFast_m
             _RF24_get_status
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_startFastWrite
               _RF24_ce_d
                 _digitalWrite
               _RF24_write_payload
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
         _RF24_setAutoAck_p
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_startListening
           _RF24_ce_d
             _digitalWrite
           _RF24_closeReadingPipe
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_flush_tx
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_powerUp
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _delay
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_c_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_txStandBy_t
           _RF24_ce_d
             _digitalWrite
           _RF24_flush_tx
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_get_status
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_stopListening
             _RF24_ce_d
               _digitalWrite
             _RF24_flush_tx
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _delayMicroseconds
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _millis
         _millis
       _RF24_available_p
         _RF24_get_status
           _RF24_spiTrans
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_getDynamicPayloadSize
         _RF24_beginTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _RF24_endTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _RF24_flush_rx
           _RF24_spiTrans
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _SPI_transfer
         _delay
       _RF24_isValid
       _RF24_read
         _RF24_read_payload
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _delay
     _RF24N_write_m
       _RF24N_write_
         _RF24N__write
           _RF24N_write
             _RF24N_is_valid_address
             _RF24N_logicalToPhysicalAddress
               _RF24N_direct_child_route_to
               _RF24N_is_descendant
               _RF24N_is_direct_child
                 _RF24N_is_descendant
             _RF24N_update
               _RF24N_available
               _RF24N_enqueue
                 _RF24_stopListening
                   _RF24_ce_d
                     _digitalWrite
                   _RF24_flush_tx
                     _RF24_spiTrans
                       _RF24_beginTransaction
                         _RF24_csn_d
                           _delayMicroseconds
                           _digitalWrite
                       _RF24_endTransaction
                         _RF24_csn_d
                           _delayMicroseconds
                           _digitalWrite
                       _SPI_transfer
                   _RF24_read_register_d
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                   _RF24_write_register_d
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                   _delayMicroseconds
                 ___lwdiv
                 _memcpy
               _RF24N_is_valid_address
               _RF24N_levelToAddress
               _RF24_available_p
                 _RF24_get_status
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_getDynamicPayloadSize
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_flush_rx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _SPI_transfer
                 _delay
               _RF24_isValid
               _RF24_read
                 _RF24_read_payload
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _delay
             _RF24N_write_to_pipe
               _RF24N_pipe_address
               _RF24_openWritingPipe_d
                 _RF24_write_register_c_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_setAutoAck_p
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_stopListening
                 _RF24_ce_d
                   _digitalWrite
                 _RF24_flush_tx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _delayMicroseconds
               _RF24_txStandBy_t
                 _RF24_ce_d
                   _digitalWrite
                 _RF24_flush_tx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_get_status
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_stopListening
                   _RF24_ce_d
                     _digitalWrite
                   _RF24_flush_tx
                     _RF24_spiTrans
                       _RF24_beginTransaction
                         _RF24_csn_d
                           _delayMicroseconds
                           _digitalWrite
                       _RF24_endTransaction
                         _RF24_csn_d
                           _delayMicroseconds
                           _digitalWrite
                       _SPI_transfer
                   _RF24_read_register_d
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                   _RF24_write_register_d
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                   _delayMicroseconds
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _millis
               _RF24_writeFast_m
                 _RF24_get_status
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_startFastWrite
                   _RF24_ce_d
                     _digitalWrite
                   _RF24_write_payload
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
             _RF24_setAutoAck_p
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_startListening
               _RF24_ce_d
                 _digitalWrite
               _RF24_closeReadingPipe
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_flush_tx
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_powerUp
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _delay
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_c_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_txStandBy_t
               _RF24_ce_d
                 _digitalWrite
               _RF24_flush_tx
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_get_status
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_stopListening
                 _RF24_ce_d
                   _digitalWrite
                 _RF24_flush_tx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _delayMicroseconds
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _millis
             _millis
           _memcpy
         _RF24N_update
           _RF24N_available
           _RF24N_enqueue
             _RF24_stopListening
               _RF24_ce_d
                 _digitalWrite
               _RF24_flush_tx
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _delayMicroseconds
             ___lwdiv
             _memcpy
           _RF24N_is_valid_address
           _RF24N_levelToAddress
           _RF24N_write
             _RF24N_is_valid_address
             _RF24N_logicalToPhysicalAddress
               _RF24N_direct_child_route_to
               _RF24N_is_descendant
               _RF24N_is_direct_child
                 _RF24N_is_descendant
             _RF24N_write_to_pipe
               _RF24N_pipe_address
               _RF24_openWritingPipe_d
                 _RF24_write_register_c_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_setAutoAck_p
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_stopListening
                 _RF24_ce_d
                   _digitalWrite
                 _RF24_flush_tx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _delayMicroseconds
               _RF24_txStandBy_t
                 _RF24_ce_d
                   _digitalWrite
                 _RF24_flush_tx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_get_status
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_stopListening
                   _RF24_ce_d
                     _digitalWrite
                   _RF24_flush_tx
                     _RF24_spiTrans
                       _RF24_beginTransaction
                         _RF24_csn_d
                           _delayMicroseconds
                           _digitalWrite
                       _RF24_endTransaction
                         _RF24_csn_d
                           _delayMicroseconds
                           _digitalWrite
                       _SPI_transfer
                   _RF24_read_register_d
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                   _RF24_write_register_d
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                   _delayMicroseconds
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _millis
               _RF24_writeFast_m
                 _RF24_get_status
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_startFastWrite
                   _RF24_ce_d
                     _digitalWrite
                   _RF24_write_payload
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
             _RF24_setAutoAck_p
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_startListening
               _RF24_ce_d
                 _digitalWrite
               _RF24_closeReadingPipe
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_flush_tx
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_powerUp
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _delay
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_c_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_txStandBy_t
               _RF24_ce_d
                 _digitalWrite
               _RF24_flush_tx
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_get_status
                 _RF24_spiTrans
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
               _RF24_read_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _RF24_stopListening
                 _RF24_ce_d
                   _digitalWrite
                 _RF24_flush_tx
                   _RF24_spiTrans
                     _RF24_beginTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _RF24_endTransaction
                       _RF24_csn_d
                         _delayMicroseconds
                         _digitalWrite
                     _SPI_transfer
                 _RF24_read_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _RF24_write_register_d
                   _RF24_beginTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _RF24_endTransaction
                     _RF24_csn_d
                       _delayMicroseconds
                       _digitalWrite
                   _SPI_transfer
                 _delayMicroseconds
               _RF24_write_register_d
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
               _millis
             _millis
           _RF24_available_p
             _RF24_get_status
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_getDynamicPayloadSize
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_flush_rx
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _SPI_transfer
             _delay
           _RF24_isValid
           _RF24_read
             _RF24_read_payload
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _delay
         _RF24_setAutoAck_p
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_startListening
           _RF24_ce_d
             _digitalWrite
           _RF24_closeReadingPipe
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_flush_tx
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_powerUp
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _delay
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_c_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_stopListening
           _RF24_ce_d
             _digitalWrite
           _RF24_flush_tx
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _delayMicroseconds
         _RF24_txStandBy_t
           _RF24_ce_d
             _digitalWrite
           _RF24_flush_tx
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_get_status
             _RF24_spiTrans
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_stopListening
             _RF24_ce_d
               _digitalWrite
             _RF24_flush_tx
               _RF24_spiTrans
                 _RF24_beginTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _RF24_endTransaction
                   _RF24_csn_d
                     _delayMicroseconds
                     _digitalWrite
                 _SPI_transfer
             _RF24_read_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _RF24_write_register_d
               _RF24_beginTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _RF24_endTransaction
                 _RF24_csn_d
                   _delayMicroseconds
                   _digitalWrite
               _SPI_transfer
             _delayMicroseconds
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _millis
         ___lwdiv
         ___lwmod
         ___wmul
         _delay
         _delayMicroseconds
         _millis
     _Serial_print
       _Serial_tx
     _Serial_println
       _Serial_print
         _Serial_tx
     _millis
   _setup
     _RF24N_begin_d
       _RF24N_is_valid_address
       _RF24N_pipe_address
       _RF24N_setup_address
       _RF24_enableDynamicPayloads
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_isValid
       _RF24_openReadingPipe_d
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_c_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _memcpy
       _RF24_setAutoAck_p
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_setChannel
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_setRetries
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_startListening
         _RF24_ce_d
           _digitalWrite
         _RF24_closeReadingPipe
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_flush_tx
           _RF24_spiTrans
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
         _RF24_powerUp
           _RF24_read_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _RF24_write_register_d
             _RF24_beginTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _RF24_endTransaction
               _RF24_csn_d
                 _delayMicroseconds
                 _digitalWrite
             _SPI_transfer
           _delay
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_c_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       ___lwmod
       ___wmul
     _RF24N_init
     _RF24_begin
       _RF24_ce_d
         _digitalWrite
       _RF24_csn_d
         _delayMicroseconds
         _digitalWrite
       _RF24_flush_rx
         _RF24_spiTrans
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_flush_tx
         _RF24_spiTrans
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_powerUp
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _delay
       _RF24_read_register_d
         _RF24_beginTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _RF24_endTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _SPI_transfer
       _RF24_setChannel
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_setDataRate
         _RF24_read_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_setRetries
         _RF24_write_register_d
           _RF24_beginTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _RF24_endTransaction
             _RF24_csn_d
               _delayMicroseconds
               _digitalWrite
           _SPI_transfer
       _RF24_toggle_features_d
         _RF24_beginTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _RF24_endTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _SPI_transfer
       _RF24_write_register_d
         _RF24_beginTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _RF24_endTransaction
           _RF24_csn_d
             _delayMicroseconds
             _digitalWrite
         _SPI_transfer
       _SPI_begin
       _delay
       _pinMode
     _RF24_init
     _Serial_begin
       ___lldiv
     _Serial_println
       _Serial_print
         _Serial_tx

 _isr (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     174      37        9.4%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           73      0       0       0        0.0%
COMRAM              73      2      5A       1       78.3%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5A      34        0.0%
DATA                 0      0     1CE       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Sun Nov 27 22:40:23 2016

           __size_of_RF24N_write_to_pipe 0266                              _SSPSTATbits 000FC7  
                                     l45 35A8                                       l95 50AC  
                                     u10 4544                                       u35 22F8  
                                     u36 22FA                                       u45 2306  
                                     u46 2308                                       u55 2314  
                                     u56 2316                                       u65 2322  
                                     u66 2324                                       u75 2330  
                                     u76 2332                                       u85 233E  
                                     u86 2340                                       u95 234C  
                                     u96 234E                              __CFG_BORV$3 000000  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                 _RF24_openReadingPipe_d 2E42                                      l202 22E2  
                                    l310 18CC                                      l216 12FE  
                                    l250 0B3E                                      l412 4BAC  
                                    l341 1D38                                      l336 32E2  
                                    l276 4E54                                      l633 2C58  
                                    l379 499E                                      l644 3D16  
                                    l652 4CE8                                      l724 4934  
                                    l639 3A94                                      l479 4C9A  
                                    l808 4456                                      l754 2F42  
                                    l691 4A76                                      l755 2FE6  
                                    l942 2018                                      l983 25AE  
                           __CFG_CPB$OFF 000000                                      u105 235A  
                                    u106 235C                                      u115 2368  
                                    u116 236A                                      u205 23E6  
                                    u125 2376                                      u206 23E8  
                                    u126 2378                                      u215 23F4  
                                    u135 2384                                      u216 23F6  
                                    u136 2386                                      u305 2472  
                                    u225 2402                                      u145 2392  
                                    u306 2474                                      u226 2404  
                                    u146 2394                                      u315 2480  
                                    u235 2410                                      u155 23A0  
                                    u316 2482                                      u236 2412  
                                    u156 23A2                                      u325 248E  
                                    u245 241E                                      u165 23AE  
                                    u326 2490                                      u246 2420  
                                    u166 23B0                                      u335 249C  
                                    u255 242C                                      u175 23BC  
                                    u336 249E                                      u256 242E  
                                    u176 23BE                                      u345 24AA  
                                    u265 243A                                      u185 23CA  
                                    u346 24AC                                      u266 243C  
                                    u186 23CC                             __CFG_CPD$OFF 000000  
                                    u355 24B8                                      u275 2448  
                                    u195 23D8                                      u356 24BA  
                                    u276 244A                                      u196 23DA  
                                    u365 24C6                                      u285 2456  
                                    u534 43F8                                      u366 24C8  
                                    u286 2458                                      u535 43F4  
                                    u375 24D4                                      u295 2464  
                                    u544 4422                                      u376 24D6  
                                    u296 2466                                      u545 441E  
                                    u474 3D5E                                      u570 30D0  
                                    u475 3D5A                                      u900 4E52  
                                    u750 499C                                      u575 30C8  
                                    u860 483C                                      u684 4B14  
                                    u685 4B10                                      u865 4834  
                                    u981 1A08               __end_of_child_payload_size FDD1  
                                    _isr 0008                                      fsr2 000FD9  
                  _RF24_write_register_d 4D3C                                      wreg 000FE8  
                           __CFG_LVP$OFF 000000                      _RF24N_is_descendant 493C  
                           __CFG_WDT$OFF 000000                                     l1033 41CA  
                                   l1041 4510                                     l1050 5088  
                  __size_of_SPI_transfer 0014                                     l2104 4232  
                                   l2120 479E                                     l3000 29C6  
                                   l2122 47CC                                     l3002 2A0A  
                                   l3010 2E94                                     l2214 395A  
                                   l3110 17A2                                     l3022 1312  
                                   l2152 4410                                     l2400 4D2E  
                                   l2072 33F0                                     l2064 33C2  
                                   l2056 334E                                     l2136 4A24  
                                   l2304 280A                                     l3040 1410  
                                   l3016 2F04                                     l3200 1EE8  
                                   l2154 443E                                     l2170 30B2  
                                   l2074 341E                                     l2066 33CA  
                                   l2226 470C                                     l2234 4738  
                                   l2330 37EC                                     l2322 37C0  
                                   l3042 143C                                     l3026 1328  
                                   l3210 1F2E                                     l3202 1EF6  
                                   l2180 3100                                     l2164 3058  
                                   l2076 342C                                     l2324 37C8  
                                   l3108 179A                                     l3036 140C  
                                   l3028 1380                                     l3204 1F04  
                                   l3140 1D44                                     l2510 1C72  
                                   l2094 41C2                                     l2182 3122  
                                   l2174 30D8                                     l2078 3434  
                                   l2334 3822                                     l2318 376C  
                                   l3118 189A                                     l3062 1550  
                                   l3046 1442                                     l3206 1F12  
                                   l3150 1D8A                                     l3142 1D52  
                                   l3214 1F3C                                     l2264 3A5E  
                                   l2520 1D32                                     l2168 3070  
                                   l2360 3ECC                                     l2272 3FA4  
                                   l2336 3830                                     l3080 161E  
                                   l3208 1F20                                     l3160 1DD0  
                                   l3152 1D98                                     l3144 1D60  
                                   l2266 3A70                                     l2194 388C  
                                   l2514 1CD4                                     l2506 1C28  
                                   l2450 1948                                     l2354 3EA4  
                                   l2610 04F4                                     l2338 3838  
                                   l3074 15DE                                     l3242 3B54  
                                   l3170 1E16                                     l3162 1DDE  
                                   l3154 1DA6                                     l3146 1D6E  
                                   l2196 38AA                                     l2516 1CEA  
                                   l2444 1924                                     l2292 2678  
                                   l2372 3F54                                     l2604 04B2  
                                   l2540 00E8                                     l2428 492E  
                                   l3068 157C                                     l3236 3B20  
                                   l3180 1E5C                                     l3172 1E24  
                                   l3164 1DEC                                     l3156 1DB4  
                                   l3148 1D7C                                     l2294 26AC  
                                   l2702 4BA0                                     l2278 3FFC  
                                   l2622 05DA                                     l2550 01A4  
                                   l3086 16BE                                     l3078 1602  
                                   l3190 1EA2                                     l3182 1E6A  
                                   l3174 1E32                                     l3166 1DFA  
                                   l3158 1DC2                                     l3350 2A88  
                                   l3510 4FC8                                     l2800 0F5E  
                                   l2384 481E                                     l2288 263A  
                                   l2368 3F36                                     l2632 0650  
                                   l2616 05BE                                     l2560 0218  
                                   l3432 224A                                     l3416 20DA  
                                   l3248 3B8E                                     l3192 1EB0  
                                   l3184 1E78                                     l3176 1E40  
                                   l3168 1E08                                     l3264 3BD6  
                                   l3280 3C7E                                     l2378 47FC  
                                   l2386 4840                                     l1930 2326  
                                   l1922 22EE                                     l2730 42FC  
                                   l2714 4AD6                                     l2650 083E  
                                   l2570 02D0                                     l3098 1778  
                                   l3434 22AA                                     l3194 1EBE  
                                   l3186 1E86                                     l3178 1E4E  
                                   l3370 2B6C                                     l3354 2AD8  
                                   l2820 1062                                     l2804 0F9A  
                                   l1908 4508                                     l2388 4850  
                                   l1940 236C                                     l1932 2334  
                                   l1924 22FC                                     l2628 064A  
                                   l2564 021C                                     l2548 0188  
                                   l2556 01A8                                     l3196 1ECC  
                                   l3188 1E94                                     l3276 3C58  
                                   l3268 3BF2                                     l2806 0FBA  
                                   l1918 4562                                     l1950 23B2  
                                   l1942 237A                                     l1934 2342  
                                   l1926 230A                                     l2718 4ADA  
                                   l2670 0950                                     l2590 03FC  
                                   l3198 1EDA                                     l2496 1B5C  
                                   l2488 1B1E                                     l2840 11C4  
                                   l2816 105A                                     l2760 0C72  
                                   l2752 0C12                                     l1960 23F8  
                                   l1952 23C0                                     l1944 2388  
                                   l1936 2350                                     l1928 2318  
                                   l2672 09B0                                     l2584 039C  
                                   l2912 3258                                     l2920 32A8  
                                   l2904 3214                                     l2826 1088  
                                   l1970 243E                                     l1962 2406  
                                   l1954 23CE                                     l1946 2396  
                                   l1938 235E                                     l2658 0888  
                                   l2852 1252                                     l2756 0C16  
                                   l2748 0BE0                                     l1980 2484  
                                   l1972 244C                                     l1964 2414  
                                   l1956 23DC                                     l1948 23A4  
                                   l2684 0B2C                                     l2916 3288  
                                   l2846 124A                                     l2790 0E96  
                                   l2854 128C                                     l1990 24CA  
                                   l1982 2492                                     l1974 245A  
                                   l1966 2422                                     l1958 23EA  
                                   l2686 0B34                                     l3486 359C  
                                   l1984 24A0                                     l1976 2468  
                                   l1968 2430                                     l2880 2D92  
                                   l2688 0B38                                     l2944 4134  
                                   l2952 419A                                     l1986 24AE  
                                   l1978 2476                                     l1994 24D8  
                                   l2882 2D9C                                     l2698 4B96  
                                   l2938 410C                                     l2962 45E4  
                                   l2970 4BD0                                     l1988 24BC  
                                   l2876 2D4A                                     l2948 417C  
                                   l2958 459A                                     l2888 2E04  
                                   l2984 283C                                     l2988 2860  
                                   ?_isr 0065                                     STR_1 FEC1  
                                   STR_2 FF9D                                     STR_3 FFFB  
                                   STR_4 FFD4                                     STR_5 FF67  
                                   STR_6 FEE5                                     STR_7 FE51  
                                   STR_8 FE97                                     STR_9 FFF1  
                                   u1010 1B46                                     u1220 043A  
                                   u1321 09AE                                     u2115 1D4E  
                                   u1500 0DF4                                     u1260 04F2  
                                   u2116 1D50                                     u2205 1DCC  
                                   u2125 1D5C                                     u1430 0BE0  
                                   u1350 4B90                                     u2206 1DCE  
                                   u2126 1D5E                                     u2215 1DDA  
                                   u2135 1D6A                                     u1408 42F6  
                                   u2216 1DDC                                     u2136 1D6C  
                                   u2305 1E58                                     u2225 1DE8  
                                   u2145 1D78                                     u2306 1E5A  
                                   u2226 1DEA                                     u2146 1D7A  
                                   u1355 4B8A                                     u2315 1E66  
                                   u2235 1DF6                                     u2155 1D86  
                                   u2316 1E68                                     u2236 1DF8  
                                   u2156 1D88                                     u2500 3BD0  
                                   u2405 1EE4                                     u2325 1E74  
                                   u2245 1E04                                     u2165 1D94  
                                   u1390 42F4                                     u2406 1EE6  
                                   u2326 1E76                                     u2246 1E06  
                                   u2166 1D96                                     u1471 0D8C  
                                   u2415 1EF2                                     u2335 1E82  
                                   u2255 1E12                                     u2175 1DA2  
                                   u2416 1EF4                                     u2336 1E84  
                                   u2256 1E14                                     u2176 1DA4  
                                   u2425 1F00                                     u2345 1E90  
                                   u2265 1E20                                     u2185 1DB0  
                                   u1650 110C                                     u2426 1F02  
                                   u2346 1E92                                     u2266 1E22  
                                   u2186 1DB2                                     u2435 1F0E  
                                   u2355 1E9E                                     u2275 1E2E  
                                   u2195 1DBE                                     u2436 1F10  
                                   u2356 1EA0                                     u2276 1E30  
                                   u2196 1DC0                                     u2445 1F1C  
                                   u2365 1EAC                                     u2285 1E3C  
                                   u1750 3228                                     u2446 1F1E  
                                   u2366 1EAE                                     u2286 1E3E  
                                   u2455 1F2A                                     u2375 1EBA  
                                   u2295 1E4A                                     u2640 34CA  
                                   u1840 2858                                     u2456 1F2C  
                                   u2376 1EBC                                     u2296 1E4C  
                                   u2465 1F38                                     u2385 1EC8  
                                   u2545 4052                                     u2466 1F3A  
                                   u2386 1ECA                                     u2395 1ED6  
                                   u1940 1380                                     u1860 29E4  
                                   u1924 2FB8                                     u2396 1ED8  
                                   u1845 2852                                     u1925 2FB4  
                                   u1870 2A06               __size_of_RF24_read_payload 0154  
                                   u1865 29DC                                     u1875 29FE  
                                   u1980 14D6                                     u1990 14D8  
                                   i2l63 4F9E                             __CFG_PWRT$ON 000000  
                     __size_of_RF24_ce_d 004E                       __size_of_RF24_init 00EE  
                     __size_of_RF24_read 003E                                     _main 4FA8  
                                   _loop 3458                                     fsr0h 000FEA  
                                   fsr1h 000FE2                                     indf0 000FEF  
                                   fsr0l 000FE9                                     fsr2h 000FDA  
                                   fsr1l 000FE1                                     indf2 000FDF  
                                   fsr2l 000FD9                                     btemp 0050  
                                   prodh 000FF4                                     prodl 000FF3  
                                   start 0014                            __CFG_IESO$OFF 000000  
                          __CFG_MCLRE$ON 000000                             ___param_bank 000010  
                 _RF24_openWritingPipe_d 430C             __end_of_RF24N_levelToAddress 4BB6  
                                  ??_isr 0065                                    STR_10 FFCC  
                                  STR_20 FFE3                                    STR_13 FFF7  
                                  STR_21 FFA8                                    STR_22 FFEA  
                                  STR_30 FFDC                                    STR_23 FFBB  
                                  STR_31 FF28                                    STR_24 FFC4  
                                  STR_16 FF78                                    STR_32 FF39  
                                  STR_17 FF85                                    STR_25 FF6A  
                                  STR_18 FFB2                                    STR_26 FF16  
                                  STR_19 FF92                                    STR_27 FF5B  
                                  STR_28 FF03                                    STR_29 FF4A  
                        __end_of___lldiv 3CA0              __size_of_RF24N_pipe_address 0184  
                        __end_of___lwdiv 3F6A                          __end_of___lwmod 41B0  
                    __size_of_RF24N_init 0156                             _SPI_transfer 5080  
                                  _TMR0H 000FD7                                    _TMR0L 000FD6  
                                  _SPBRG 000FAF                                    _TXREG 000FAD  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                            __CFG_WRT3$OFF 000000  
              __size_of_RF24_available_p 0068                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                    __size_of_RF24_begin 021E                            __CFG_WRTB$OFF 000000  
                          __CFG_WRTC$OFF 000000                            __CFG_WRTD$OFF 000000  
                    __size_of_RF24_csn_d 004E                           __CFG_EBTRB$OFF 000000  
                                  _delay 41B0                          __end_of_dpowers FDBB  
                                  _radio 003A                                    _mtime 0005  
                        __end_of_pinMode 201E                                    _setup 4860  
                                  _putch 000000                           __CFG_BOREN$OFF 000000  
                                  tablat 000FF5                  _RF24_write_register_c_d 4780  
                                  plusw1 000FE3                                    plusw2 000FDB  
                                  status 000FD8                       __size_of_SPI_begin 001A  
        __size_of_RF24_toggle_features_d 0032     __size_of_RF24N_direct_child_route_to 006C  
                   __end_of_digitalWrite 25B4                          __initialization 4DD0  
             __size_of_RF24_setAutoAck_p 00A8              __size_of_RF24_write_payload 016C  
                           __end_of_main 4FCE                             __end_of_loop 35B2  
                 _rf24_crclength_e_str_0 FDFF                   _rf24_crclength_e_str_1 FE29  
                 _rf24_crclength_e_str_2 FE11                   _rf24_crclength_e_str_P FDDD  
                         __CFG_OSC$HSPLL 000000      __size_of_RF24_getDynamicPayloadSize 006E  
                      __end_of_RF24_ce_d 4CA2                        __end_of_RF24_init 3E80  
                      __end_of_RF24_read 4ED6                            __activetblptr 000003  
  RF24N_pipe_address@address_translation 005C              __end_of_RF24N_setup_address 2A42  
                      _child_pipe_enable FDD7                           _Serial_println 4FCE  
                   __size_of_RF24NH_init 007A                     __end_of_RF24N__write 32EC  
                                 _SPBRGH 000FB0                     __end_of_RF24N_update 1308  
                                 _SSPBUF 000FC9                     __size_of_RF24N_write 046C  
                   __end_of_RF24N_write_ 18D6                           __CFG_XINST$OFF 000000  
        __size_of_RF24N_is_valid_address 0070                                   ___wmul 4460  
                    _RF24_endTransaction 5038              __end_of_rf24_pa_dbm_e_str_0 FE37  
            __end_of_rf24_pa_dbm_e_str_1 FE3E              __end_of_rf24_pa_dbm_e_str_2 FE29  
            __end_of_rf24_pa_dbm_e_str_3 FE45              __end_of_rf24_pa_dbm_e_str_P FDCB  
            __end_of_RF24_startFastWrite 4A80                                   _memcpy 3F6A  
                                 _millis 5094                                   clear_0 4DF8  
                                 clear_1 4E0A                       __size_of_Serial_tx 000E  
                       __end_of_interval FDED                __end_of_child_pipe_enable FDDD  
                 __end_of_Serial_println 4FEE                   _RF24_toggle_features_d 4F4C  
                   __end_of_RF24_isValid 4D3C                        __end_of_SPI_begin 5008  
                           __pdataCOMRAM 005C                    _RF24N_is_direct_child 4260  
                           __mediumconst FDA4                    _RF24_beginTransaction 5050  
                                 tblptrh 000FF7                                   tblptrl 000FF6  
                                 tblptru 000FF8                     __end_of_RF24_powerUp 4CF0  
                    _RF24N_write_to_pipe 25B4                     _RF24N_levelToAddress 4B50  
             __end_of_RF24_stopListening 3D92                               __accesstop 0080  
                __end_of__initialization 4E10                          __CFG_PBADEN$OFF 000000  
              __size_of_RF24_setDataRate 0104              __end_of_RF24_startListening 3A9A  
                          ___rparam_used 000001                           __pcstackCOMRAM 0065  
                             ___inthi_sp 0504                 __size_of_RF24_get_status 0018  
                          __end_of_delay 4260                            __end_of_setup 48CE  
                        _RF24N_available 4E16                       __end_of_RF24N_init 3708  
                       _RF24_available_p 4A80       __end_of_RF24_getDynamicPayloadSize 493C  
             _RF24_getDynamicPayloadSize 48CE                   _RF24N_is_valid_address 47F0  
                     __end_of_RF24_begin 2C60                       __end_of_RF24_csn_d 4C54  
                     _child_payload_size FDCB                        __end_of_Serial_tx 50B4  
                  __size_of_digitalWrite 02C8                               _child_pipe FDD1  
               __size_of_RF24_setChannel 0050           __end_of_RF24_openReadingPipe_d 2FF0  
                  __end_of_RF24N_begin_d 22EC                 __size_of_RF24_setRetries 0038  
                  __end_of_RF24N_enqueue 0B48                    __size_of_RF24N__write 0178  
          __size_of_RF24_read_register_d 0048                             _digitalWrite 22EC  
                  __size_of_RF24N_update 07C0                    __size_of_RF24N_write_ 05CE  
                  __end_of_RF24N_write_m 4E98           __end_of_RF24_openWritingPipe_d 43B8  
              __size_of_RF24_txStandBy_t 0134                                  __Hparam 0000  
                                __Lparam 0000                                  ___lldiv 3B9E  
                        __size_of___wmul 0096                  __end_of_RF24N_available 4E5A  
                                ___lwdiv 3E80                    __size_of_RF24_isValid 004C  
                                ___lwmod 40F4               __end_of_RF24N_pipe_address 3174  
                           _RF24N__write 3174                          __CFG_STVREN$OFF 000000  
                                __pcinit 4DD0                          __size_of_memcpy 00CA  
                        __size_of_millis 0012                                  __ramtop 1000  
                                __ptext0 4FA8                                  __ptext1 4860  
                                __ptext2 4034                                  __ptext3 3B9E  
                                __ptext4 3D92                                  __ptext5 2A42  
                                __ptext6 1D42                                  __ptext7 4FEE  
                                __ptext8 4F4C                                  __ptext9 3A9A  
                           _RF24N_update 0B48                                _T0CONbits 000FD5  
                           _RF24N_write_ 1308      __end_of_RF24N_direct_child_route_to 4A14  
            _RF24N_direct_child_route_to 49A8                        __end_of_hexpowers FDC3  
                  __size_of_RF24_powerUp 004E                                  _dpowers FDB1  
                           __size_of_isr 4FA0                                  _pinMode 1D42  
                              _RF24_ce_d 4C54                                  _next_id 0063  
                                _network 0E0C                                _RF24_init 3D92  
                              _RF24_read 4E98                           __pintcode_body 4F7E  
                   end_of_initialization 4E10                        __end_of_octpowers FDB1  
                                int_func 4F7E                    __end_of_RF24_flush_rx 5020  
                  __end_of_RF24_flush_tx 5080                         _RF24_setDataRate 3A9A  
            __end_of_RF24N_is_descendant 49A8           __end_of_rf24_crclength_e_str_0 FE08  
         __end_of_rf24_crclength_e_str_1 FE30           __end_of_rf24_crclength_e_str_2 FE19  
         __end_of_rf24_crclength_e_str_P FDE3                             _RF24_isValid 4CF0  
             __end_of_RF24_write_payload 3458                        __end_of_this_node FDF5  
                              _RCSTAbits 000FAB                                  postdec0 000FED  
                                postdec1 000FE5                                  postdec2 000FDD  
                                postinc0 000FEE                                  postinc1 000FE6  
                                postinc2 000FDE                    __end_of_RF24_spiTrans 4F14  
              __size_of_RF24_writeFast_m 0076                             _RF24_powerUp 4CA2  
          __end_of_rf24_datarate_e_str_0 FE4B            __end_of_rf24_datarate_e_str_1 FE51  
          __end_of_rf24_datarate_e_str_2 FE21            __end_of_rf24_datarate_e_str_P FDE9  
                             _other_node FDF1               __end_of_rf24_model_e_str_0 FE11  
             __end_of_rf24_model_e_str_1 FDFF               __end_of_rf24_model_e_str_P FDF1  
                              _TRISAbits 000F92                                _TRISBbits 000F93  
                              _TRISCbits 000F94                                _TRISDbits 000F95  
                              _TRISEbits 000F96                                _SPI_begin 4FEE  
           __size_of_RF24N_setup_address 0228                                _TXSTAbits 000FAC  
               __end_of_RF24_available_p 4AE8           __end_of_RF24_toggle_features_d 4F7E  
                     _RF24_stopListening 3CA0                           __end_of___wmul 44F6  
                            _BAUDCONbits 000FB8                            __pidataCOMRAM 50B4  
                   __end_of_Serial_begin 40F4                           __end_of_memcpy 4034  
                         __end_of_millis 50A6                     __end_of_Serial_print 461A  
                    start_initialization 4DD0             __size_of_RF24_startFastWrite 006C  
                            __end_of_isr 4FA8                      __end_of_RF24NH_init 4694  
                       _RF24_txStandBy_t 385C                      __end_of_RF24N_write 1D42  
                              _Serial_tx 50A6                             _packets_sent 0009  
         __size_of_RF24_closeReadingPipe 0068             __size_of_RF24_startListening 010A  
          __end_of_RF24_closeReadingPipe 4B50                         __CFG_LPT1OSC$OFF 000000  
         __end_of_RF24N_is_valid_address 4860              __end_of_RF24_endTransaction 5050  
                            __pbssBIGRAM 0E0C                              __pbssCOMRAM 0001  
                      _delayMicroseconds 44F6      __size_of_RF24_enableDynamicPayloads 0076  
            __end_of_RF24N_write_to_pipe 281A             __end_of_RF24_read_register_d 4DD0  
                      __CFG_CCP2MX$PORTC 000000                          _RF24_get_status 5020  
                              __pintcode 0008                            __pmediumconst FDA4  
                       _RF24_writeFast_m 470A           __size_of_RF24_write_register_d 004C  
          __end_of_RF24_write_register_d 4D88                 __end_of_RF24_setDataRate 3B9E  
                            _RF24NH_init 461A                __end_of_delayMicroseconds 458C  
                              _hexpowers FDBB                                _last_sent 0001  
 __end_of_RF24N_logicalToPhysicalAddress 2E42  __size_of_RF24N_logicalToPhysicalAddress 01E2  
         _RF24N_logicalToPhysicalAddress 2C60                           __size_of_delay 00B0  
                     _RF24N_pipe_address 2FF0                           __size_of_setup 006E  
                            _RF24N_write 18D6                   __size_of_RF24N_begin_d 02CE  
                               _LATAbits 000F89                                 _LATBbits 000F8A  
                               _LATCbits 000F8B                                 _LATDbits 000F8C  
                               _LATEbits 000F8D                                _octpowers FDA5  
                        _RF24_setChannel 4BB6                   __size_of_RF24N_enqueue 0B2C  
                  __size_of_Serial_begin 00C0                         __CFG_WDTPS$32768 000000  
                              _this_node FDF3                    __size_of_Serial_print 008E  
                    _RF24N_setup_address 281A          __end_of_RF24_write_register_c_d 47F0  
                        _RF24_setRetries 4F14                   __size_of_RF24N_write_m 003E  
                     _RF24_write_payload 32EC                       __end_of_child_pipe FDD7  
                              copy_data0 4DE4            __size_of_RF24N_levelToAddress 0066  
                     _rf24_model_e_str_0 FE08                       _rf24_model_e_str_1 FDF5  
                     _rf24_model_e_str_P FDED                  __end_of_RF24_get_status 5038  
                           _Serial_begin 4034       __end_of_RF24_enableDynamicPayloads 470A  
             _RF24_enableDynamicPayloads 4694                             _Serial_print 458C  
                    _rf24_pa_dbm_e_str_0 FE30                      _rf24_pa_dbm_e_str_1 FE37  
                    _rf24_pa_dbm_e_str_2 FE21                      _rf24_pa_dbm_e_str_3 FE3E  
                               __Hrparam 0000                      _rf24_pa_dbm_e_str_P FDC3  
                    _RF24_startFastWrite 4A14                                 __Lrparam 0000  
           __size_of_RF24N_is_descendant 006C                         __size_of___lldiv 0102  
                       __size_of___lwdiv 00EA                         __size_of___lwmod 00BC  
                          _RF24N_begin_d 201E                    _rf24_datarate_e_str_0 FE45  
                  _rf24_datarate_e_str_1 FE4B                    _rf24_datarate_e_str_2 FE19  
                  _rf24_datarate_e_str_P FDE3                 __end_of_RF24_txStandBy_t 3990  
             __size_of_delayMicroseconds 0096                   __size_of_RF24_flush_rx 0018  
                 __size_of_RF24_flush_tx 0018                            _RF24N_enqueue 001C  
                   _RF24_read_register_d 4D88                         __size_of_pinMode 02DC  
                               __ptext10 35B2                                 __ptext11 201E  
                               __ptext20 50A6                                 __ptext12 4F14  
                               __ptext21 4E5A                                 __ptext13 4BB6  
                               __ptext30 4E98                                 __ptext22 1308  
                               __ptext14 2E42                                 __ptext31 3708  
                               __ptext23 4460                                 __ptext15 4694  
                               __ptext40 49A8                                 __ptext32 001C  
                               __ptext24 40F4                                 __ptext16 281A  
                               __ptext41 25B4                                 __ptext33 3F6A  
                               __ptext25 3174                                 __ptext17 3458  
                               __ptext50 4ED6                                 __ptext42 470A  
                               __ptext34 3E80                                 __ptext26 461A  
                               __ptext18 4FCE                                 __ptext51 5080  
                               __ptext43 4A14                                 __ptext35 4B50  
                               __ptext27 4E16                                 __ptext19 458C  
                               __ptext60 5068                                 __ptext52 5038  
                               __ptext44 32EC                                 __ptext36 4A80  
                               __ptext28 48CE                                 __ptext61 4CA2  
                               __ptext53 5050                                 __ptext45 430C  
                               __ptext37 2C60                                 __ptext29 5008  
                               __ptext70 4D88                                 __ptext62 0B48  
                               __ptext54 4C06                                 __ptext46 2FF0  
                               __ptext38 4260                                 __ptext71 43B8  
                               __ptext63 41B0                                 __ptext55 4AE8  
                               __ptext47 4780                                 __ptext39 493C  
                               __ptext64 18D6                                 __ptext56 47F0  
                               __ptext48 5020                                 __ptext65 385C  
                               __ptext57 4CF0                                 __ptext49 22EC  
                               __ptext66 5094                                 __ptext58 44F6  
                               __ptext67 4D3C                                 __ptext59 4C54  
                               __ptext68 3CA0                                 __ptext69 3990  
                    _RF24_startListening 3990                   __size_of_RF24_spiTrans 003E  
                __end_of_RF24_setChannel 4C06                            _RF24N_write_m 4E5A  
                          __size_of_main 0026                        _RF24_read_payload 3708  
                             _RF24N_init 35B2                            __size_of_loop 015A  
                   __end_of_SPI_transfer 5094                                 _interval FDE9  
                             _RF24_begin 2A42                               _RF24_csn_d 4C06  
                __end_of_RF24_setRetries 4F4C           __size_of_RF24N_is_direct_child 00AC  
          __end_of_RF24N_is_direct_child 430C           __size_of_RF24_beginTransaction 0018  
          __end_of_RF24_beginTransaction 5068                               _INTCONbits 000FF2  
               __size_of_RF24N_available 0044                 __end_of_RF24_writeFast_m 4780  
                               intlevel2 0000                __end_of_RF24_read_payload 385C  
                     __end_of_other_node FDF3         __size_of_RF24_write_register_c_d 0070  
        __size_of_RF24_openReadingPipe_d 01AE              __size_of_RF24_stopListening 00F2  
                          _RF24_flush_rx 5008                            _RF24_flush_tx 5068  
                      _RF24_setAutoAck_p 43B8                            _RF24_spiTrans 4ED6  
                  RF24NH_toString@buffer 000D                    _RF24_closeReadingPipe 4AE8  
                __size_of_Serial_println 0020                              _SSPCON1bits 000FC6  
        __size_of_RF24_openWritingPipe_d 00AC             __size_of_RF24_endTransaction 0018  
              __end_of_RF24_setAutoAck_p 4460  
